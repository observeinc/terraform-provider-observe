// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package meta

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
	"github.com/observeinc/terraform-provider-observe/client/meta/types"
)

type ActionInput struct {
	Name             *string               `json:"name"`
	IconUrl          *string               `json:"iconUrl"`
	Description      *string               `json:"description"`
	RateLimit        *types.DurationScalar `json:"rateLimit"`
	NotifyOnClose    *bool                 `json:"notifyOnClose"`
	NotifyOnReminder *bool                 `json:"notifyOnReminder"`
	IsPrivate        *bool                 `json:"isPrivate"`
	Email            *EmailActionInput     `json:"email"`
	Webhook          *WebhookActionInput   `json:"webhook"`
}

// GetName returns ActionInput.Name, and is useful for accessing the field via an interface.
func (v *ActionInput) GetName() *string { return v.Name }

// GetIconUrl returns ActionInput.IconUrl, and is useful for accessing the field via an interface.
func (v *ActionInput) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns ActionInput.Description, and is useful for accessing the field via an interface.
func (v *ActionInput) GetDescription() *string { return v.Description }

// GetRateLimit returns ActionInput.RateLimit, and is useful for accessing the field via an interface.
func (v *ActionInput) GetRateLimit() *types.DurationScalar { return v.RateLimit }

// GetNotifyOnClose returns ActionInput.NotifyOnClose, and is useful for accessing the field via an interface.
func (v *ActionInput) GetNotifyOnClose() *bool { return v.NotifyOnClose }

// GetNotifyOnReminder returns ActionInput.NotifyOnReminder, and is useful for accessing the field via an interface.
func (v *ActionInput) GetNotifyOnReminder() *bool { return v.NotifyOnReminder }

// GetIsPrivate returns ActionInput.IsPrivate, and is useful for accessing the field via an interface.
func (v *ActionInput) GetIsPrivate() *bool { return v.IsPrivate }

// GetEmail returns ActionInput.Email, and is useful for accessing the field via an interface.
func (v *ActionInput) GetEmail() *EmailActionInput { return v.Email }

// GetWebhook returns ActionInput.Webhook, and is useful for accessing the field via an interface.
func (v *ActionInput) GetWebhook() *WebhookActionInput { return v.Webhook }

// ActionRelationInput maps the action's relationship to the destinations the user desires to link with.
type ActionRelationInput struct {
	ActionRule MonitorV2ActionRuleInput `json:"actionRule"`
}

// GetActionRule returns ActionRelationInput.ActionRule, and is useful for accessing the field via an interface.
func (v *ActionRelationInput) GetActionRule() MonitorV2ActionRuleInput { return v.ActionRule }

type AggregateFunction string

const (
	// On Average
	AggregateFunctionAvg AggregateFunction = "Avg"
	// In Total
	AggregateFunctionSum AggregateFunction = "Sum"
	// At All Times (unintuitive but true!)
	AggregateFunctionMin AggregateFunction = "Min"
	// At Least Once (unintuitive but true!)
	AggregateFunctionMax AggregateFunction = "Max"
)

type AggregationMode string

const (
	// Run the query without sampling.
	AggregationModePrecise AggregationMode = "Precise"
	// Run the query with sampled aggregation enabled. The result is not
	// guaranteed to be sampled.
	AggregationModeSampled AggregationMode = "Sampled"
)

// App includes the GraphQL fields of App requested by the fragment App.
// The GraphQL type's documentation follows.
//
// App represents an installed instance of an AppModule
type App struct {
	Id          string            `json:"id"`
	Name        string            `json:"name"`
	IconUrl     *string           `json:"iconUrl"`
	Description *string           `json:"description"`
	WorkspaceId string            `json:"workspaceId"`
	FolderId    string            `json:"folderId"`
	Config      AppConfig         `json:"config"`
	Status      AppStatus         `json:"status"`
	Outputs     *types.JsonObject `json:"outputs"`
}

// GetId returns App.Id, and is useful for accessing the field via an interface.
func (v *App) GetId() string { return v.Id }

// GetName returns App.Name, and is useful for accessing the field via an interface.
func (v *App) GetName() string { return v.Name }

// GetIconUrl returns App.IconUrl, and is useful for accessing the field via an interface.
func (v *App) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns App.Description, and is useful for accessing the field via an interface.
func (v *App) GetDescription() *string { return v.Description }

// GetWorkspaceId returns App.WorkspaceId, and is useful for accessing the field via an interface.
func (v *App) GetWorkspaceId() string { return v.WorkspaceId }

// GetFolderId returns App.FolderId, and is useful for accessing the field via an interface.
func (v *App) GetFolderId() string { return v.FolderId }

// GetConfig returns App.Config, and is useful for accessing the field via an interface.
func (v *App) GetConfig() AppConfig { return v.Config }

// GetStatus returns App.Status, and is useful for accessing the field via an interface.
func (v *App) GetStatus() AppStatus { return v.Status }

// GetOutputs returns App.Outputs, and is useful for accessing the field via an interface.
func (v *App) GetOutputs() *types.JsonObject { return v.Outputs }

// AppConfig includes the requested fields of the GraphQL type AppConfig.
type AppConfig struct {
	ModuleId string `json:"moduleId"`
	Version  string `json:"version"`
}

// GetModuleId returns AppConfig.ModuleId, and is useful for accessing the field via an interface.
func (v *AppConfig) GetModuleId() string { return v.ModuleId }

// GetVersion returns AppConfig.Version, and is useful for accessing the field via an interface.
func (v *AppConfig) GetVersion() string { return v.Version }

// AppDataSource includes the GraphQL fields of AppDataSource requested by the fragment AppDataSource.
type AppDataSource struct {
	Id           string  `json:"id"`
	Name         string  `json:"name"`
	IconUrl      *string `json:"iconUrl"`
	Description  *string `json:"description"`
	WorkspaceId  string  `json:"workspaceId"`
	ManagedById  *string `json:"managedById"`
	SourceUrl    string  `json:"sourceUrl"`
	Instructions string  `json:"instructions"`
}

// GetId returns AppDataSource.Id, and is useful for accessing the field via an interface.
func (v *AppDataSource) GetId() string { return v.Id }

// GetName returns AppDataSource.Name, and is useful for accessing the field via an interface.
func (v *AppDataSource) GetName() string { return v.Name }

// GetIconUrl returns AppDataSource.IconUrl, and is useful for accessing the field via an interface.
func (v *AppDataSource) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns AppDataSource.Description, and is useful for accessing the field via an interface.
func (v *AppDataSource) GetDescription() *string { return v.Description }

// GetWorkspaceId returns AppDataSource.WorkspaceId, and is useful for accessing the field via an interface.
func (v *AppDataSource) GetWorkspaceId() string { return v.WorkspaceId }

// GetManagedById returns AppDataSource.ManagedById, and is useful for accessing the field via an interface.
func (v *AppDataSource) GetManagedById() *string { return v.ManagedById }

// GetSourceUrl returns AppDataSource.SourceUrl, and is useful for accessing the field via an interface.
func (v *AppDataSource) GetSourceUrl() string { return v.SourceUrl }

// GetInstructions returns AppDataSource.Instructions, and is useful for accessing the field via an interface.
func (v *AppDataSource) GetInstructions() string { return v.Instructions }

type AppDataSourceInput struct {
	Name         string             `json:"name"`
	Description  *string            `json:"description"`
	SourceUrl    string             `json:"sourceUrl"`
	Variables    []AppVariableInput `json:"variables"`
	Instructions string             `json:"instructions"`
	AppId        string             `json:"appId"`
}

// GetName returns AppDataSourceInput.Name, and is useful for accessing the field via an interface.
func (v *AppDataSourceInput) GetName() string { return v.Name }

// GetDescription returns AppDataSourceInput.Description, and is useful for accessing the field via an interface.
func (v *AppDataSourceInput) GetDescription() *string { return v.Description }

// GetSourceUrl returns AppDataSourceInput.SourceUrl, and is useful for accessing the field via an interface.
func (v *AppDataSourceInput) GetSourceUrl() string { return v.SourceUrl }

// GetVariables returns AppDataSourceInput.Variables, and is useful for accessing the field via an interface.
func (v *AppDataSourceInput) GetVariables() []AppVariableInput { return v.Variables }

// GetInstructions returns AppDataSourceInput.Instructions, and is useful for accessing the field via an interface.
func (v *AppDataSourceInput) GetInstructions() string { return v.Instructions }

// GetAppId returns AppDataSourceInput.AppId, and is useful for accessing the field via an interface.
func (v *AppDataSourceInput) GetAppId() string { return v.AppId }

type AppInput struct {
	ModuleId  string             `json:"moduleId"`
	Version   string             `json:"version"`
	Variables []AppVariableInput `json:"variables"`
	FolderId  *string            `json:"folderId"`
}

// GetModuleId returns AppInput.ModuleId, and is useful for accessing the field via an interface.
func (v *AppInput) GetModuleId() string { return v.ModuleId }

// GetVersion returns AppInput.Version, and is useful for accessing the field via an interface.
func (v *AppInput) GetVersion() string { return v.Version }

// GetVariables returns AppInput.Variables, and is useful for accessing the field via an interface.
func (v *AppInput) GetVariables() []AppVariableInput { return v.Variables }

// GetFolderId returns AppInput.FolderId, and is useful for accessing the field via an interface.
func (v *AppInput) GetFolderId() *string { return v.FolderId }

type AppState string

const (
	AppStateInitializing AppState = "Initializing"
	AppStateInstalling   AppState = "Installing"
	AppStateInstalled    AppState = "Installed"
	AppStateDeleting     AppState = "Deleting"
	AppStateError        AppState = "Error"
)

// AppStatus includes the requested fields of the GraphQL type AppStatus.
type AppStatus struct {
	State AppState `json:"state"`
	// The detailed internal error message if an app is in Error state. Not suitable for external user consumption.
	InternalError *string `json:"internalError"`
}

// GetState returns AppStatus.State, and is useful for accessing the field via an interface.
func (v *AppStatus) GetState() AppState { return v.State }

// GetInternalError returns AppStatus.InternalError, and is useful for accessing the field via an interface.
func (v *AppStatus) GetInternalError() *string { return v.InternalError }

type AppVariableInput struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns AppVariableInput.Name, and is useful for accessing the field via an interface.
func (v *AppVariableInput) GetName() string { return v.Name }

// GetValue returns AppVariableInput.Value, and is useful for accessing the field via an interface.
func (v *AppVariableInput) GetValue() string { return v.Value }

// Board includes the GraphQL fields of Board requested by the fragment Board.
type Board struct {
	Id        string           `json:"id"`
	DatasetId string           `json:"datasetId"`
	Name      *string          `json:"name"`
	Type      BoardType        `json:"type"`
	BoardJson types.JsonObject `json:"boardJson"`
	Source    *string          `json:"source"`
}

// GetId returns Board.Id, and is useful for accessing the field via an interface.
func (v *Board) GetId() string { return v.Id }

// GetDatasetId returns Board.DatasetId, and is useful for accessing the field via an interface.
func (v *Board) GetDatasetId() string { return v.DatasetId }

// GetName returns Board.Name, and is useful for accessing the field via an interface.
func (v *Board) GetName() *string { return v.Name }

// GetType returns Board.Type, and is useful for accessing the field via an interface.
func (v *Board) GetType() BoardType { return v.Type }

// GetBoardJson returns Board.BoardJson, and is useful for accessing the field via an interface.
func (v *Board) GetBoardJson() types.JsonObject { return v.BoardJson }

// GetSource returns Board.Source, and is useful for accessing the field via an interface.
func (v *Board) GetSource() *string { return v.Source }

type BoardInput struct {
	Name      *string           `json:"name"`
	IsDefault *bool             `json:"isDefault"`
	Board     *types.JsonObject `json:"board"`
	Source    *string           `json:"source"`
}

// GetName returns BoardInput.Name, and is useful for accessing the field via an interface.
func (v *BoardInput) GetName() *string { return v.Name }

// GetIsDefault returns BoardInput.IsDefault, and is useful for accessing the field via an interface.
func (v *BoardInput) GetIsDefault() *bool { return v.IsDefault }

// GetBoard returns BoardInput.Board, and is useful for accessing the field via an interface.
func (v *BoardInput) GetBoard() *types.JsonObject { return v.Board }

// GetSource returns BoardInput.Source, and is useful for accessing the field via an interface.
func (v *BoardInput) GetSource() *string { return v.Source }

type BoardType string

const (
	BoardTypeSet       BoardType = "Set"
	BoardTypeSingleton BoardType = "Singleton"
)

// Bookmark includes the GraphQL fields of Bookmark requested by the fragment Bookmark.
type Bookmark struct {
	Id           string       `json:"id"`
	Name         string       `json:"name"`
	IconUrl      string       `json:"iconUrl"`
	TargetId     string       `json:"targetId"`
	TargetIdKind ObjectKind   `json:"targetIdKind"`
	GroupId      string       `json:"groupId"`
	BookmarkKind BookmarkKind `json:"bookmarkKind"`
}

// GetId returns Bookmark.Id, and is useful for accessing the field via an interface.
func (v *Bookmark) GetId() string { return v.Id }

// GetName returns Bookmark.Name, and is useful for accessing the field via an interface.
func (v *Bookmark) GetName() string { return v.Name }

// GetIconUrl returns Bookmark.IconUrl, and is useful for accessing the field via an interface.
func (v *Bookmark) GetIconUrl() string { return v.IconUrl }

// GetTargetId returns Bookmark.TargetId, and is useful for accessing the field via an interface.
func (v *Bookmark) GetTargetId() string { return v.TargetId }

// GetTargetIdKind returns Bookmark.TargetIdKind, and is useful for accessing the field via an interface.
func (v *Bookmark) GetTargetIdKind() ObjectKind { return v.TargetIdKind }

// GetGroupId returns Bookmark.GroupId, and is useful for accessing the field via an interface.
func (v *Bookmark) GetGroupId() string { return v.GroupId }

// GetBookmarkKind returns Bookmark.BookmarkKind, and is useful for accessing the field via an interface.
func (v *Bookmark) GetBookmarkKind() BookmarkKind { return v.BookmarkKind }

// BookmarkGroup includes the GraphQL fields of BookmarkGroup requested by the fragment BookmarkGroup.
type BookmarkGroup struct {
	Id          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	IconUrl     string `json:"iconUrl"`
	WorkspaceId string `json:"workspaceId"`
	IsHome      bool   `json:"isHome"`
}

// GetId returns BookmarkGroup.Id, and is useful for accessing the field via an interface.
func (v *BookmarkGroup) GetId() string { return v.Id }

// GetName returns BookmarkGroup.Name, and is useful for accessing the field via an interface.
func (v *BookmarkGroup) GetName() string { return v.Name }

// GetDescription returns BookmarkGroup.Description, and is useful for accessing the field via an interface.
func (v *BookmarkGroup) GetDescription() string { return v.Description }

// GetIconUrl returns BookmarkGroup.IconUrl, and is useful for accessing the field via an interface.
func (v *BookmarkGroup) GetIconUrl() string { return v.IconUrl }

// GetWorkspaceId returns BookmarkGroup.WorkspaceId, and is useful for accessing the field via an interface.
func (v *BookmarkGroup) GetWorkspaceId() string { return v.WorkspaceId }

// GetIsHome returns BookmarkGroup.IsHome, and is useful for accessing the field via an interface.
func (v *BookmarkGroup) GetIsHome() bool { return v.IsHome }

type BookmarkGroupInput struct {
	Name         *string                    `json:"name"`
	Description  *string                    `json:"description"`
	IsHome       *bool                      `json:"isHome"`
	IconUrl      *string                    `json:"iconUrl"`
	WorkspaceId  *string                    `json:"workspaceId"`
	Presentation *BookmarkGroupPresentation `json:"presentation"`
	ManagedById  *string                    `json:"managedById"`
}

// GetName returns BookmarkGroupInput.Name, and is useful for accessing the field via an interface.
func (v *BookmarkGroupInput) GetName() *string { return v.Name }

// GetDescription returns BookmarkGroupInput.Description, and is useful for accessing the field via an interface.
func (v *BookmarkGroupInput) GetDescription() *string { return v.Description }

// GetIsHome returns BookmarkGroupInput.IsHome, and is useful for accessing the field via an interface.
func (v *BookmarkGroupInput) GetIsHome() *bool { return v.IsHome }

// GetIconUrl returns BookmarkGroupInput.IconUrl, and is useful for accessing the field via an interface.
func (v *BookmarkGroupInput) GetIconUrl() *string { return v.IconUrl }

// GetWorkspaceId returns BookmarkGroupInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *BookmarkGroupInput) GetWorkspaceId() *string { return v.WorkspaceId }

// GetPresentation returns BookmarkGroupInput.Presentation, and is useful for accessing the field via an interface.
func (v *BookmarkGroupInput) GetPresentation() *BookmarkGroupPresentation { return v.Presentation }

// GetManagedById returns BookmarkGroupInput.ManagedById, and is useful for accessing the field via an interface.
func (v *BookmarkGroupInput) GetManagedById() *string { return v.ManagedById }

type BookmarkGroupPresentation string

const (
	BookmarkGroupPresentationPercustomerworkspace BookmarkGroupPresentation = "PerCustomerWorkspace"
	BookmarkGroupPresentationPeruserworkspace     BookmarkGroupPresentation = "PerUserWorkspace"
	BookmarkGroupPresentationPeruser              BookmarkGroupPresentation = "PerUser"
	BookmarkGroupPresentationHidden               BookmarkGroupPresentation = "Hidden"
)

// Bookmarks have their own identity, but they don't have "last changed by"
// or "created by" timestamps / user auditing, as they are more lightweight.
type BookmarkInput struct {
	Name             *string          `json:"name"`
	Description      *string          `json:"description"`
	IconUrl          *string          `json:"iconUrl"`
	UrlStateId       *string          `json:"urlStateId"`
	TargetId         *string          `json:"targetId"`
	TargetResourceId *ResourceIdInput `json:"targetResourceId"`
	GroupId          *string          `json:"groupId"`
	ManagedById      *string          `json:"managedById"`
	WorkspaceId      *string          `json:"workspaceId"`
	BookmarkKind     *BookmarkKind    `json:"bookmarkKind"`
}

// GetName returns BookmarkInput.Name, and is useful for accessing the field via an interface.
func (v *BookmarkInput) GetName() *string { return v.Name }

// GetDescription returns BookmarkInput.Description, and is useful for accessing the field via an interface.
func (v *BookmarkInput) GetDescription() *string { return v.Description }

// GetIconUrl returns BookmarkInput.IconUrl, and is useful for accessing the field via an interface.
func (v *BookmarkInput) GetIconUrl() *string { return v.IconUrl }

// GetUrlStateId returns BookmarkInput.UrlStateId, and is useful for accessing the field via an interface.
func (v *BookmarkInput) GetUrlStateId() *string { return v.UrlStateId }

// GetTargetId returns BookmarkInput.TargetId, and is useful for accessing the field via an interface.
func (v *BookmarkInput) GetTargetId() *string { return v.TargetId }

// GetTargetResourceId returns BookmarkInput.TargetResourceId, and is useful for accessing the field via an interface.
func (v *BookmarkInput) GetTargetResourceId() *ResourceIdInput { return v.TargetResourceId }

// GetGroupId returns BookmarkInput.GroupId, and is useful for accessing the field via an interface.
func (v *BookmarkInput) GetGroupId() *string { return v.GroupId }

// GetManagedById returns BookmarkInput.ManagedById, and is useful for accessing the field via an interface.
func (v *BookmarkInput) GetManagedById() *string { return v.ManagedById }

// GetWorkspaceId returns BookmarkInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *BookmarkInput) GetWorkspaceId() *string { return v.WorkspaceId }

// GetBookmarkKind returns BookmarkInput.BookmarkKind, and is useful for accessing the field via an interface.
func (v *BookmarkInput) GetBookmarkKind() *BookmarkKind { return v.BookmarkKind }

type BookmarkKind string

const (
	BookmarkKindDataset          BookmarkKind = "Dataset"
	BookmarkKindWorksheet        BookmarkKind = "Worksheet"
	BookmarkKindBookmarkgroup    BookmarkKind = "BookmarkGroup"
	BookmarkKindMonitor          BookmarkKind = "Monitor"
	BookmarkKindResource         BookmarkKind = "Resource"
	BookmarkKindDashboard        BookmarkKind = "Dashboard"
	BookmarkKindLogexplorer      BookmarkKind = "LogExplorer"
	BookmarkKindMetricexplorer   BookmarkKind = "MetricExplorer"
	BookmarkKindResourceexplorer BookmarkKind = "ResourceExplorer"
	BookmarkKindTraceexplorer    BookmarkKind = "TraceExplorer"
	BookmarkKindAlertexplorer    BookmarkKind = "AlertExplorer"
	BookmarkKindServiceexplorer  BookmarkKind = "ServiceExplorer"
)

type ChangeType string

const (
	ChangeTypeAbsolute ChangeType = "Absolute"
	ChangeTypeRelative ChangeType = "Relative"
)

// Channel includes the GraphQL fields of Channel requested by the fragment Channel.
type Channel struct {
	Id          string                   `json:"id"`
	Name        string                   `json:"name"`
	IconUrl     string                   `json:"iconUrl"`
	Description string                   `json:"description"`
	WorkspaceId string                   `json:"workspaceId"`
	Monitors    []ChannelMonitorsMonitor `json:"monitors"`
}

// GetId returns Channel.Id, and is useful for accessing the field via an interface.
func (v *Channel) GetId() string { return v.Id }

// GetName returns Channel.Name, and is useful for accessing the field via an interface.
func (v *Channel) GetName() string { return v.Name }

// GetIconUrl returns Channel.IconUrl, and is useful for accessing the field via an interface.
func (v *Channel) GetIconUrl() string { return v.IconUrl }

// GetDescription returns Channel.Description, and is useful for accessing the field via an interface.
func (v *Channel) GetDescription() string { return v.Description }

// GetWorkspaceId returns Channel.WorkspaceId, and is useful for accessing the field via an interface.
func (v *Channel) GetWorkspaceId() string { return v.WorkspaceId }

// GetMonitors returns Channel.Monitors, and is useful for accessing the field via an interface.
func (v *Channel) GetMonitors() []ChannelMonitorsMonitor { return v.Monitors }

// ChannelAction includes the GraphQL fields of ChannelAction requested by the fragment ChannelAction.
//
// ChannelAction is implemented by the following types:
// ChannelActionEmailAction
// ChannelActionWebhookAction
// ChannelActionUnknownAction
type ChannelAction interface {
	implementsGraphQLInterfaceChannelAction()
	// GetId returns the interface-field "id" from its implementation.
	GetId() string
	// GetName returns the interface-field "name" from its implementation.
	GetName() string
	// GetIconUrl returns the interface-field "iconUrl" from its implementation.
	GetIconUrl() string
	// GetDescription returns the interface-field "description" from its implementation.
	GetDescription() string
	// GetNotifyOnClose returns the interface-field "notifyOnClose" from its implementation.
	GetNotifyOnClose() bool
	// GetWorkspaceId returns the interface-field "workspaceId" from its implementation.
	GetWorkspaceId() string
	// GetChannels returns the interface-field "channels" from its implementation.
	GetChannels() []ChannelActionChannelsChannel
	// GetRateLimit returns the interface-field "rateLimit" from its implementation.
	GetRateLimit() types.DurationScalar
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ChannelActionEmailAction) implementsGraphQLInterfaceChannelAction()   {}
func (v *ChannelActionWebhookAction) implementsGraphQLInterfaceChannelAction() {}
func (v *ChannelActionUnknownAction) implementsGraphQLInterfaceChannelAction() {}

func __unmarshalChannelAction(b []byte, v *ChannelAction) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "EmailAction":
		*v = new(ChannelActionEmailAction)
		return json.Unmarshal(b, *v)
	case "WebhookAction":
		*v = new(ChannelActionWebhookAction)
		return json.Unmarshal(b, *v)
	case "UnknownAction":
		*v = new(ChannelActionUnknownAction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ChannelAction.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ChannelAction: "%v"`, tn.TypeName)
	}
}

func __marshalChannelAction(v *ChannelAction) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ChannelActionEmailAction:
		typename = "EmailAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ChannelActionEmailAction
		}{typename, v}
		return json.Marshal(result)
	case *ChannelActionWebhookAction:
		typename = "WebhookAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ChannelActionWebhookAction
		}{typename, v}
		return json.Marshal(result)
	case *ChannelActionUnknownAction:
		typename = "UnknownAction"

		result := struct {
			TypeName string `json:"__typename"`
			*ChannelActionUnknownAction
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ChannelAction: "%T"`, v)
	}
}

// ChannelActionChannelsChannel includes the requested fields of the GraphQL type Channel.
type ChannelActionChannelsChannel struct {
	Id string `json:"id"`
}

// GetId returns ChannelActionChannelsChannel.Id, and is useful for accessing the field via an interface.
func (v *ChannelActionChannelsChannel) GetId() string { return v.Id }

// ChannelAction includes the GraphQL fields of EmailAction requested by the fragment ChannelAction.
type ChannelActionEmailAction struct {
	Id              string                         `json:"id"`
	Name            string                         `json:"name"`
	IconUrl         string                         `json:"iconUrl"`
	Description     string                         `json:"description"`
	NotifyOnClose   bool                           `json:"notifyOnClose"`
	WorkspaceId     string                         `json:"workspaceId"`
	Channels        []ChannelActionChannelsChannel `json:"channels"`
	RateLimit       types.DurationScalar           `json:"rateLimit"`
	Typename        *string                        `json:"__typename"`
	TargetAddresses []string                       `json:"targetAddresses"`
	SubjectTemplate string                         `json:"subjectTemplate"`
	BodyTemplate    string                         `json:"bodyTemplate"`
	IsHtml          bool                           `json:"isHtml"`
}

// GetId returns ChannelActionEmailAction.Id, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetId() string { return v.Id }

// GetName returns ChannelActionEmailAction.Name, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetName() string { return v.Name }

// GetIconUrl returns ChannelActionEmailAction.IconUrl, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetIconUrl() string { return v.IconUrl }

// GetDescription returns ChannelActionEmailAction.Description, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetDescription() string { return v.Description }

// GetNotifyOnClose returns ChannelActionEmailAction.NotifyOnClose, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetNotifyOnClose() bool { return v.NotifyOnClose }

// GetWorkspaceId returns ChannelActionEmailAction.WorkspaceId, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetWorkspaceId() string { return v.WorkspaceId }

// GetChannels returns ChannelActionEmailAction.Channels, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetChannels() []ChannelActionChannelsChannel { return v.Channels }

// GetRateLimit returns ChannelActionEmailAction.RateLimit, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetRateLimit() types.DurationScalar { return v.RateLimit }

// GetTypename returns ChannelActionEmailAction.Typename, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetTypename() *string { return v.Typename }

// GetTargetAddresses returns ChannelActionEmailAction.TargetAddresses, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetTargetAddresses() []string { return v.TargetAddresses }

// GetSubjectTemplate returns ChannelActionEmailAction.SubjectTemplate, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetSubjectTemplate() string { return v.SubjectTemplate }

// GetBodyTemplate returns ChannelActionEmailAction.BodyTemplate, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetBodyTemplate() string { return v.BodyTemplate }

// GetIsHtml returns ChannelActionEmailAction.IsHtml, and is useful for accessing the field via an interface.
func (v *ChannelActionEmailAction) GetIsHtml() bool { return v.IsHtml }

// ChannelActionHeadersWebhookHeader includes the requested fields of the GraphQL type WebhookHeader.
type ChannelActionHeadersWebhookHeader struct {
	Header        string `json:"header"`
	ValueTemplate string `json:"valueTemplate"`
}

// GetHeader returns ChannelActionHeadersWebhookHeader.Header, and is useful for accessing the field via an interface.
func (v *ChannelActionHeadersWebhookHeader) GetHeader() string { return v.Header }

// GetValueTemplate returns ChannelActionHeadersWebhookHeader.ValueTemplate, and is useful for accessing the field via an interface.
func (v *ChannelActionHeadersWebhookHeader) GetValueTemplate() string { return v.ValueTemplate }

// ChannelAction includes the GraphQL fields of UnknownAction requested by the fragment ChannelAction.
type ChannelActionUnknownAction struct {
	Id            string                         `json:"id"`
	Name          string                         `json:"name"`
	IconUrl       string                         `json:"iconUrl"`
	Description   string                         `json:"description"`
	NotifyOnClose bool                           `json:"notifyOnClose"`
	WorkspaceId   string                         `json:"workspaceId"`
	Channels      []ChannelActionChannelsChannel `json:"channels"`
	RateLimit     types.DurationScalar           `json:"rateLimit"`
	Typename      *string                        `json:"__typename"`
}

// GetId returns ChannelActionUnknownAction.Id, and is useful for accessing the field via an interface.
func (v *ChannelActionUnknownAction) GetId() string { return v.Id }

// GetName returns ChannelActionUnknownAction.Name, and is useful for accessing the field via an interface.
func (v *ChannelActionUnknownAction) GetName() string { return v.Name }

// GetIconUrl returns ChannelActionUnknownAction.IconUrl, and is useful for accessing the field via an interface.
func (v *ChannelActionUnknownAction) GetIconUrl() string { return v.IconUrl }

// GetDescription returns ChannelActionUnknownAction.Description, and is useful for accessing the field via an interface.
func (v *ChannelActionUnknownAction) GetDescription() string { return v.Description }

// GetNotifyOnClose returns ChannelActionUnknownAction.NotifyOnClose, and is useful for accessing the field via an interface.
func (v *ChannelActionUnknownAction) GetNotifyOnClose() bool { return v.NotifyOnClose }

// GetWorkspaceId returns ChannelActionUnknownAction.WorkspaceId, and is useful for accessing the field via an interface.
func (v *ChannelActionUnknownAction) GetWorkspaceId() string { return v.WorkspaceId }

// GetChannels returns ChannelActionUnknownAction.Channels, and is useful for accessing the field via an interface.
func (v *ChannelActionUnknownAction) GetChannels() []ChannelActionChannelsChannel { return v.Channels }

// GetRateLimit returns ChannelActionUnknownAction.RateLimit, and is useful for accessing the field via an interface.
func (v *ChannelActionUnknownAction) GetRateLimit() types.DurationScalar { return v.RateLimit }

// GetTypename returns ChannelActionUnknownAction.Typename, and is useful for accessing the field via an interface.
func (v *ChannelActionUnknownAction) GetTypename() *string { return v.Typename }

// ChannelAction includes the GraphQL fields of WebhookAction requested by the fragment ChannelAction.
type ChannelActionWebhookAction struct {
	Id            string                              `json:"id"`
	Name          string                              `json:"name"`
	IconUrl       string                              `json:"iconUrl"`
	Description   string                              `json:"description"`
	NotifyOnClose bool                                `json:"notifyOnClose"`
	WorkspaceId   string                              `json:"workspaceId"`
	Channels      []ChannelActionChannelsChannel      `json:"channels"`
	RateLimit     types.DurationScalar                `json:"rateLimit"`
	Typename      *string                             `json:"__typename"`
	UrlTemplate   string                              `json:"urlTemplate"`
	BodyTemplate  string                              `json:"bodyTemplate"`
	Method        string                              `json:"method"`
	Headers       []ChannelActionHeadersWebhookHeader `json:"headers"`
}

// GetId returns ChannelActionWebhookAction.Id, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetId() string { return v.Id }

// GetName returns ChannelActionWebhookAction.Name, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetName() string { return v.Name }

// GetIconUrl returns ChannelActionWebhookAction.IconUrl, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetIconUrl() string { return v.IconUrl }

// GetDescription returns ChannelActionWebhookAction.Description, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetDescription() string { return v.Description }

// GetNotifyOnClose returns ChannelActionWebhookAction.NotifyOnClose, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetNotifyOnClose() bool { return v.NotifyOnClose }

// GetWorkspaceId returns ChannelActionWebhookAction.WorkspaceId, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetWorkspaceId() string { return v.WorkspaceId }

// GetChannels returns ChannelActionWebhookAction.Channels, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetChannels() []ChannelActionChannelsChannel { return v.Channels }

// GetRateLimit returns ChannelActionWebhookAction.RateLimit, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetRateLimit() types.DurationScalar { return v.RateLimit }

// GetTypename returns ChannelActionWebhookAction.Typename, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetTypename() *string { return v.Typename }

// GetUrlTemplate returns ChannelActionWebhookAction.UrlTemplate, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetUrlTemplate() string { return v.UrlTemplate }

// GetBodyTemplate returns ChannelActionWebhookAction.BodyTemplate, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetBodyTemplate() string { return v.BodyTemplate }

// GetMethod returns ChannelActionWebhookAction.Method, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetMethod() string { return v.Method }

// GetHeaders returns ChannelActionWebhookAction.Headers, and is useful for accessing the field via an interface.
func (v *ChannelActionWebhookAction) GetHeaders() []ChannelActionHeadersWebhookHeader {
	return v.Headers
}

type ChannelInput struct {
	Name        *string `json:"name"`
	IconUrl     *string `json:"iconUrl"`
	Description *string `json:"description"`
}

// GetName returns ChannelInput.Name, and is useful for accessing the field via an interface.
func (v *ChannelInput) GetName() *string { return v.Name }

// GetIconUrl returns ChannelInput.IconUrl, and is useful for accessing the field via an interface.
func (v *ChannelInput) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns ChannelInput.Description, and is useful for accessing the field via an interface.
func (v *ChannelInput) GetDescription() *string { return v.Description }

// ChannelMonitorsMonitor includes the requested fields of the GraphQL type Monitor.
type ChannelMonitorsMonitor struct {
	Id string `json:"id"`
}

// GetId returns ChannelMonitorsMonitor.Id, and is useful for accessing the field via an interface.
func (v *ChannelMonitorsMonitor) GetId() string { return v.Id }

// CloudInfo includes the GraphQL fields of CloudInfo requested by the fragment CloudInfo.
// The GraphQL type's documentation follows.
//
// Information on underlying cloud provider
type CloudInfo struct {
	AccountId string `json:"accountId"`
	Region    string `json:"region"`
	Provider  string `json:"provider"`
}

// GetAccountId returns CloudInfo.AccountId, and is useful for accessing the field via an interface.
func (v *CloudInfo) GetAccountId() string { return v.AccountId }

// GetRegion returns CloudInfo.Region, and is useful for accessing the field via an interface.
func (v *CloudInfo) GetRegion() string { return v.Region }

// GetProvider returns CloudInfo.Provider, and is useful for accessing the field via an interface.
func (v *CloudInfo) GetProvider() string { return v.Provider }

type ColumnAndValueInput struct {
	Name  string  `json:"name"`
	Value *string `json:"value"`
}

// GetName returns ColumnAndValueInput.Name, and is useful for accessing the field via an interface.
func (v *ColumnAndValueInput) GetName() string { return v.Name }

// GetValue returns ColumnAndValueInput.Value, and is useful for accessing the field via an interface.
func (v *ColumnAndValueInput) GetValue() *string { return v.Value }

type ColumnOrderInput struct {
	ColumnName string `json:"columnName"`
	// default is descending, which is great for timestamps
	Ascending    *bool         `json:"ascending"`
	NullOrdering *NullOrdering `json:"nullOrdering"`
}

// GetColumnName returns ColumnOrderInput.ColumnName, and is useful for accessing the field via an interface.
func (v *ColumnOrderInput) GetColumnName() string { return v.ColumnName }

// GetAscending returns ColumnOrderInput.Ascending, and is useful for accessing the field via an interface.
func (v *ColumnOrderInput) GetAscending() *bool { return v.Ascending }

// GetNullOrdering returns ColumnOrderInput.NullOrdering, and is useful for accessing the field via an interface.
func (v *ColumnOrderInput) GetNullOrdering() *NullOrdering { return v.NullOrdering }

type ColumnStatsInput struct {
	// Something which is a string, or which is inferred to be an ID, will
	// return a list of the top K values + counts
	TopKCount *types.Int64Scalar `json:"topKCount"`
	// Whether to generate compound TopK for link columns. Note that this will
	// disable the normal TopK results for link columns.
	UseCompoundTopKForLinks *bool `json:"useCompoundTopKForLinks"`
	// Maximum number of histograms to return.
	//
	// Integer, float, duration columns return histograms.
	//
	// Set to 0 to disable histograms.
	// Set to <0 for an unlimited number of histograms.
	// Set to null to let the backend decide a suitable limit.
	MaxNbHistograms *types.Int64Scalar `json:"maxNbHistograms"`
	// Number of buckets per histogram.
	//
	// Set to 0 to disable histograms.
	// Set to null to let the backend decide.
	HistogramBucketCount *types.Int64Scalar `json:"histogramBucketCount"`
	// Whether to compute distinct value count per column. This applies to string
	// column or column inferred to be an ID. null or false would disable it.
	NeedDistinctCount *bool `json:"needDistinctCount"`
}

// GetTopKCount returns ColumnStatsInput.TopKCount, and is useful for accessing the field via an interface.
func (v *ColumnStatsInput) GetTopKCount() *types.Int64Scalar { return v.TopKCount }

// GetUseCompoundTopKForLinks returns ColumnStatsInput.UseCompoundTopKForLinks, and is useful for accessing the field via an interface.
func (v *ColumnStatsInput) GetUseCompoundTopKForLinks() *bool { return v.UseCompoundTopKForLinks }

// GetMaxNbHistograms returns ColumnStatsInput.MaxNbHistograms, and is useful for accessing the field via an interface.
func (v *ColumnStatsInput) GetMaxNbHistograms() *types.Int64Scalar { return v.MaxNbHistograms }

// GetHistogramBucketCount returns ColumnStatsInput.HistogramBucketCount, and is useful for accessing the field via an interface.
func (v *ColumnStatsInput) GetHistogramBucketCount() *types.Int64Scalar {
	return v.HistogramBucketCount
}

// GetNeedDistinctCount returns ColumnStatsInput.NeedDistinctCount, and is useful for accessing the field via an interface.
func (v *ColumnStatsInput) GetNeedDistinctCount() *bool { return v.NeedDistinctCount }

type CompareFunction string

const (
	CompareFunctionEqual          CompareFunction = "Equal"
	CompareFunctionNotequal       CompareFunction = "NotEqual"
	CompareFunctionGreater        CompareFunction = "Greater"
	CompareFunctionGreaterorequal CompareFunction = "GreaterOrEqual"
	CompareFunctionLess           CompareFunction = "Less"
	CompareFunctionLessorequal    CompareFunction = "LessOrEqual"
	CompareFunctionIsnull         CompareFunction = "IsNull"
	CompareFunctionIsnotnull      CompareFunction = "IsNotNull"
)

type CursorCacheMode string

const (
	CursorCacheModeAlwayscache     CursorCacheMode = "AlwaysCache"
	CursorCacheModeAlwaysdontcache CursorCacheMode = "AlwaysDontCache"
	// This mode will cache the cursor if not all data is returned by the initial
	// query. Specifically, cursor will be cached if any of the following
	// conditions is true:
	// 1) initialRows != -1 && the query returns more rows than requested
	// 2) initialRows == -1 && the query returns rollup results and the rollup
	// filter is not in "all" mode.
	CursorCacheModeCacheifmoredata CursorCacheMode = "CacheIfMoreData"
)

// Dashboard includes the GraphQL fields of Dashboard requested by the fragment Dashboard.
type Dashboard struct {
	Id              string                                     `json:"id"`
	Name            string                                     `json:"name"`
	IconUrl         *string                                    `json:"iconUrl"`
	WorkspaceId     string                                     `json:"workspaceId"`
	ManagedById     *string                                    `json:"managedById"`
	FolderId        string                                     `json:"folderId"`
	Layout          *types.JsonObject                          `json:"layout"`
	Stages          []DashboardStagesStageQuery                `json:"stages"`
	Parameters      []DashboardParametersParameterSpec         `json:"parameters"`
	ParameterValues []DashboardParameterValuesParameterBinding `json:"parameterValues"`
}

// GetId returns Dashboard.Id, and is useful for accessing the field via an interface.
func (v *Dashboard) GetId() string { return v.Id }

// GetName returns Dashboard.Name, and is useful for accessing the field via an interface.
func (v *Dashboard) GetName() string { return v.Name }

// GetIconUrl returns Dashboard.IconUrl, and is useful for accessing the field via an interface.
func (v *Dashboard) GetIconUrl() *string { return v.IconUrl }

// GetWorkspaceId returns Dashboard.WorkspaceId, and is useful for accessing the field via an interface.
func (v *Dashboard) GetWorkspaceId() string { return v.WorkspaceId }

// GetManagedById returns Dashboard.ManagedById, and is useful for accessing the field via an interface.
func (v *Dashboard) GetManagedById() *string { return v.ManagedById }

// GetFolderId returns Dashboard.FolderId, and is useful for accessing the field via an interface.
func (v *Dashboard) GetFolderId() string { return v.FolderId }

// GetLayout returns Dashboard.Layout, and is useful for accessing the field via an interface.
func (v *Dashboard) GetLayout() *types.JsonObject { return v.Layout }

// GetStages returns Dashboard.Stages, and is useful for accessing the field via an interface.
func (v *Dashboard) GetStages() []DashboardStagesStageQuery { return v.Stages }

// GetParameters returns Dashboard.Parameters, and is useful for accessing the field via an interface.
func (v *Dashboard) GetParameters() []DashboardParametersParameterSpec { return v.Parameters }

// GetParameterValues returns Dashboard.ParameterValues, and is useful for accessing the field via an interface.
func (v *Dashboard) GetParameterValues() []DashboardParameterValuesParameterBinding {
	return v.ParameterValues
}

type DashboardInput struct {
	// if id is not specified, a new dashboard is created
	Id              *string                 `json:"id"`
	Name            *string                 `json:"name"`
	Description     *string                 `json:"description"`
	IconUrl         *string                 `json:"iconUrl"`
	WorkspaceId     *string                 `json:"workspaceId"`
	ManagedById     *string                 `json:"managedById"`
	FolderId        *string                 `json:"folderId"`
	Layout          *types.JsonObject       `json:"layout"`
	Stages          []StageQueryInput       `json:"stages"`
	Parameters      []ParameterSpecInput    `json:"parameters"`
	ParameterValues []ParameterBindingInput `json:"parameterValues"`
	Links           []DashboardLinkInput    `json:"links"`
}

// GetId returns DashboardInput.Id, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetId() *string { return v.Id }

// GetName returns DashboardInput.Name, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetName() *string { return v.Name }

// GetDescription returns DashboardInput.Description, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetDescription() *string { return v.Description }

// GetIconUrl returns DashboardInput.IconUrl, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetIconUrl() *string { return v.IconUrl }

// GetWorkspaceId returns DashboardInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetWorkspaceId() *string { return v.WorkspaceId }

// GetManagedById returns DashboardInput.ManagedById, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetManagedById() *string { return v.ManagedById }

// GetFolderId returns DashboardInput.FolderId, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetFolderId() *string { return v.FolderId }

// GetLayout returns DashboardInput.Layout, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetLayout() *types.JsonObject { return v.Layout }

// GetStages returns DashboardInput.Stages, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetStages() []StageQueryInput { return v.Stages }

// GetParameters returns DashboardInput.Parameters, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetParameters() []ParameterSpecInput { return v.Parameters }

// GetParameterValues returns DashboardInput.ParameterValues, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetParameterValues() []ParameterBindingInput { return v.ParameterValues }

// GetLinks returns DashboardInput.Links, and is useful for accessing the field via an interface.
func (v *DashboardInput) GetLinks() []DashboardLinkInput { return v.Links }

// DashboardLink includes the GraphQL fields of DashboardLink requested by the fragment DashboardLink.
type DashboardLink struct {
	Id            string  `json:"id"`
	Name          string  `json:"name"`
	WorkspaceId   string  `json:"workspaceId"`
	FolderId      string  `json:"folderId"`
	ManagedById   *string `json:"managedById"`
	Description   string  `json:"description"`
	FromDashboard string  `json:"fromDashboard"`
	ToDashboard   string  `json:"toDashboard"`
	FromCard      *string `json:"fromCard"`
	// The label is presented in the UI. We need this separate from 'name' because 'name'
	// is a WorkspaceObject specific field, that must be globally unique within the workspace,
	// and we can't say that all links should display unique labels in the UI. (An alternative
	// is to just display the name of the target dashboard -- implementors choice.)
	LinkLabel string `json:"linkLabel"`
}

// GetId returns DashboardLink.Id, and is useful for accessing the field via an interface.
func (v *DashboardLink) GetId() string { return v.Id }

// GetName returns DashboardLink.Name, and is useful for accessing the field via an interface.
func (v *DashboardLink) GetName() string { return v.Name }

// GetWorkspaceId returns DashboardLink.WorkspaceId, and is useful for accessing the field via an interface.
func (v *DashboardLink) GetWorkspaceId() string { return v.WorkspaceId }

// GetFolderId returns DashboardLink.FolderId, and is useful for accessing the field via an interface.
func (v *DashboardLink) GetFolderId() string { return v.FolderId }

// GetManagedById returns DashboardLink.ManagedById, and is useful for accessing the field via an interface.
func (v *DashboardLink) GetManagedById() *string { return v.ManagedById }

// GetDescription returns DashboardLink.Description, and is useful for accessing the field via an interface.
func (v *DashboardLink) GetDescription() string { return v.Description }

// GetFromDashboard returns DashboardLink.FromDashboard, and is useful for accessing the field via an interface.
func (v *DashboardLink) GetFromDashboard() string { return v.FromDashboard }

// GetToDashboard returns DashboardLink.ToDashboard, and is useful for accessing the field via an interface.
func (v *DashboardLink) GetToDashboard() string { return v.ToDashboard }

// GetFromCard returns DashboardLink.FromCard, and is useful for accessing the field via an interface.
func (v *DashboardLink) GetFromCard() *string { return v.FromCard }

// GetLinkLabel returns DashboardLink.LinkLabel, and is useful for accessing the field via an interface.
func (v *DashboardLink) GetLinkLabel() string { return v.LinkLabel }

type DashboardLinkInput struct {
	// If name is empty on create, a unique name will be generated. If name is empty
	// on update, the name won't be changed.
	Name        *string `json:"name"`
	Description *string `json:"description"`
	IconUrl     *string `json:"iconUrl"`
	WorkspaceId string  `json:"workspaceId"`
	ManagedById *string `json:"managedById"`
	// If folder is empty on create, it will be put in the default folder. If folder
	// is empty on update, the existing folder won't be changed.
	FolderId        *string `json:"folderId"`
	FromDashboardId string  `json:"fromDashboardId"`
	ToDashboardId   string  `json:"toDashboardId"`
	// When fromCard is null, it clears the property.
	FromCard *string `json:"fromCard"`
	// linkLabel is the display text of the link label. This is neded because the
	// 'name' is more like a textual ID and needs to be unique.
	LinkLabel string `json:"linkLabel"`
}

// GetName returns DashboardLinkInput.Name, and is useful for accessing the field via an interface.
func (v *DashboardLinkInput) GetName() *string { return v.Name }

// GetDescription returns DashboardLinkInput.Description, and is useful for accessing the field via an interface.
func (v *DashboardLinkInput) GetDescription() *string { return v.Description }

// GetIconUrl returns DashboardLinkInput.IconUrl, and is useful for accessing the field via an interface.
func (v *DashboardLinkInput) GetIconUrl() *string { return v.IconUrl }

// GetWorkspaceId returns DashboardLinkInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *DashboardLinkInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetManagedById returns DashboardLinkInput.ManagedById, and is useful for accessing the field via an interface.
func (v *DashboardLinkInput) GetManagedById() *string { return v.ManagedById }

// GetFolderId returns DashboardLinkInput.FolderId, and is useful for accessing the field via an interface.
func (v *DashboardLinkInput) GetFolderId() *string { return v.FolderId }

// GetFromDashboardId returns DashboardLinkInput.FromDashboardId, and is useful for accessing the field via an interface.
func (v *DashboardLinkInput) GetFromDashboardId() string { return v.FromDashboardId }

// GetToDashboardId returns DashboardLinkInput.ToDashboardId, and is useful for accessing the field via an interface.
func (v *DashboardLinkInput) GetToDashboardId() string { return v.ToDashboardId }

// GetFromCard returns DashboardLinkInput.FromCard, and is useful for accessing the field via an interface.
func (v *DashboardLinkInput) GetFromCard() *string { return v.FromCard }

// GetLinkLabel returns DashboardLinkInput.LinkLabel, and is useful for accessing the field via an interface.
func (v *DashboardLinkInput) GetLinkLabel() string { return v.LinkLabel }

// DashboardParameterValuesParameterBinding includes the requested fields of the GraphQL type ParameterBinding.
type DashboardParameterValuesParameterBinding struct {
	Id    string      `json:"id"`
	Value types.Value `json:"value"`
}

// GetId returns DashboardParameterValuesParameterBinding.Id, and is useful for accessing the field via an interface.
func (v *DashboardParameterValuesParameterBinding) GetId() string { return v.Id }

// GetValue returns DashboardParameterValuesParameterBinding.Value, and is useful for accessing the field via an interface.
func (v *DashboardParameterValuesParameterBinding) GetValue() types.Value { return v.Value }

// DashboardParametersParameterSpec includes the requested fields of the GraphQL type ParameterSpec.
type DashboardParametersParameterSpec struct {
	Id   string `json:"id"`
	Name string `json:"name"`
	// optional default value
	DefaultValue *types.Value                                           `json:"defaultValue"`
	ValueKind    DashboardParametersParameterSpecValueKindValueTypeSpec `json:"valueKind"`
}

// GetId returns DashboardParametersParameterSpec.Id, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpec) GetId() string { return v.Id }

// GetName returns DashboardParametersParameterSpec.Name, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpec) GetName() string { return v.Name }

// GetDefaultValue returns DashboardParametersParameterSpec.DefaultValue, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpec) GetDefaultValue() *types.Value { return v.DefaultValue }

// GetValueKind returns DashboardParametersParameterSpec.ValueKind, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpec) GetValueKind() DashboardParametersParameterSpecValueKindValueTypeSpec {
	return v.ValueKind
}

// DashboardParametersParameterSpecValueKindValueTypeSpec includes the requested fields of the GraphQL type ValueTypeSpec.
type DashboardParametersParameterSpecValueKindValueTypeSpec struct {
	Type            ValueType                                                                         `json:"type"`
	KeyForDatasetId *string                                                                           `json:"keyForDatasetId"`
	ArrayItemType   *DashboardParametersParameterSpecValueKindValueTypeSpecArrayItemTypeValueTypeSpec `json:"arrayItemType"`
}

// GetType returns DashboardParametersParameterSpecValueKindValueTypeSpec.Type, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpecValueKindValueTypeSpec) GetType() ValueType { return v.Type }

// GetKeyForDatasetId returns DashboardParametersParameterSpecValueKindValueTypeSpec.KeyForDatasetId, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpecValueKindValueTypeSpec) GetKeyForDatasetId() *string {
	return v.KeyForDatasetId
}

// GetArrayItemType returns DashboardParametersParameterSpecValueKindValueTypeSpec.ArrayItemType, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpecValueKindValueTypeSpec) GetArrayItemType() *DashboardParametersParameterSpecValueKindValueTypeSpecArrayItemTypeValueTypeSpec {
	return v.ArrayItemType
}

// DashboardParametersParameterSpecValueKindValueTypeSpecArrayItemTypeValueTypeSpec includes the requested fields of the GraphQL type ValueTypeSpec.
type DashboardParametersParameterSpecValueKindValueTypeSpecArrayItemTypeValueTypeSpec struct {
	Type            ValueType `json:"type"`
	KeyForDatasetId *string   `json:"keyForDatasetId"`
}

// GetType returns DashboardParametersParameterSpecValueKindValueTypeSpecArrayItemTypeValueTypeSpec.Type, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpecValueKindValueTypeSpecArrayItemTypeValueTypeSpec) GetType() ValueType {
	return v.Type
}

// GetKeyForDatasetId returns DashboardParametersParameterSpecValueKindValueTypeSpecArrayItemTypeValueTypeSpec.KeyForDatasetId, and is useful for accessing the field via an interface.
func (v *DashboardParametersParameterSpecValueKindValueTypeSpecArrayItemTypeValueTypeSpec) GetKeyForDatasetId() *string {
	return v.KeyForDatasetId
}

// DashboardStagesStageQuery includes the requested fields of the GraphQL type StageQuery.
type DashboardStagesStageQuery struct {
	Id       *string                                         `json:"id"`
	Input    []DashboardStagesStageQueryInputInputDefinition `json:"input"`
	Params   *types.JsonObject                               `json:"params"`
	Layout   *types.JsonObject                               `json:"layout"`
	Pipeline string                                          `json:"pipeline"`
}

// GetId returns DashboardStagesStageQuery.Id, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQuery) GetId() *string { return v.Id }

// GetInput returns DashboardStagesStageQuery.Input, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQuery) GetInput() []DashboardStagesStageQueryInputInputDefinition {
	return v.Input
}

// GetParams returns DashboardStagesStageQuery.Params, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQuery) GetParams() *types.JsonObject { return v.Params }

// GetLayout returns DashboardStagesStageQuery.Layout, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQuery) GetLayout() *types.JsonObject { return v.Layout }

// GetPipeline returns DashboardStagesStageQuery.Pipeline, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQuery) GetPipeline() string { return v.Pipeline }

// DashboardStagesStageQueryInputInputDefinition includes the requested fields of the GraphQL type InputDefinition.
type DashboardStagesStageQueryInputInputDefinition struct {
	// Assign the short and unique user mnemonic for this input, used in @tableref expressions
	InputName string    `json:"inputName"`
	InputRole InputRole `json:"inputRole"`
	// One of the input definition fields is used; the others are null
	// because GO doesn't have unions.
	DatasetId   *string `json:"datasetId"`
	DatasetPath *string `json:"datasetPath"`
	// Only set stageId to reference input that comes from an actual stage in the same query
	StageId *string `json:"stageId"`
}

// GetInputName returns DashboardStagesStageQueryInputInputDefinition.InputName, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQueryInputInputDefinition) GetInputName() string { return v.InputName }

// GetInputRole returns DashboardStagesStageQueryInputInputDefinition.InputRole, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQueryInputInputDefinition) GetInputRole() InputRole { return v.InputRole }

// GetDatasetId returns DashboardStagesStageQueryInputInputDefinition.DatasetId, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQueryInputInputDefinition) GetDatasetId() *string { return v.DatasetId }

// GetDatasetPath returns DashboardStagesStageQueryInputInputDefinition.DatasetPath, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQueryInputInputDefinition) GetDatasetPath() *string {
	return v.DatasetPath
}

// GetStageId returns DashboardStagesStageQueryInputInputDefinition.StageId, and is useful for accessing the field via an interface.
func (v *DashboardStagesStageQueryInputInputDefinition) GetStageId() *string { return v.StageId }

// Dataset includes the GraphQL fields of Dataset requested by the fragment Dataset.
type Dataset struct {
	WorkspaceId          string             `json:"workspaceId"`
	Id                   string             `json:"id"`
	Name                 string             `json:"name"`
	FreshnessDesired     *types.Int64Scalar `json:"freshnessDesired"`
	Description          *string            `json:"description"`
	IconUrl              *string            `json:"iconUrl"`
	AccelerationDisabled bool               `json:"accelerationDisabled"`
	Version              types.TimeScalar   `json:"version"`
	UpdatedDate          types.TimeScalar   `json:"updatedDate"`
	PathCost             *types.Int64Scalar `json:"pathCost"`
	Source               *string            `json:"source"`
	ManagedById          *string            `json:"managedById"`
	// Optional custom configured override value of the on demand materialization
	// range for the dataset.
	OnDemandMaterializationLength *types.Int64Scalar                                   `json:"onDemandMaterializationLength"`
	DataTableViewState            *types.JsonObject                                    `json:"dataTableViewState"`
	ForeignKeys                   []DatasetForeignKeysForeignKey                       `json:"foreignKeys"`
	Transform                     *DatasetTransform                                    `json:"transform"`
	Typedef                       DatasetTypedef                                       `json:"typedef"`
	SourceTable                   *DatasetSourceTableSourceTableDefinition             `json:"sourceTable"`
	CorrelationTagMappings        []DatasetCorrelationTagMappingsCorrelationTagMapping `json:"correlationTagMappings"`
}

// GetWorkspaceId returns Dataset.WorkspaceId, and is useful for accessing the field via an interface.
func (v *Dataset) GetWorkspaceId() string { return v.WorkspaceId }

// GetId returns Dataset.Id, and is useful for accessing the field via an interface.
func (v *Dataset) GetId() string { return v.Id }

// GetName returns Dataset.Name, and is useful for accessing the field via an interface.
func (v *Dataset) GetName() string { return v.Name }

// GetFreshnessDesired returns Dataset.FreshnessDesired, and is useful for accessing the field via an interface.
func (v *Dataset) GetFreshnessDesired() *types.Int64Scalar { return v.FreshnessDesired }

// GetDescription returns Dataset.Description, and is useful for accessing the field via an interface.
func (v *Dataset) GetDescription() *string { return v.Description }

// GetIconUrl returns Dataset.IconUrl, and is useful for accessing the field via an interface.
func (v *Dataset) GetIconUrl() *string { return v.IconUrl }

// GetAccelerationDisabled returns Dataset.AccelerationDisabled, and is useful for accessing the field via an interface.
func (v *Dataset) GetAccelerationDisabled() bool { return v.AccelerationDisabled }

// GetVersion returns Dataset.Version, and is useful for accessing the field via an interface.
func (v *Dataset) GetVersion() types.TimeScalar { return v.Version }

// GetUpdatedDate returns Dataset.UpdatedDate, and is useful for accessing the field via an interface.
func (v *Dataset) GetUpdatedDate() types.TimeScalar { return v.UpdatedDate }

// GetPathCost returns Dataset.PathCost, and is useful for accessing the field via an interface.
func (v *Dataset) GetPathCost() *types.Int64Scalar { return v.PathCost }

// GetSource returns Dataset.Source, and is useful for accessing the field via an interface.
func (v *Dataset) GetSource() *string { return v.Source }

// GetManagedById returns Dataset.ManagedById, and is useful for accessing the field via an interface.
func (v *Dataset) GetManagedById() *string { return v.ManagedById }

// GetOnDemandMaterializationLength returns Dataset.OnDemandMaterializationLength, and is useful for accessing the field via an interface.
func (v *Dataset) GetOnDemandMaterializationLength() *types.Int64Scalar {
	return v.OnDemandMaterializationLength
}

// GetDataTableViewState returns Dataset.DataTableViewState, and is useful for accessing the field via an interface.
func (v *Dataset) GetDataTableViewState() *types.JsonObject { return v.DataTableViewState }

// GetForeignKeys returns Dataset.ForeignKeys, and is useful for accessing the field via an interface.
func (v *Dataset) GetForeignKeys() []DatasetForeignKeysForeignKey { return v.ForeignKeys }

// GetTransform returns Dataset.Transform, and is useful for accessing the field via an interface.
func (v *Dataset) GetTransform() *DatasetTransform { return v.Transform }

// GetTypedef returns Dataset.Typedef, and is useful for accessing the field via an interface.
func (v *Dataset) GetTypedef() DatasetTypedef { return v.Typedef }

// GetSourceTable returns Dataset.SourceTable, and is useful for accessing the field via an interface.
func (v *Dataset) GetSourceTable() *DatasetSourceTableSourceTableDefinition { return v.SourceTable }

// GetCorrelationTagMappings returns Dataset.CorrelationTagMappings, and is useful for accessing the field via an interface.
func (v *Dataset) GetCorrelationTagMappings() []DatasetCorrelationTagMappingsCorrelationTagMapping {
	return v.CorrelationTagMappings
}

// DatasetCorrelationTagMappingsCorrelationTagMapping includes the requested fields of the GraphQL type CorrelationTagMapping.
type DatasetCorrelationTagMappingsCorrelationTagMapping struct {
	Tag  string                                                          `json:"tag"`
	Path DatasetCorrelationTagMappingsCorrelationTagMappingPathLinkField `json:"path"`
}

// GetTag returns DatasetCorrelationTagMappingsCorrelationTagMapping.Tag, and is useful for accessing the field via an interface.
func (v *DatasetCorrelationTagMappingsCorrelationTagMapping) GetTag() string { return v.Tag }

// GetPath returns DatasetCorrelationTagMappingsCorrelationTagMapping.Path, and is useful for accessing the field via an interface.
func (v *DatasetCorrelationTagMappingsCorrelationTagMapping) GetPath() DatasetCorrelationTagMappingsCorrelationTagMappingPathLinkField {
	return v.Path
}

// DatasetCorrelationTagMappingsCorrelationTagMappingPathLinkField includes the requested fields of the GraphQL type LinkField.
type DatasetCorrelationTagMappingsCorrelationTagMappingPathLinkField struct {
	Column string  `json:"column"`
	Path   *string `json:"path"`
}

// GetColumn returns DatasetCorrelationTagMappingsCorrelationTagMappingPathLinkField.Column, and is useful for accessing the field via an interface.
func (v *DatasetCorrelationTagMappingsCorrelationTagMappingPathLinkField) GetColumn() string {
	return v.Column
}

// GetPath returns DatasetCorrelationTagMappingsCorrelationTagMappingPathLinkField.Path, and is useful for accessing the field via an interface.
func (v *DatasetCorrelationTagMappingsCorrelationTagMappingPathLinkField) GetPath() *string {
	return v.Path
}

type DatasetDefinitionInput struct {
	Dataset  DatasetInput                    `json:"dataset"`
	Schema   []DatasetFieldDefInput          `json:"schema"`
	Metadata *DatasetDefinitionMetadataInput `json:"metadata"`
}

// GetDataset returns DatasetDefinitionInput.Dataset, and is useful for accessing the field via an interface.
func (v *DatasetDefinitionInput) GetDataset() DatasetInput { return v.Dataset }

// GetSchema returns DatasetDefinitionInput.Schema, and is useful for accessing the field via an interface.
func (v *DatasetDefinitionInput) GetSchema() []DatasetFieldDefInput { return v.Schema }

// GetMetadata returns DatasetDefinitionInput.Metadata, and is useful for accessing the field via an interface.
func (v *DatasetDefinitionInput) GetMetadata() *DatasetDefinitionMetadataInput { return v.Metadata }

// All of the values of DatasetDefinitionMetadataInput are optional, but you
// can't, for example, reference a dataset from another dataset until you define
// its primary key, and it won't be an event dataset without having a
// validFromField.
type DatasetDefinitionMetadataInput struct {
	ValidFromField *string    `json:"validFromField"`
	ValidToField   *string    `json:"validToField"`
	LabelField     *string    `json:"labelField"`
	PrimaryKey     []string   `json:"primaryKey"`
	Keys           [][]string `json:"keys"`
}

// GetValidFromField returns DatasetDefinitionMetadataInput.ValidFromField, and is useful for accessing the field via an interface.
func (v *DatasetDefinitionMetadataInput) GetValidFromField() *string { return v.ValidFromField }

// GetValidToField returns DatasetDefinitionMetadataInput.ValidToField, and is useful for accessing the field via an interface.
func (v *DatasetDefinitionMetadataInput) GetValidToField() *string { return v.ValidToField }

// GetLabelField returns DatasetDefinitionMetadataInput.LabelField, and is useful for accessing the field via an interface.
func (v *DatasetDefinitionMetadataInput) GetLabelField() *string { return v.LabelField }

// GetPrimaryKey returns DatasetDefinitionMetadataInput.PrimaryKey, and is useful for accessing the field via an interface.
func (v *DatasetDefinitionMetadataInput) GetPrimaryKey() []string { return v.PrimaryKey }

// GetKeys returns DatasetDefinitionMetadataInput.Keys, and is useful for accessing the field via an interface.
func (v *DatasetDefinitionMetadataInput) GetKeys() [][]string { return v.Keys }

type DatasetFieldDefInput struct {
	Name         string                `json:"name"`
	Type         DatasetFieldTypeInput `json:"type"`
	IsEnum       *bool                 `json:"isEnum"`
	IsSearchable *bool                 `json:"isSearchable"`
	IsHidden     *bool                 `json:"isHidden"`
	IsConst      *bool                 `json:"isConst"`
	IsMetric     *bool                 `json:"isMetric"`
}

// GetName returns DatasetFieldDefInput.Name, and is useful for accessing the field via an interface.
func (v *DatasetFieldDefInput) GetName() string { return v.Name }

// GetType returns DatasetFieldDefInput.Type, and is useful for accessing the field via an interface.
func (v *DatasetFieldDefInput) GetType() DatasetFieldTypeInput { return v.Type }

// GetIsEnum returns DatasetFieldDefInput.IsEnum, and is useful for accessing the field via an interface.
func (v *DatasetFieldDefInput) GetIsEnum() *bool { return v.IsEnum }

// GetIsSearchable returns DatasetFieldDefInput.IsSearchable, and is useful for accessing the field via an interface.
func (v *DatasetFieldDefInput) GetIsSearchable() *bool { return v.IsSearchable }

// GetIsHidden returns DatasetFieldDefInput.IsHidden, and is useful for accessing the field via an interface.
func (v *DatasetFieldDefInput) GetIsHidden() *bool { return v.IsHidden }

// GetIsConst returns DatasetFieldDefInput.IsConst, and is useful for accessing the field via an interface.
func (v *DatasetFieldDefInput) GetIsConst() *bool { return v.IsConst }

// GetIsMetric returns DatasetFieldDefInput.IsMetric, and is useful for accessing the field via an interface.
func (v *DatasetFieldDefInput) GetIsMetric() *bool { return v.IsMetric }

type DatasetFieldTypeInput struct {
	Rep      string               `json:"rep"`
	Def      *DatasetTypedefInput `json:"def"`
	Nullable *bool                `json:"nullable,omitempty"`
}

// GetRep returns DatasetFieldTypeInput.Rep, and is useful for accessing the field via an interface.
func (v *DatasetFieldTypeInput) GetRep() string { return v.Rep }

// GetDef returns DatasetFieldTypeInput.Def, and is useful for accessing the field via an interface.
func (v *DatasetFieldTypeInput) GetDef() *DatasetTypedefInput { return v.Def }

// GetNullable returns DatasetFieldTypeInput.Nullable, and is useful for accessing the field via an interface.
func (v *DatasetFieldTypeInput) GetNullable() *bool { return v.Nullable }

// DatasetForeignKeysForeignKey includes the requested fields of the GraphQL type ForeignKey.
type DatasetForeignKeysForeignKey struct {
	Label         *string            `json:"label"`
	TargetDataset *types.Int64Scalar `json:"targetDataset"`
	SrcFields     []string           `json:"srcFields"`
	DstFields     []string           `json:"dstFields"`
}

// GetLabel returns DatasetForeignKeysForeignKey.Label, and is useful for accessing the field via an interface.
func (v *DatasetForeignKeysForeignKey) GetLabel() *string { return v.Label }

// GetTargetDataset returns DatasetForeignKeysForeignKey.TargetDataset, and is useful for accessing the field via an interface.
func (v *DatasetForeignKeysForeignKey) GetTargetDataset() *types.Int64Scalar { return v.TargetDataset }

// GetSrcFields returns DatasetForeignKeysForeignKey.SrcFields, and is useful for accessing the field via an interface.
func (v *DatasetForeignKeysForeignKey) GetSrcFields() []string { return v.SrcFields }

// GetDstFields returns DatasetForeignKeysForeignKey.DstFields, and is useful for accessing the field via an interface.
func (v *DatasetForeignKeysForeignKey) GetDstFields() []string { return v.DstFields }

// DatasetIdName includes the GraphQL fields of Dataset requested by the fragment DatasetIdName.
type DatasetIdName struct {
	Name string `json:"name"`
	Id   string `json:"id"`
}

// GetName returns DatasetIdName.Name, and is useful for accessing the field via an interface.
func (v *DatasetIdName) GetName() string { return v.Name }

// GetId returns DatasetIdName.Id, and is useful for accessing the field via an interface.
func (v *DatasetIdName) GetId() string { return v.Id }

type DatasetInput struct {
	// if id is not specified, a new dataset is created
	Id          *string `json:"id"`
	Label       string  `json:"label"`
	Description *string `json:"description"`
	// Format - source/comment. Examples - monitor/471142069, web/user created.
	Source *string `json:"source"`
	// Used only when id is specified - that is to say, only when the dataset is updated.
	OverwriteSource      *bool              `json:"overwriteSource"`
	Deleted              *bool              `json:"deleted,omitempty"`
	AccelerationDisabled *bool              `json:"accelerationDisabled,omitempty"`
	LatencyDesired       *types.Int64Scalar `json:"latencyDesired"`
	FreshnessDesired     *types.Int64Scalar `json:"freshnessDesired"`
	IconUrl              *string            `json:"iconUrl"`
	Layout               *types.JsonObject  `json:"layout"`
	PathCost             *types.Int64Scalar `json:"pathCost"`
	DataTableViewState   *types.JsonObject  `json:"dataTableViewState"`
	// Max on-demand materialization length for the dataset (in nanoseconds). If not set
	// will use the default value in transformer config.
	OnDemandMaterializationLength *types.Int64Scalar `json:"onDemandMaterializationLength"`
	// Optional id of the object this dataset is managed by: app, datastream, monitor etc.
	ManagedById *string `json:"managedById"`
}

// GetId returns DatasetInput.Id, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetId() *string { return v.Id }

// GetLabel returns DatasetInput.Label, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetLabel() string { return v.Label }

// GetDescription returns DatasetInput.Description, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetDescription() *string { return v.Description }

// GetSource returns DatasetInput.Source, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetSource() *string { return v.Source }

// GetOverwriteSource returns DatasetInput.OverwriteSource, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetOverwriteSource() *bool { return v.OverwriteSource }

// GetDeleted returns DatasetInput.Deleted, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetDeleted() *bool { return v.Deleted }

// GetAccelerationDisabled returns DatasetInput.AccelerationDisabled, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetAccelerationDisabled() *bool { return v.AccelerationDisabled }

// GetLatencyDesired returns DatasetInput.LatencyDesired, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetLatencyDesired() *types.Int64Scalar { return v.LatencyDesired }

// GetFreshnessDesired returns DatasetInput.FreshnessDesired, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetFreshnessDesired() *types.Int64Scalar { return v.FreshnessDesired }

// GetIconUrl returns DatasetInput.IconUrl, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetIconUrl() *string { return v.IconUrl }

// GetLayout returns DatasetInput.Layout, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetLayout() *types.JsonObject { return v.Layout }

// GetPathCost returns DatasetInput.PathCost, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetPathCost() *types.Int64Scalar { return v.PathCost }

// GetDataTableViewState returns DatasetInput.DataTableViewState, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetDataTableViewState() *types.JsonObject { return v.DataTableViewState }

// GetOnDemandMaterializationLength returns DatasetInput.OnDemandMaterializationLength, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetOnDemandMaterializationLength() *types.Int64Scalar {
	return v.OnDemandMaterializationLength
}

// GetManagedById returns DatasetInput.ManagedById, and is useful for accessing the field via an interface.
func (v *DatasetInput) GetManagedById() *string { return v.ManagedById }

type DatasetLinkSchemaInput struct {
	TargetDataset    *types.Int64Scalar `json:"targetDataset"`
	TargetStageLabel *string            `json:"targetStageLabel"`
	TargetLabelField *string            `json:"targetLabelField"`
	Label            string             `json:"label"`
	SrcFields        []string           `json:"srcFields"`
	DstFields        []string           `json:"dstFields"`
}

// GetTargetDataset returns DatasetLinkSchemaInput.TargetDataset, and is useful for accessing the field via an interface.
func (v *DatasetLinkSchemaInput) GetTargetDataset() *types.Int64Scalar { return v.TargetDataset }

// GetTargetStageLabel returns DatasetLinkSchemaInput.TargetStageLabel, and is useful for accessing the field via an interface.
func (v *DatasetLinkSchemaInput) GetTargetStageLabel() *string { return v.TargetStageLabel }

// GetTargetLabelField returns DatasetLinkSchemaInput.TargetLabelField, and is useful for accessing the field via an interface.
func (v *DatasetLinkSchemaInput) GetTargetLabelField() *string { return v.TargetLabelField }

// GetLabel returns DatasetLinkSchemaInput.Label, and is useful for accessing the field via an interface.
func (v *DatasetLinkSchemaInput) GetLabel() string { return v.Label }

// GetSrcFields returns DatasetLinkSchemaInput.SrcFields, and is useful for accessing the field via an interface.
func (v *DatasetLinkSchemaInput) GetSrcFields() []string { return v.SrcFields }

// GetDstFields returns DatasetLinkSchemaInput.DstFields, and is useful for accessing the field via an interface.
func (v *DatasetLinkSchemaInput) GetDstFields() []string { return v.DstFields }

// DatasetOutboundShare includes the GraphQL fields of DatasetOutboundShare requested by the fragment DatasetOutboundShare.
type DatasetOutboundShare struct {
	Id              string  `json:"id"`
	Name            string  `json:"name"`
	Description     *string `json:"description"`
	WorkspaceId     string  `json:"workspaceId"`
	FolderId        string  `json:"folderId"`
	DatasetID       string  `json:"datasetID"`
	OutboundShareID string  `json:"outboundShareID"`
	SchemaName      string  `json:"schemaName"`
	ViewName        string  `json:"viewName"`
	// The freshness goal for the outbound share, in nanoseconds. This determines the maximum staleness for the shared dataset. Newer data may not yet be accelerated (materialized) and will not be returned in Snowflake queries for the share. To avoid additional acceleration and minimize cost, set this to 1 hour (3600000000000), the maximum staleness of datasets when freshness decay is active.
	FreshnessGoal types.Int64Scalar          `json:"freshnessGoal"`
	Status        DatasetOutboundShareStatus `json:"status"`
}

// GetId returns DatasetOutboundShare.Id, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShare) GetId() string { return v.Id }

// GetName returns DatasetOutboundShare.Name, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShare) GetName() string { return v.Name }

// GetDescription returns DatasetOutboundShare.Description, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShare) GetDescription() *string { return v.Description }

// GetWorkspaceId returns DatasetOutboundShare.WorkspaceId, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShare) GetWorkspaceId() string { return v.WorkspaceId }

// GetFolderId returns DatasetOutboundShare.FolderId, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShare) GetFolderId() string { return v.FolderId }

// GetDatasetID returns DatasetOutboundShare.DatasetID, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShare) GetDatasetID() string { return v.DatasetID }

// GetOutboundShareID returns DatasetOutboundShare.OutboundShareID, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShare) GetOutboundShareID() string { return v.OutboundShareID }

// GetSchemaName returns DatasetOutboundShare.SchemaName, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShare) GetSchemaName() string { return v.SchemaName }

// GetViewName returns DatasetOutboundShare.ViewName, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShare) GetViewName() string { return v.ViewName }

// GetFreshnessGoal returns DatasetOutboundShare.FreshnessGoal, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShare) GetFreshnessGoal() types.Int64Scalar { return v.FreshnessGoal }

// GetStatus returns DatasetOutboundShare.Status, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShare) GetStatus() DatasetOutboundShareStatus { return v.Status }

type DatasetOutboundShareInput struct {
	SchemaName    string            `json:"schemaName"`
	ViewName      string            `json:"viewName"`
	FreshnessGoal types.Int64Scalar `json:"freshnessGoal"`
	Name          string            `json:"name"`
	IconUrl       *string           `json:"iconUrl"`
	Description   *string           `json:"description"`
	ManagedById   *string           `json:"managedById"`
	FolderId      *string           `json:"folderId"`
}

// GetSchemaName returns DatasetOutboundShareInput.SchemaName, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShareInput) GetSchemaName() string { return v.SchemaName }

// GetViewName returns DatasetOutboundShareInput.ViewName, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShareInput) GetViewName() string { return v.ViewName }

// GetFreshnessGoal returns DatasetOutboundShareInput.FreshnessGoal, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShareInput) GetFreshnessGoal() types.Int64Scalar { return v.FreshnessGoal }

// GetName returns DatasetOutboundShareInput.Name, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShareInput) GetName() string { return v.Name }

// GetIconUrl returns DatasetOutboundShareInput.IconUrl, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShareInput) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns DatasetOutboundShareInput.Description, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShareInput) GetDescription() *string { return v.Description }

// GetManagedById returns DatasetOutboundShareInput.ManagedById, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShareInput) GetManagedById() *string { return v.ManagedById }

// GetFolderId returns DatasetOutboundShareInput.FolderId, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShareInput) GetFolderId() *string { return v.FolderId }

type DatasetOutboundShareState string

const (
	DatasetOutboundShareStateError       DatasetOutboundShareState = "Error"
	DatasetOutboundShareStateLive        DatasetOutboundShareState = "Live"
	DatasetOutboundShareStatePending     DatasetOutboundShareState = "Pending"
	DatasetOutboundShareStateUnavailable DatasetOutboundShareState = "Unavailable"
)

// DatasetOutboundShareStatus includes the requested fields of the GraphQL type DatasetOutboundShareStatus.
type DatasetOutboundShareStatus struct {
	State DatasetOutboundShareState `json:"state"`
	Error *string                   `json:"error"`
}

// GetState returns DatasetOutboundShareStatus.State, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShareStatus) GetState() DatasetOutboundShareState { return v.State }

// GetError returns DatasetOutboundShareStatus.Error, and is useful for accessing the field via an interface.
func (v *DatasetOutboundShareStatus) GetError() *string { return v.Error }

// DatasetSourceTableSourceTableDefinition includes the requested fields of the GraphQL type SourceTableDefinition.
type DatasetSourceTableSourceTableDefinition struct {
	Schema                string                                                                            `json:"schema"`
	Partitions            []DatasetSourceTableSourceTableDefinitionPartitionsSourceTablePartitionDefinition `json:"partitions"`
	SourceUpdateTableName *string                                                                           `json:"sourceUpdateTableName"`
	IsInsertOnly          *bool                                                                             `json:"isInsertOnly"`
	BatchSeqField         *string                                                                           `json:"batchSeqField"`
	ValidFromField        *string                                                                           `json:"validFromField"`
	Fields                []DatasetSourceTableSourceTableDefinitionFieldsSourceTableFieldDefinition         `json:"fields"`
}

// GetSchema returns DatasetSourceTableSourceTableDefinition.Schema, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinition) GetSchema() string { return v.Schema }

// GetPartitions returns DatasetSourceTableSourceTableDefinition.Partitions, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinition) GetPartitions() []DatasetSourceTableSourceTableDefinitionPartitionsSourceTablePartitionDefinition {
	return v.Partitions
}

// GetSourceUpdateTableName returns DatasetSourceTableSourceTableDefinition.SourceUpdateTableName, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinition) GetSourceUpdateTableName() *string {
	return v.SourceUpdateTableName
}

// GetIsInsertOnly returns DatasetSourceTableSourceTableDefinition.IsInsertOnly, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinition) GetIsInsertOnly() *bool { return v.IsInsertOnly }

// GetBatchSeqField returns DatasetSourceTableSourceTableDefinition.BatchSeqField, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinition) GetBatchSeqField() *string { return v.BatchSeqField }

// GetValidFromField returns DatasetSourceTableSourceTableDefinition.ValidFromField, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinition) GetValidFromField() *string {
	return v.ValidFromField
}

// GetFields returns DatasetSourceTableSourceTableDefinition.Fields, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinition) GetFields() []DatasetSourceTableSourceTableDefinitionFieldsSourceTableFieldDefinition {
	return v.Fields
}

// DatasetSourceTableSourceTableDefinitionFieldsSourceTableFieldDefinition includes the requested fields of the GraphQL type SourceTableFieldDefinition.
type DatasetSourceTableSourceTableDefinitionFieldsSourceTableFieldDefinition struct {
	Name    string `json:"name"`
	SqlType string `json:"sqlType"`
}

// GetName returns DatasetSourceTableSourceTableDefinitionFieldsSourceTableFieldDefinition.Name, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinitionFieldsSourceTableFieldDefinition) GetName() string {
	return v.Name
}

// GetSqlType returns DatasetSourceTableSourceTableDefinitionFieldsSourceTableFieldDefinition.SqlType, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinitionFieldsSourceTableFieldDefinition) GetSqlType() string {
	return v.SqlType
}

// DatasetSourceTableSourceTableDefinitionPartitionsSourceTablePartitionDefinition includes the requested fields of the GraphQL type SourceTablePartitionDefinition.
type DatasetSourceTableSourceTableDefinitionPartitionsSourceTablePartitionDefinition struct {
	Name string `json:"name"`
}

// GetName returns DatasetSourceTableSourceTableDefinitionPartitionsSourceTablePartitionDefinition.Name, and is useful for accessing the field via an interface.
func (v *DatasetSourceTableSourceTableDefinitionPartitionsSourceTablePartitionDefinition) GetName() string {
	return v.Name
}

// DatasetTransform includes the requested fields of the GraphQL type Transform.
type DatasetTransform struct {
	Current *DatasetTransformCurrentTransformVersion `json:"current"`
}

// GetCurrent returns DatasetTransform.Current, and is useful for accessing the field via an interface.
func (v *DatasetTransform) GetCurrent() *DatasetTransformCurrentTransformVersion { return v.Current }

// DatasetTransformCurrentTransformVersion includes the requested fields of the GraphQL type TransformVersion.
type DatasetTransformCurrentTransformVersion struct {
	Query DatasetTransformCurrentTransformVersionQueryMultiStageQuery `json:"query"`
}

// GetQuery returns DatasetTransformCurrentTransformVersion.Query, and is useful for accessing the field via an interface.
func (v *DatasetTransformCurrentTransformVersion) GetQuery() DatasetTransformCurrentTransformVersionQueryMultiStageQuery {
	return v.Query
}

// DatasetTransformCurrentTransformVersionQueryMultiStageQuery includes the requested fields of the GraphQL type MultiStageQuery.
type DatasetTransformCurrentTransformVersionQueryMultiStageQuery struct {
	OutputStage string       `json:"outputStage"`
	Stages      []StageQuery `json:"stages"`
}

// GetOutputStage returns DatasetTransformCurrentTransformVersionQueryMultiStageQuery.OutputStage, and is useful for accessing the field via an interface.
func (v *DatasetTransformCurrentTransformVersionQueryMultiStageQuery) GetOutputStage() string {
	return v.OutputStage
}

// GetStages returns DatasetTransformCurrentTransformVersionQueryMultiStageQuery.Stages, and is useful for accessing the field via an interface.
func (v *DatasetTransformCurrentTransformVersionQueryMultiStageQuery) GetStages() []StageQuery {
	return v.Stages
}

// DatasetTypedef includes the requested fields of the GraphQL type Typedef.
type DatasetTypedef struct {
	Label string                          `json:"label"`
	Def   *DatasetTypedefDefObjectTypedef `json:"def"`
}

// GetLabel returns DatasetTypedef.Label, and is useful for accessing the field via an interface.
func (v *DatasetTypedef) GetLabel() string { return v.Label }

// GetDef returns DatasetTypedef.Def, and is useful for accessing the field via an interface.
func (v *DatasetTypedef) GetDef() *DatasetTypedefDefObjectTypedef { return v.Def }

// DatasetTypedefDefObjectTypedef includes the requested fields of the GraphQL type ObjectTypedef.
type DatasetTypedefDefObjectTypedef struct {
	Anykey *bool                                                `json:"anykey"`
	Fields []DatasetTypedefDefObjectTypedefFieldsObjectFieldDef `json:"fields"`
}

// GetAnykey returns DatasetTypedefDefObjectTypedef.Anykey, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedef) GetAnykey() *bool { return v.Anykey }

// GetFields returns DatasetTypedefDefObjectTypedef.Fields, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedef) GetFields() []DatasetTypedefDefObjectTypedefFieldsObjectFieldDef {
	return v.Fields
}

// DatasetTypedefDefObjectTypedefFieldsObjectFieldDef includes the requested fields of the GraphQL type ObjectFieldDef.
type DatasetTypedefDefObjectTypedefFieldsObjectFieldDef struct {
	Name         string                                                                `json:"name"`
	Type         DatasetTypedefDefObjectTypedefFieldsObjectFieldDefTypeObjectFieldType `json:"type"`
	IsEnum       *bool                                                                 `json:"isEnum"`
	IsSearchable *bool                                                                 `json:"isSearchable"`
	IsHidden     *bool                                                                 `json:"isHidden"`
	IsConst      *bool                                                                 `json:"isConst"`
	IsMetric     *bool                                                                 `json:"isMetric"`
}

// GetName returns DatasetTypedefDefObjectTypedefFieldsObjectFieldDef.Name, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedefFieldsObjectFieldDef) GetName() string { return v.Name }

// GetType returns DatasetTypedefDefObjectTypedefFieldsObjectFieldDef.Type, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedefFieldsObjectFieldDef) GetType() DatasetTypedefDefObjectTypedefFieldsObjectFieldDefTypeObjectFieldType {
	return v.Type
}

// GetIsEnum returns DatasetTypedefDefObjectTypedefFieldsObjectFieldDef.IsEnum, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedefFieldsObjectFieldDef) GetIsEnum() *bool { return v.IsEnum }

// GetIsSearchable returns DatasetTypedefDefObjectTypedefFieldsObjectFieldDef.IsSearchable, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedefFieldsObjectFieldDef) GetIsSearchable() *bool {
	return v.IsSearchable
}

// GetIsHidden returns DatasetTypedefDefObjectTypedefFieldsObjectFieldDef.IsHidden, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedefFieldsObjectFieldDef) GetIsHidden() *bool { return v.IsHidden }

// GetIsConst returns DatasetTypedefDefObjectTypedefFieldsObjectFieldDef.IsConst, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedefFieldsObjectFieldDef) GetIsConst() *bool { return v.IsConst }

// GetIsMetric returns DatasetTypedefDefObjectTypedefFieldsObjectFieldDef.IsMetric, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedefFieldsObjectFieldDef) GetIsMetric() *bool { return v.IsMetric }

// DatasetTypedefDefObjectTypedefFieldsObjectFieldDefTypeObjectFieldType includes the requested fields of the GraphQL type ObjectFieldType.
type DatasetTypedefDefObjectTypedefFieldsObjectFieldDefTypeObjectFieldType struct {
	Rep      string `json:"rep"`
	Nullable *bool  `json:"nullable"`
}

// GetRep returns DatasetTypedefDefObjectTypedefFieldsObjectFieldDefTypeObjectFieldType.Rep, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedefFieldsObjectFieldDefTypeObjectFieldType) GetRep() string {
	return v.Rep
}

// GetNullable returns DatasetTypedefDefObjectTypedefFieldsObjectFieldDefTypeObjectFieldType.Nullable, and is useful for accessing the field via an interface.
func (v *DatasetTypedefDefObjectTypedefFieldsObjectFieldDefTypeObjectFieldType) GetNullable() *bool {
	return v.Nullable
}

type DatasetTypedefInput struct {
	Anykey   *bool                   `json:"anykey"`
	Fields   []DatasetFieldDefInput  `json:"fields"`
	LinkDesc *DatasetLinkSchemaInput `json:"linkDesc"`
}

// GetAnykey returns DatasetTypedefInput.Anykey, and is useful for accessing the field via an interface.
func (v *DatasetTypedefInput) GetAnykey() *bool { return v.Anykey }

// GetFields returns DatasetTypedefInput.Fields, and is useful for accessing the field via an interface.
func (v *DatasetTypedefInput) GetFields() []DatasetFieldDefInput { return v.Fields }

// GetLinkDesc returns DatasetTypedefInput.LinkDesc, and is useful for accessing the field via an interface.
func (v *DatasetTypedefInput) GetLinkDesc() *DatasetLinkSchemaInput { return v.LinkDesc }

// Datastream includes the GraphQL fields of Datastream requested by the fragment Datastream.
type Datastream struct {
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	IconUrl     *string `json:"iconUrl"`
	Description *string `json:"description"`
	WorkspaceId string  `json:"workspaceId"`
	DatasetId   string  `json:"datasetId"`
}

// GetId returns Datastream.Id, and is useful for accessing the field via an interface.
func (v *Datastream) GetId() string { return v.Id }

// GetName returns Datastream.Name, and is useful for accessing the field via an interface.
func (v *Datastream) GetName() string { return v.Name }

// GetIconUrl returns Datastream.IconUrl, and is useful for accessing the field via an interface.
func (v *Datastream) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns Datastream.Description, and is useful for accessing the field via an interface.
func (v *Datastream) GetDescription() *string { return v.Description }

// GetWorkspaceId returns Datastream.WorkspaceId, and is useful for accessing the field via an interface.
func (v *Datastream) GetWorkspaceId() string { return v.WorkspaceId }

// GetDatasetId returns Datastream.DatasetId, and is useful for accessing the field via an interface.
func (v *Datastream) GetDatasetId() string { return v.DatasetId }

type DatastreamInput struct {
	Name             string                     `json:"name"`
	Description      *string                    `json:"description"`
	IconUrl          *string                    `json:"iconUrl"`
	Disabled         *bool                      `json:"disabled"`
	ExternalSourceId *string                    `json:"externalSourceId"`
	PrometheusInput  *DatastreamPrometheusInput `json:"prometheusInput"`
	OtelLogsInput    *DatastreamOtelLogsInput   `json:"otelLogsInput"`
	K8sEntityInput   *DatastreamK8sEntityInput  `json:"k8sEntityInput"`
}

// GetName returns DatastreamInput.Name, and is useful for accessing the field via an interface.
func (v *DatastreamInput) GetName() string { return v.Name }

// GetDescription returns DatastreamInput.Description, and is useful for accessing the field via an interface.
func (v *DatastreamInput) GetDescription() *string { return v.Description }

// GetIconUrl returns DatastreamInput.IconUrl, and is useful for accessing the field via an interface.
func (v *DatastreamInput) GetIconUrl() *string { return v.IconUrl }

// GetDisabled returns DatastreamInput.Disabled, and is useful for accessing the field via an interface.
func (v *DatastreamInput) GetDisabled() *bool { return v.Disabled }

// GetExternalSourceId returns DatastreamInput.ExternalSourceId, and is useful for accessing the field via an interface.
func (v *DatastreamInput) GetExternalSourceId() *string { return v.ExternalSourceId }

// GetPrometheusInput returns DatastreamInput.PrometheusInput, and is useful for accessing the field via an interface.
func (v *DatastreamInput) GetPrometheusInput() *DatastreamPrometheusInput { return v.PrometheusInput }

// GetOtelLogsInput returns DatastreamInput.OtelLogsInput, and is useful for accessing the field via an interface.
func (v *DatastreamInput) GetOtelLogsInput() *DatastreamOtelLogsInput { return v.OtelLogsInput }

// GetK8sEntityInput returns DatastreamInput.K8sEntityInput, and is useful for accessing the field via an interface.
func (v *DatastreamInput) GetK8sEntityInput() *DatastreamK8sEntityInput { return v.K8sEntityInput }

type DatastreamK8sEntityInput struct {
	Enabled bool `json:"enabled"`
}

// GetEnabled returns DatastreamK8sEntityInput.Enabled, and is useful for accessing the field via an interface.
func (v *DatastreamK8sEntityInput) GetEnabled() bool { return v.Enabled }

type DatastreamOtelLogsInput struct {
	Enabled bool `json:"enabled"`
}

// GetEnabled returns DatastreamOtelLogsInput.Enabled, and is useful for accessing the field via an interface.
func (v *DatastreamOtelLogsInput) GetEnabled() bool { return v.Enabled }

type DatastreamPrometheusInput struct {
	Enabled      bool  `json:"enabled"`
	UseTransform *bool `json:"useTransform"`
}

// GetEnabled returns DatastreamPrometheusInput.Enabled, and is useful for accessing the field via an interface.
func (v *DatastreamPrometheusInput) GetEnabled() bool { return v.Enabled }

// GetUseTransform returns DatastreamPrometheusInput.UseTransform, and is useful for accessing the field via an interface.
func (v *DatastreamPrometheusInput) GetUseTransform() *bool { return v.UseTransform }

// DatastreamToken includes the GraphQL fields of DatastreamToken requested by the fragment DatastreamToken.
type DatastreamToken struct {
	Id           string  `json:"id"`
	Name         string  `json:"name"`
	Description  *string `json:"description"`
	Disabled     bool    `json:"disabled"`
	DatastreamId string  `json:"datastreamId"`
	// only populated for creates
	Secret *string `json:"secret"`
}

// GetId returns DatastreamToken.Id, and is useful for accessing the field via an interface.
func (v *DatastreamToken) GetId() string { return v.Id }

// GetName returns DatastreamToken.Name, and is useful for accessing the field via an interface.
func (v *DatastreamToken) GetName() string { return v.Name }

// GetDescription returns DatastreamToken.Description, and is useful for accessing the field via an interface.
func (v *DatastreamToken) GetDescription() *string { return v.Description }

// GetDisabled returns DatastreamToken.Disabled, and is useful for accessing the field via an interface.
func (v *DatastreamToken) GetDisabled() bool { return v.Disabled }

// GetDatastreamId returns DatastreamToken.DatastreamId, and is useful for accessing the field via an interface.
func (v *DatastreamToken) GetDatastreamId() string { return v.DatastreamId }

// GetSecret returns DatastreamToken.Secret, and is useful for accessing the field via an interface.
func (v *DatastreamToken) GetSecret() *string { return v.Secret }

type DatastreamTokenAppMetadataInput struct {
	AppId          string  `json:"appId"`
	ModuleId       *string `json:"moduleId"`
	Instructions   string  `json:"instructions"`
	DatasourceName string  `json:"datasourceName"`
}

// GetAppId returns DatastreamTokenAppMetadataInput.AppId, and is useful for accessing the field via an interface.
func (v *DatastreamTokenAppMetadataInput) GetAppId() string { return v.AppId }

// GetModuleId returns DatastreamTokenAppMetadataInput.ModuleId, and is useful for accessing the field via an interface.
func (v *DatastreamTokenAppMetadataInput) GetModuleId() *string { return v.ModuleId }

// GetInstructions returns DatastreamTokenAppMetadataInput.Instructions, and is useful for accessing the field via an interface.
func (v *DatastreamTokenAppMetadataInput) GetInstructions() string { return v.Instructions }

// GetDatasourceName returns DatastreamTokenAppMetadataInput.DatasourceName, and is useful for accessing the field via an interface.
func (v *DatastreamTokenAppMetadataInput) GetDatasourceName() string { return v.DatasourceName }

type DatastreamTokenInput struct {
	Name        string                           `json:"name"`
	Description *string                          `json:"description"`
	Disabled    *bool                            `json:"disabled"`
	AppMetadata *DatastreamTokenAppMetadataInput `json:"appMetadata"`
}

// GetName returns DatastreamTokenInput.Name, and is useful for accessing the field via an interface.
func (v *DatastreamTokenInput) GetName() string { return v.Name }

// GetDescription returns DatastreamTokenInput.Description, and is useful for accessing the field via an interface.
func (v *DatastreamTokenInput) GetDescription() *string { return v.Description }

// GetDisabled returns DatastreamTokenInput.Disabled, and is useful for accessing the field via an interface.
func (v *DatastreamTokenInput) GetDisabled() *bool { return v.Disabled }

// GetAppMetadata returns DatastreamTokenInput.AppMetadata, and is useful for accessing the field via an interface.
func (v *DatastreamTokenInput) GetAppMetadata() *DatastreamTokenAppMetadataInput {
	return v.AppMetadata
}

// Deprecated, and will return entirely empty result. Use ColumnStatsInput and/or VolumeStatsInput instead.
// We cannot remove it because the Terraform provider depends on it.
type DefaultStatsInput struct {
	// This field is deprecated and will be ignored
	TopKCount *types.Int64Scalar `json:"topKCount"`
	// This field is deprecated and will be ignored
	MaxNbHistograms *types.Int64Scalar `json:"maxNbHistograms"`
	// This field is deprecated and will be ignored
	HistogramCount *types.Int64Scalar `json:"histogramCount"`
	// This field is deprecated and will be ignored
	SparklineBucketCount *types.Int64Scalar `json:"sparklineBucketCount"`
	// This field is deprecated and will be ignored
	SparklineFunction *string `json:"sparklineFunction"`
	// This field is deprecated and will be ignored
	IncludeTimestampColumns *bool `json:"includeTimestampColumns"`
	// This field is deprecated and will be ignored
	UseCompoundTopKForLinks *bool `json:"useCompoundTopKForLinks"`
}

// GetTopKCount returns DefaultStatsInput.TopKCount, and is useful for accessing the field via an interface.
func (v *DefaultStatsInput) GetTopKCount() *types.Int64Scalar { return v.TopKCount }

// GetMaxNbHistograms returns DefaultStatsInput.MaxNbHistograms, and is useful for accessing the field via an interface.
func (v *DefaultStatsInput) GetMaxNbHistograms() *types.Int64Scalar { return v.MaxNbHistograms }

// GetHistogramCount returns DefaultStatsInput.HistogramCount, and is useful for accessing the field via an interface.
func (v *DefaultStatsInput) GetHistogramCount() *types.Int64Scalar { return v.HistogramCount }

// GetSparklineBucketCount returns DefaultStatsInput.SparklineBucketCount, and is useful for accessing the field via an interface.
func (v *DefaultStatsInput) GetSparklineBucketCount() *types.Int64Scalar {
	return v.SparklineBucketCount
}

// GetSparklineFunction returns DefaultStatsInput.SparklineFunction, and is useful for accessing the field via an interface.
func (v *DefaultStatsInput) GetSparklineFunction() *string { return v.SparklineFunction }

// GetIncludeTimestampColumns returns DefaultStatsInput.IncludeTimestampColumns, and is useful for accessing the field via an interface.
func (v *DefaultStatsInput) GetIncludeTimestampColumns() *bool { return v.IncludeTimestampColumns }

// GetUseCompoundTopKForLinks returns DefaultStatsInput.UseCompoundTopKForLinks, and is useful for accessing the field via an interface.
func (v *DefaultStatsInput) GetUseCompoundTopKForLinks() *bool { return v.UseCompoundTopKForLinks }

type DeferredDatasetReferenceInput struct {
	DatasetId *string `json:"datasetId"`
	// A path may specify "Workspace.Datasetname", or it may just specify
	// Datasetname, in which case it is relative to the Workspace that the
	// Potential Foreign Key lives in.
	DatasetPath *string `json:"datasetPath"`
}

// GetDatasetId returns DeferredDatasetReferenceInput.DatasetId, and is useful for accessing the field via an interface.
func (v *DeferredDatasetReferenceInput) GetDatasetId() *string { return v.DatasetId }

// GetDatasetPath returns DeferredDatasetReferenceInput.DatasetPath, and is useful for accessing the field via an interface.
func (v *DeferredDatasetReferenceInput) GetDatasetPath() *string { return v.DatasetPath }

// DeferredForeignKey includes the GraphQL fields of DeferredForeignKey requested by the fragment DeferredForeignKey.
type DeferredForeignKey struct {
	Id            string                                                   `json:"id"`
	WorkspaceId   string                                                   `json:"workspaceId"`
	SourceDataset *DeferredForeignKeySourceDatasetDeferredDatasetReference `json:"sourceDataset"`
	TargetDataset *DeferredForeignKeyTargetDatasetDeferredDatasetReference `json:"targetDataset"`
	SrcFields     []string                                                 `json:"srcFields"`
	DstFields     []string                                                 `json:"dstFields"`
	Label         *string                                                  `json:"label"`
	Resolution    *DeferredForeignKeyResolutionResolvedForeignKey          `json:"resolution"`
	Status        DeferredForeignKeyStatus                                 `json:"status"`
}

// GetId returns DeferredForeignKey.Id, and is useful for accessing the field via an interface.
func (v *DeferredForeignKey) GetId() string { return v.Id }

// GetWorkspaceId returns DeferredForeignKey.WorkspaceId, and is useful for accessing the field via an interface.
func (v *DeferredForeignKey) GetWorkspaceId() string { return v.WorkspaceId }

// GetSourceDataset returns DeferredForeignKey.SourceDataset, and is useful for accessing the field via an interface.
func (v *DeferredForeignKey) GetSourceDataset() *DeferredForeignKeySourceDatasetDeferredDatasetReference {
	return v.SourceDataset
}

// GetTargetDataset returns DeferredForeignKey.TargetDataset, and is useful for accessing the field via an interface.
func (v *DeferredForeignKey) GetTargetDataset() *DeferredForeignKeyTargetDatasetDeferredDatasetReference {
	return v.TargetDataset
}

// GetSrcFields returns DeferredForeignKey.SrcFields, and is useful for accessing the field via an interface.
func (v *DeferredForeignKey) GetSrcFields() []string { return v.SrcFields }

// GetDstFields returns DeferredForeignKey.DstFields, and is useful for accessing the field via an interface.
func (v *DeferredForeignKey) GetDstFields() []string { return v.DstFields }

// GetLabel returns DeferredForeignKey.Label, and is useful for accessing the field via an interface.
func (v *DeferredForeignKey) GetLabel() *string { return v.Label }

// GetResolution returns DeferredForeignKey.Resolution, and is useful for accessing the field via an interface.
func (v *DeferredForeignKey) GetResolution() *DeferredForeignKeyResolutionResolvedForeignKey {
	return v.Resolution
}

// GetStatus returns DeferredForeignKey.Status, and is useful for accessing the field via an interface.
func (v *DeferredForeignKey) GetStatus() DeferredForeignKeyStatus { return v.Status }

type DeferredForeignKeyInput struct {
	SourceDataset *DeferredDatasetReferenceInput `json:"sourceDataset"`
	TargetDataset *DeferredDatasetReferenceInput `json:"targetDataset"`
	SrcFields     []string                       `json:"srcFields"`
	DstFields     []string                       `json:"dstFields"`
	// The API will make up a label if it's specified as empty.
	Label       *string `json:"label"`
	ManagedById *string `json:"managedById"`
}

// GetSourceDataset returns DeferredForeignKeyInput.SourceDataset, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyInput) GetSourceDataset() *DeferredDatasetReferenceInput {
	return v.SourceDataset
}

// GetTargetDataset returns DeferredForeignKeyInput.TargetDataset, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyInput) GetTargetDataset() *DeferredDatasetReferenceInput {
	return v.TargetDataset
}

// GetSrcFields returns DeferredForeignKeyInput.SrcFields, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyInput) GetSrcFields() []string { return v.SrcFields }

// GetDstFields returns DeferredForeignKeyInput.DstFields, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyInput) GetDstFields() []string { return v.DstFields }

// GetLabel returns DeferredForeignKeyInput.Label, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyInput) GetLabel() *string { return v.Label }

// GetManagedById returns DeferredForeignKeyInput.ManagedById, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyInput) GetManagedById() *string { return v.ManagedById }

// DeferredForeignKeyResolutionResolvedForeignKey includes the requested fields of the GraphQL type ResolvedForeignKey.
type DeferredForeignKeyResolutionResolvedForeignKey struct {
	SourceId string `json:"sourceId"`
	TargetId string `json:"targetId"`
}

// GetSourceId returns DeferredForeignKeyResolutionResolvedForeignKey.SourceId, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyResolutionResolvedForeignKey) GetSourceId() string { return v.SourceId }

// GetTargetId returns DeferredForeignKeyResolutionResolvedForeignKey.TargetId, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyResolutionResolvedForeignKey) GetTargetId() string { return v.TargetId }

// DeferredForeignKeySourceDatasetDeferredDatasetReference includes the requested fields of the GraphQL type DeferredDatasetReference.
type DeferredForeignKeySourceDatasetDeferredDatasetReference struct {
	DatasetId *string `json:"datasetId"`
}

// GetDatasetId returns DeferredForeignKeySourceDatasetDeferredDatasetReference.DatasetId, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeySourceDatasetDeferredDatasetReference) GetDatasetId() *string {
	return v.DatasetId
}

// DeferredForeignKeyStatus includes the requested fields of the GraphQL type DeferredForeignKeyStatus.
type DeferredForeignKeyStatus struct {
	ErrorText string `json:"errorText"`
}

// GetErrorText returns DeferredForeignKeyStatus.ErrorText, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyStatus) GetErrorText() string { return v.ErrorText }

// DeferredForeignKeyTargetDatasetDeferredDatasetReference includes the requested fields of the GraphQL type DeferredDatasetReference.
type DeferredForeignKeyTargetDatasetDeferredDatasetReference struct {
	DatasetId *string `json:"datasetId"`
}

// GetDatasetId returns DeferredForeignKeyTargetDatasetDeferredDatasetReference.DatasetId, and is useful for accessing the field via an interface.
func (v *DeferredForeignKeyTargetDatasetDeferredDatasetReference) GetDatasetId() *string {
	return v.DatasetId
}

type DependencyHandlingInput struct {
	SaveMode *SaveMode `json:"saveMode"`
	// For saveMode UpdateDatasetAndDependenciesUnlessNewErrors, here are errors that don't count as "new"
	IgnoreSpecificErrors []string `json:"ignoreSpecificErrors"`
}

// GetSaveMode returns DependencyHandlingInput.SaveMode, and is useful for accessing the field via an interface.
func (v *DependencyHandlingInput) GetSaveMode() *SaveMode { return v.SaveMode }

// GetIgnoreSpecificErrors returns DependencyHandlingInput.IgnoreSpecificErrors, and is useful for accessing the field via an interface.
func (v *DependencyHandlingInput) GetIgnoreSpecificErrors() []string { return v.IgnoreSpecificErrors }

type EmailActionInput struct {
	TargetUsers     []types.UserIdScalar `json:"targetUsers"`
	TargetAddresses []string             `json:"targetAddresses"`
	SubjectTemplate *string              `json:"subjectTemplate"`
	BodyTemplate    *string              `json:"bodyTemplate"`
	IsHtml          *bool                `json:"isHtml"`
	// Fragments are fields that users can edit on simple mode.
	// For example,
	// fragments.title = {{notification.kind}} fired off at {{notification.startTime}}
	// is available in all other templates as {{fragments.title}}
	Fragments *types.JsonObject `json:"fragments"`
}

// GetTargetUsers returns EmailActionInput.TargetUsers, and is useful for accessing the field via an interface.
func (v *EmailActionInput) GetTargetUsers() []types.UserIdScalar { return v.TargetUsers }

// GetTargetAddresses returns EmailActionInput.TargetAddresses, and is useful for accessing the field via an interface.
func (v *EmailActionInput) GetTargetAddresses() []string { return v.TargetAddresses }

// GetSubjectTemplate returns EmailActionInput.SubjectTemplate, and is useful for accessing the field via an interface.
func (v *EmailActionInput) GetSubjectTemplate() *string { return v.SubjectTemplate }

// GetBodyTemplate returns EmailActionInput.BodyTemplate, and is useful for accessing the field via an interface.
func (v *EmailActionInput) GetBodyTemplate() *string { return v.BodyTemplate }

// GetIsHtml returns EmailActionInput.IsHtml, and is useful for accessing the field via an interface.
func (v *EmailActionInput) GetIsHtml() *bool { return v.IsHtml }

// GetFragments returns EmailActionInput.Fragments, and is useful for accessing the field via an interface.
func (v *EmailActionInput) GetFragments() *types.JsonObject { return v.Fragments }

type FacetFunction string

const (
	FacetFunctionEquals         FacetFunction = "Equals"
	FacetFunctionNotequal       FacetFunction = "NotEqual"
	FacetFunctionContains       FacetFunction = "Contains"
	FacetFunctionDoesnotcontain FacetFunction = "DoesNotContain"
	FacetFunctionIsnull         FacetFunction = "IsNull"
	FacetFunctionIsnotnull      FacetFunction = "IsNotNull"
)

// Filedrop includes the GraphQL fields of Filedrop requested by the fragment Filedrop.
type Filedrop struct {
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	IconUrl     *string `json:"iconUrl"`
	Description *string `json:"description"`
	WorkspaceId string  `json:"workspaceId"`
	// status of the filedrop
	Status FiledropStatus `json:"status"`
	// ID of the datastream associated with the filedrop
	DatastreamID string           `json:"datastreamID"`
	Config       FiledropConfig   `json:"config"`
	Endpoint     FiledropEndpoint `json:"-"`
}

// GetId returns Filedrop.Id, and is useful for accessing the field via an interface.
func (v *Filedrop) GetId() string { return v.Id }

// GetName returns Filedrop.Name, and is useful for accessing the field via an interface.
func (v *Filedrop) GetName() string { return v.Name }

// GetIconUrl returns Filedrop.IconUrl, and is useful for accessing the field via an interface.
func (v *Filedrop) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns Filedrop.Description, and is useful for accessing the field via an interface.
func (v *Filedrop) GetDescription() *string { return v.Description }

// GetWorkspaceId returns Filedrop.WorkspaceId, and is useful for accessing the field via an interface.
func (v *Filedrop) GetWorkspaceId() string { return v.WorkspaceId }

// GetStatus returns Filedrop.Status, and is useful for accessing the field via an interface.
func (v *Filedrop) GetStatus() FiledropStatus { return v.Status }

// GetDatastreamID returns Filedrop.DatastreamID, and is useful for accessing the field via an interface.
func (v *Filedrop) GetDatastreamID() string { return v.DatastreamID }

// GetConfig returns Filedrop.Config, and is useful for accessing the field via an interface.
func (v *Filedrop) GetConfig() FiledropConfig { return v.Config }

// GetEndpoint returns Filedrop.Endpoint, and is useful for accessing the field via an interface.
func (v *Filedrop) GetEndpoint() FiledropEndpoint { return v.Endpoint }

func (v *Filedrop) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*Filedrop
		Endpoint json.RawMessage `json:"endpoint"`
		graphql.NoUnmarshalJSON
	}
	firstPass.Filedrop = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Endpoint
		src := firstPass.Endpoint
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalFiledropEndpoint(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal Filedrop.Endpoint: %w", err)
			}
		}
	}
	return nil
}

type __premarshalFiledrop struct {
	Id string `json:"id"`

	Name string `json:"name"`

	IconUrl *string `json:"iconUrl"`

	Description *string `json:"description"`

	WorkspaceId string `json:"workspaceId"`

	Status FiledropStatus `json:"status"`

	DatastreamID string `json:"datastreamID"`

	Config FiledropConfig `json:"config"`

	Endpoint json.RawMessage `json:"endpoint"`
}

func (v *Filedrop) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *Filedrop) __premarshalJSON() (*__premarshalFiledrop, error) {
	var retval __premarshalFiledrop

	retval.Id = v.Id
	retval.Name = v.Name
	retval.IconUrl = v.IconUrl
	retval.Description = v.Description
	retval.WorkspaceId = v.WorkspaceId
	retval.Status = v.Status
	retval.DatastreamID = v.DatastreamID
	retval.Config = v.Config
	{

		dst := &retval.Endpoint
		src := v.Endpoint
		var err error
		*dst, err = __marshalFiledropEndpoint(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal Filedrop.Endpoint: %w", err)
		}
	}
	return &retval, nil
}

// FiledropConfig includes the requested fields of the GraphQL type FiledropConfig.
type FiledropConfig struct {
	Provider FiledropConfigProviderFiledropProviderConfig `json:"-"`
}

// GetProvider returns FiledropConfig.Provider, and is useful for accessing the field via an interface.
func (v *FiledropConfig) GetProvider() FiledropConfigProviderFiledropProviderConfig {
	return v.Provider
}

func (v *FiledropConfig) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*FiledropConfig
		Provider json.RawMessage `json:"provider"`
		graphql.NoUnmarshalJSON
	}
	firstPass.FiledropConfig = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Provider
		src := firstPass.Provider
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalFiledropConfigProviderFiledropProviderConfig(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal FiledropConfig.Provider: %w", err)
			}
		}
	}
	return nil
}

type __premarshalFiledropConfig struct {
	Provider json.RawMessage `json:"provider"`
}

func (v *FiledropConfig) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *FiledropConfig) __premarshalJSON() (*__premarshalFiledropConfig, error) {
	var retval __premarshalFiledropConfig

	{

		dst := &retval.Provider
		src := v.Provider
		var err error
		*dst, err = __marshalFiledropConfigProviderFiledropProviderConfig(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal FiledropConfig.Provider: %w", err)
		}
	}
	return &retval, nil
}

type FiledropConfigInput struct {
	ProviderAws *FiledropProviderAwsConfigInput `json:"providerAws"`
}

// GetProviderAws returns FiledropConfigInput.ProviderAws, and is useful for accessing the field via an interface.
func (v *FiledropConfigInput) GetProviderAws() *FiledropProviderAwsConfigInput { return v.ProviderAws }

// FiledropConfigProviderFiledropProviderAwsConfig includes the requested fields of the GraphQL type FiledropProviderAwsConfig.
type FiledropConfigProviderFiledropProviderAwsConfig struct {
	Typename *string `json:"__typename"`
	// AWS region of the filedrop
	Region string `json:"region"`
	// User provided IAM role to access the filedrop
	RoleArn string `json:"roleArn"`
}

// GetTypename returns FiledropConfigProviderFiledropProviderAwsConfig.Typename, and is useful for accessing the field via an interface.
func (v *FiledropConfigProviderFiledropProviderAwsConfig) GetTypename() *string { return v.Typename }

// GetRegion returns FiledropConfigProviderFiledropProviderAwsConfig.Region, and is useful for accessing the field via an interface.
func (v *FiledropConfigProviderFiledropProviderAwsConfig) GetRegion() string { return v.Region }

// GetRoleArn returns FiledropConfigProviderFiledropProviderAwsConfig.RoleArn, and is useful for accessing the field via an interface.
func (v *FiledropConfigProviderFiledropProviderAwsConfig) GetRoleArn() string { return v.RoleArn }

// FiledropConfigProviderFiledropProviderConfig includes the requested fields of the GraphQL interface FiledropProviderConfig.
//
// FiledropConfigProviderFiledropProviderConfig is implemented by the following types:
// FiledropConfigProviderFiledropProviderAwsConfig
// The GraphQL type's documentation follows.
//
// Configurations related to the cloud object storage service provider
type FiledropConfigProviderFiledropProviderConfig interface {
	implementsGraphQLInterfaceFiledropConfigProviderFiledropProviderConfig()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *FiledropConfigProviderFiledropProviderAwsConfig) implementsGraphQLInterfaceFiledropConfigProviderFiledropProviderConfig() {
}

func __unmarshalFiledropConfigProviderFiledropProviderConfig(b []byte, v *FiledropConfigProviderFiledropProviderConfig) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "FiledropProviderAwsConfig":
		*v = new(FiledropConfigProviderFiledropProviderAwsConfig)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing FiledropProviderConfig.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for FiledropConfigProviderFiledropProviderConfig: "%v"`, tn.TypeName)
	}
}

func __marshalFiledropConfigProviderFiledropProviderConfig(v *FiledropConfigProviderFiledropProviderConfig) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *FiledropConfigProviderFiledropProviderAwsConfig:
		typename = "FiledropProviderAwsConfig"

		result := struct {
			TypeName string `json:"__typename"`
			*FiledropConfigProviderFiledropProviderAwsConfig
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for FiledropConfigProviderFiledropProviderConfig: "%T"`, v)
	}
}

// FiledropEndpoint includes the requested fields of the GraphQL interface FiledropEndpoint.
//
// FiledropEndpoint is implemented by the following types:
// FiledropEndpointFiledropS3Endpoint
// The GraphQL type's documentation follows.
//
// Information of the Observe-created filedrop endpoint
type FiledropEndpoint interface {
	implementsGraphQLInterfaceFiledropEndpoint()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *FiledropEndpointFiledropS3Endpoint) implementsGraphQLInterfaceFiledropEndpoint() {}

func __unmarshalFiledropEndpoint(b []byte, v *FiledropEndpoint) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "FiledropS3Endpoint":
		*v = new(FiledropEndpointFiledropS3Endpoint)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing FiledropEndpoint.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for FiledropEndpoint: "%v"`, tn.TypeName)
	}
}

func __marshalFiledropEndpoint(v *FiledropEndpoint) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *FiledropEndpointFiledropS3Endpoint:
		typename = "FiledropS3Endpoint"

		result := struct {
			TypeName string `json:"__typename"`
			*FiledropEndpointFiledropS3Endpoint
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for FiledropEndpoint: "%T"`, v)
	}
}

// FiledropEndpointFiledropS3Endpoint includes the requested fields of the GraphQL type FiledropS3Endpoint.
type FiledropEndpointFiledropS3Endpoint struct {
	Typename *string `json:"__typename"`
	// IAM arn of the S3 access point
	Arn string `json:"arn"`
	// Bucket style alias of the S3 access point
	Bucket string `json:"bucket"`
	// filedrop's prefix path within the S3 access point
	Prefix string `json:"prefix"`
}

// GetTypename returns FiledropEndpointFiledropS3Endpoint.Typename, and is useful for accessing the field via an interface.
func (v *FiledropEndpointFiledropS3Endpoint) GetTypename() *string { return v.Typename }

// GetArn returns FiledropEndpointFiledropS3Endpoint.Arn, and is useful for accessing the field via an interface.
func (v *FiledropEndpointFiledropS3Endpoint) GetArn() string { return v.Arn }

// GetBucket returns FiledropEndpointFiledropS3Endpoint.Bucket, and is useful for accessing the field via an interface.
func (v *FiledropEndpointFiledropS3Endpoint) GetBucket() string { return v.Bucket }

// GetPrefix returns FiledropEndpointFiledropS3Endpoint.Prefix, and is useful for accessing the field via an interface.
func (v *FiledropEndpointFiledropS3Endpoint) GetPrefix() string { return v.Prefix }

type FiledropInput struct {
	Disabled    *bool               `json:"disabled,omitempty"`
	Config      FiledropConfigInput `json:"config"`
	Name        *string             `json:"name"`
	IconUrl     *string             `json:"iconUrl"`
	Description *string             `json:"description"`
	ManagedById *string             `json:"managedById"`
	FolderId    *string             `json:"folderId"`
}

// GetDisabled returns FiledropInput.Disabled, and is useful for accessing the field via an interface.
func (v *FiledropInput) GetDisabled() *bool { return v.Disabled }

// GetConfig returns FiledropInput.Config, and is useful for accessing the field via an interface.
func (v *FiledropInput) GetConfig() FiledropConfigInput { return v.Config }

// GetName returns FiledropInput.Name, and is useful for accessing the field via an interface.
func (v *FiledropInput) GetName() *string { return v.Name }

// GetIconUrl returns FiledropInput.IconUrl, and is useful for accessing the field via an interface.
func (v *FiledropInput) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns FiledropInput.Description, and is useful for accessing the field via an interface.
func (v *FiledropInput) GetDescription() *string { return v.Description }

// GetManagedById returns FiledropInput.ManagedById, and is useful for accessing the field via an interface.
func (v *FiledropInput) GetManagedById() *string { return v.ManagedById }

// GetFolderId returns FiledropInput.FolderId, and is useful for accessing the field via an interface.
func (v *FiledropInput) GetFolderId() *string { return v.FolderId }

type FiledropProviderAwsConfigInput struct {
	Region  string `json:"region"`
	RoleArn string `json:"roleArn"`
}

// GetRegion returns FiledropProviderAwsConfigInput.Region, and is useful for accessing the field via an interface.
func (v *FiledropProviderAwsConfigInput) GetRegion() string { return v.Region }

// GetRoleArn returns FiledropProviderAwsConfigInput.RoleArn, and is useful for accessing the field via an interface.
func (v *FiledropProviderAwsConfigInput) GetRoleArn() string { return v.RoleArn }

type FiledropStatus string

const (
	FiledropStatusDisabled     FiledropStatus = "Disabled"
	FiledropStatusInitializing FiledropStatus = "Initializing"
	FiledropStatusRunning      FiledropStatus = "Running"
	FiledropStatusUpdating     FiledropStatus = "Updating"
)

// Folder includes the GraphQL fields of Folder requested by the fragment Folder.
type Folder struct {
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	IconUrl     *string `json:"iconUrl"`
	Description *string `json:"description"`
	WorkspaceId string  `json:"workspaceId"`
}

// GetId returns Folder.Id, and is useful for accessing the field via an interface.
func (v *Folder) GetId() string { return v.Id }

// GetName returns Folder.Name, and is useful for accessing the field via an interface.
func (v *Folder) GetName() string { return v.Name }

// GetIconUrl returns Folder.IconUrl, and is useful for accessing the field via an interface.
func (v *Folder) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns Folder.Description, and is useful for accessing the field via an interface.
func (v *Folder) GetDescription() *string { return v.Description }

// GetWorkspaceId returns Folder.WorkspaceId, and is useful for accessing the field via an interface.
func (v *Folder) GetWorkspaceId() string { return v.WorkspaceId }

type FolderInput struct {
	Name             *string             `json:"name"`
	Description      *string             `json:"description"`
	IconUrl          *string             `json:"iconUrl"`
	PersonalToUserId *types.UserIdScalar `json:"personalToUserId"`
}

// GetName returns FolderInput.Name, and is useful for accessing the field via an interface.
func (v *FolderInput) GetName() *string { return v.Name }

// GetDescription returns FolderInput.Description, and is useful for accessing the field via an interface.
func (v *FolderInput) GetDescription() *string { return v.Description }

// GetIconUrl returns FolderInput.IconUrl, and is useful for accessing the field via an interface.
func (v *FolderInput) GetIconUrl() *string { return v.IconUrl }

// GetPersonalToUserId returns FolderInput.PersonalToUserId, and is useful for accessing the field via an interface.
func (v *FolderInput) GetPersonalToUserId() *types.UserIdScalar { return v.PersonalToUserId }

// HttpRequestConfig includes the GraphQL fields of PollerHTTPRequestConfig requested by the fragment HttpRequestConfig.
type HttpRequestConfig struct {
	Url        *string                      `json:"url"`
	Method     *string                      `json:"method"`
	Username   *string                      `json:"username"`
	Password   *string                      `json:"password"`
	AuthScheme *PollerHTTPRequestAuthScheme `json:"authScheme"`
	Body       *string                      `json:"body"`
	Headers    *types.JsonObject            `json:"headers"`
	Params     *types.JsonObject            `json:"params"`
}

// GetUrl returns HttpRequestConfig.Url, and is useful for accessing the field via an interface.
func (v *HttpRequestConfig) GetUrl() *string { return v.Url }

// GetMethod returns HttpRequestConfig.Method, and is useful for accessing the field via an interface.
func (v *HttpRequestConfig) GetMethod() *string { return v.Method }

// GetUsername returns HttpRequestConfig.Username, and is useful for accessing the field via an interface.
func (v *HttpRequestConfig) GetUsername() *string { return v.Username }

// GetPassword returns HttpRequestConfig.Password, and is useful for accessing the field via an interface.
func (v *HttpRequestConfig) GetPassword() *string { return v.Password }

// GetAuthScheme returns HttpRequestConfig.AuthScheme, and is useful for accessing the field via an interface.
func (v *HttpRequestConfig) GetAuthScheme() *PollerHTTPRequestAuthScheme { return v.AuthScheme }

// GetBody returns HttpRequestConfig.Body, and is useful for accessing the field via an interface.
func (v *HttpRequestConfig) GetBody() *string { return v.Body }

// GetHeaders returns HttpRequestConfig.Headers, and is useful for accessing the field via an interface.
func (v *HttpRequestConfig) GetHeaders() *types.JsonObject { return v.Headers }

// GetParams returns HttpRequestConfig.Params, and is useful for accessing the field via an interface.
func (v *HttpRequestConfig) GetParams() *types.JsonObject { return v.Params }

// IngestInfo includes the GraphQL fields of IngestInfo requested by the fragment IngestInfo.
// The GraphQL type's documentation follows.
//
// Information on the data ingestion endpoint, full URL format is:
// <scheme>://<customerId>.collect.<domain>:<port>/
type IngestInfo struct {
	CollectUrl string `json:"collectUrl"`
	Domain     string `json:"domain"`
	Scheme     string `json:"scheme"`
	Port       string `json:"port"`
}

// GetCollectUrl returns IngestInfo.CollectUrl, and is useful for accessing the field via an interface.
func (v *IngestInfo) GetCollectUrl() string { return v.CollectUrl }

// GetDomain returns IngestInfo.Domain, and is useful for accessing the field via an interface.
func (v *IngestInfo) GetDomain() string { return v.Domain }

// GetScheme returns IngestInfo.Scheme, and is useful for accessing the field via an interface.
func (v *IngestInfo) GetScheme() string { return v.Scheme }

// GetPort returns IngestInfo.Port, and is useful for accessing the field via an interface.
func (v *IngestInfo) GetPort() string { return v.Port }

type InputDefinitionInput struct {
	// Assign the short and unique user mnemonic for this input, used in @tableref expressions
	InputName string `json:"inputName"`
	// If this input is to be used for a purpose other than "slurp data," then specify that here.
	InputRole *InputRole `json:"inputRole"`
	// Datasets defined by IDs refer to latest-published version of dataset.
	DatasetId *string `json:"datasetId"`
	// Format of datasetPath is projectlabel.datasetlabel
	DatasetPath *string `json:"datasetPath"`
	// Reference a previous query in the worksheet by label
	StageID *string `json:"stageID,omitempty"`
	StageId *string `json:"stageId,omitempty"`
	// If this input is parameterized, this will contain the ID of the parameter to substitute for this input. Parameters
	// are bound in the QueryParams for the query being issued with this input.
	ParameterId *string `json:"parameterId"`
}

// GetInputName returns InputDefinitionInput.InputName, and is useful for accessing the field via an interface.
func (v *InputDefinitionInput) GetInputName() string { return v.InputName }

// GetInputRole returns InputDefinitionInput.InputRole, and is useful for accessing the field via an interface.
func (v *InputDefinitionInput) GetInputRole() *InputRole { return v.InputRole }

// GetDatasetId returns InputDefinitionInput.DatasetId, and is useful for accessing the field via an interface.
func (v *InputDefinitionInput) GetDatasetId() *string { return v.DatasetId }

// GetDatasetPath returns InputDefinitionInput.DatasetPath, and is useful for accessing the field via an interface.
func (v *InputDefinitionInput) GetDatasetPath() *string { return v.DatasetPath }

// GetStageID returns InputDefinitionInput.StageID, and is useful for accessing the field via an interface.
func (v *InputDefinitionInput) GetStageID() *string { return v.StageID }

// GetStageId returns InputDefinitionInput.StageId, and is useful for accessing the field via an interface.
func (v *InputDefinitionInput) GetStageId() *string { return v.StageId }

// GetParameterId returns InputDefinitionInput.ParameterId, and is useful for accessing the field via an interface.
func (v *InputDefinitionInput) GetParameterId() *string { return v.ParameterId }

// Why do we separate "Data" bindings from "Reference" bindings? Why does this
// have to be pre-declared, rather than resolved at the end by the compiler?
//
// Because we have the hard rule that physical dataset IDs only exist in the
// API, not at the OPAL level, we wouldn't know which particular dataset you'd
// suggest to use, unless the input binding was pre-declared.  If we just made
// something up in GetTargetDatasetBinding() then how would we later know which
// shape to resolve it to?
//
// The user writes addfk "some name", id=@theThing.id
//
// We need to know what theThing really means. Hence, it needs a binding. Hence,
// when bindings are specified, we need to know whether you expect that to be
// 100% defined, or left pending.  We could allow a less concrete pipeline
// specification. Leave @theThing entirely unresolved, and only resolve it using
// some later operation that says "and wherever I called something @theThing,
// now I mean this thing!" (edited)
//
// Which means that we have to live with pipelines that are constantly in
// unresolved and unresolvable states, and only some pipelines can run. We also
// can no longer preview the data until that next step has been taken.
//
// I e, we assume each query (set of stages) compiles and links as a unit. There
// is no separate compilation, because the user experience and complexity of
// that abstraction seems unnecessary just to solve this one use case in this
// one alternative way.
type InputRole string

const (
	InputRoleDefault   InputRole = "Default"
	InputRoleData      InputRole = "Data"
	InputRoleReference InputRole = "Reference"
)

// LayeredSettingRecord includes the GraphQL fields of LayeredSettingRecord requested by the fragment LayeredSettingRecord.
// The GraphQL type's documentation follows.
//
// A Layered Setting is like a feature flag that can be controlled by customers.
// It allows control on a per-scope basis, where scope could be entire customer,
// workspace, folder, app, dataset, monitor, or similar, with a broad-to-detailed
// inheritance hierarchy.
//
// A Layered Setting Record is a record setting the value of a Layered Setting at
// a particular scope.  When the value of a Layered Setting is read from a
// particular scope, we merge the Layered Setting Records at each scope that
// contains the requested scope to determine the return value.
type LayeredSettingRecord struct {
	SettingAndTargetScope SettingAndTargetScope `json:"settingAndTargetScope"`
	Value                 PrimitiveValue        `json:"value"`
	Id                    string                `json:"id"`
	// This is the name of the settings record, not the name of the setting!
	Name string `json:"name"`
	// This is the description of the settings record, not the description of the setting!
	Description *string `json:"description"`
	IconUrl     *string `json:"iconUrl"`
	WorkspaceId string  `json:"workspaceId"`
	ManagedById *string `json:"managedById"`
	FolderId    string  `json:"folderId"`
}

// GetSettingAndTargetScope returns LayeredSettingRecord.SettingAndTargetScope, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecord) GetSettingAndTargetScope() SettingAndTargetScope {
	return v.SettingAndTargetScope
}

// GetValue returns LayeredSettingRecord.Value, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecord) GetValue() PrimitiveValue { return v.Value }

// GetId returns LayeredSettingRecord.Id, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecord) GetId() string { return v.Id }

// GetName returns LayeredSettingRecord.Name, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecord) GetName() string { return v.Name }

// GetDescription returns LayeredSettingRecord.Description, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecord) GetDescription() *string { return v.Description }

// GetIconUrl returns LayeredSettingRecord.IconUrl, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecord) GetIconUrl() *string { return v.IconUrl }

// GetWorkspaceId returns LayeredSettingRecord.WorkspaceId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecord) GetWorkspaceId() string { return v.WorkspaceId }

// GetManagedById returns LayeredSettingRecord.ManagedById, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecord) GetManagedById() *string { return v.ManagedById }

// GetFolderId returns LayeredSettingRecord.FolderId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecord) GetFolderId() string { return v.FolderId }

type LayeredSettingRecordInput struct {
	SettingAndTargetScope SettingAndTargetScopeInput `json:"settingAndTargetScope"`
	Value                 PrimitiveValueInput        `json:"value"`
	Id                    *string                    `json:"id"`
	// This is the name of the settings record, not the name of the setting!
	//
	// If you give the layered setting record the empty name, it will get an auto-generated
	// name based on the setting and target. This is mainly convenient when creating these
	// within code itself, but can also be used by API users who don't want to manage a
	// separate name.
	Name string `json:"name"`
	// This is the description of the settings record, not the description of the setting!
	Description *string `json:"description"`
	IconUrl     *string `json:"iconUrl"`
	WorkspaceId string  `json:"workspaceId"`
	ManagedById *string `json:"managedById,omitempty"`
	FolderId    *string `json:"folderId"`
}

// GetSettingAndTargetScope returns LayeredSettingRecordInput.SettingAndTargetScope, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordInput) GetSettingAndTargetScope() SettingAndTargetScopeInput {
	return v.SettingAndTargetScope
}

// GetValue returns LayeredSettingRecordInput.Value, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordInput) GetValue() PrimitiveValueInput { return v.Value }

// GetId returns LayeredSettingRecordInput.Id, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordInput) GetId() *string { return v.Id }

// GetName returns LayeredSettingRecordInput.Name, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordInput) GetName() string { return v.Name }

// GetDescription returns LayeredSettingRecordInput.Description, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordInput) GetDescription() *string { return v.Description }

// GetIconUrl returns LayeredSettingRecordInput.IconUrl, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordInput) GetIconUrl() *string { return v.IconUrl }

// GetWorkspaceId returns LayeredSettingRecordInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetManagedById returns LayeredSettingRecordInput.ManagedById, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordInput) GetManagedById() *string { return v.ManagedById }

// GetFolderId returns LayeredSettingRecordInput.FolderId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordInput) GetFolderId() *string { return v.FolderId }

// LayeredSettingRecordTarget includes the GraphQL fields of LayeredSettingRecordTarget requested by the fragment LayeredSettingRecordTarget.
// The GraphQL type's documentation follows.
//
// When configuring a particular target, a single object ID should be non-null
// in the LayeredSettingRecordTarget. If you want to affect "everything in this folder,
// and also this particular dataset," then create two LayeredSettingRecords.
type LayeredSettingRecordTarget struct {
	CustomerId   *string             `json:"customerId"`
	WorkspaceId  *string             `json:"workspaceId"`
	FolderId     *string             `json:"folderId"`
	AppId        *string             `json:"appId"`
	MonitorId    *string             `json:"monitorId"`
	WorksheetId  *string             `json:"worksheetId"`
	DashboardId  *string             `json:"dashboardId"`
	DatasetId    *string             `json:"datasetId"`
	DatastreamId *string             `json:"datastreamId"`
	UserId       *types.UserIdScalar `json:"userId"`
}

// GetCustomerId returns LayeredSettingRecordTarget.CustomerId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTarget) GetCustomerId() *string { return v.CustomerId }

// GetWorkspaceId returns LayeredSettingRecordTarget.WorkspaceId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTarget) GetWorkspaceId() *string { return v.WorkspaceId }

// GetFolderId returns LayeredSettingRecordTarget.FolderId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTarget) GetFolderId() *string { return v.FolderId }

// GetAppId returns LayeredSettingRecordTarget.AppId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTarget) GetAppId() *string { return v.AppId }

// GetMonitorId returns LayeredSettingRecordTarget.MonitorId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTarget) GetMonitorId() *string { return v.MonitorId }

// GetWorksheetId returns LayeredSettingRecordTarget.WorksheetId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTarget) GetWorksheetId() *string { return v.WorksheetId }

// GetDashboardId returns LayeredSettingRecordTarget.DashboardId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTarget) GetDashboardId() *string { return v.DashboardId }

// GetDatasetId returns LayeredSettingRecordTarget.DatasetId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTarget) GetDatasetId() *string { return v.DatasetId }

// GetDatastreamId returns LayeredSettingRecordTarget.DatastreamId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTarget) GetDatastreamId() *string { return v.DatastreamId }

// GetUserId returns LayeredSettingRecordTarget.UserId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTarget) GetUserId() *types.UserIdScalar { return v.UserId }

type LayeredSettingRecordTargetInput struct {
	CustomerId   *string             `json:"customerId,omitempty"`
	WorkspaceId  *string             `json:"workspaceId,omitempty"`
	FolderId     *string             `json:"folderId,omitempty"`
	AppId        *string             `json:"appId,omitempty"`
	WorksheetId  *string             `json:"worksheetId,omitempty"`
	DashboardId  *string             `json:"dashboardId,omitempty"`
	DatastreamId *string             `json:"datastreamId"`
	MonitorId    *string             `json:"monitorId,omitempty"`
	DatasetId    *string             `json:"datasetId,omitempty"`
	UserId       *types.UserIdScalar `json:"userId,omitempty"`
}

// GetCustomerId returns LayeredSettingRecordTargetInput.CustomerId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTargetInput) GetCustomerId() *string { return v.CustomerId }

// GetWorkspaceId returns LayeredSettingRecordTargetInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTargetInput) GetWorkspaceId() *string { return v.WorkspaceId }

// GetFolderId returns LayeredSettingRecordTargetInput.FolderId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTargetInput) GetFolderId() *string { return v.FolderId }

// GetAppId returns LayeredSettingRecordTargetInput.AppId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTargetInput) GetAppId() *string { return v.AppId }

// GetWorksheetId returns LayeredSettingRecordTargetInput.WorksheetId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTargetInput) GetWorksheetId() *string { return v.WorksheetId }

// GetDashboardId returns LayeredSettingRecordTargetInput.DashboardId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTargetInput) GetDashboardId() *string { return v.DashboardId }

// GetDatastreamId returns LayeredSettingRecordTargetInput.DatastreamId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTargetInput) GetDatastreamId() *string { return v.DatastreamId }

// GetMonitorId returns LayeredSettingRecordTargetInput.MonitorId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTargetInput) GetMonitorId() *string { return v.MonitorId }

// GetDatasetId returns LayeredSettingRecordTargetInput.DatasetId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTargetInput) GetDatasetId() *string { return v.DatasetId }

// GetUserId returns LayeredSettingRecordTargetInput.UserId, and is useful for accessing the field via an interface.
func (v *LayeredSettingRecordTargetInput) GetUserId() *types.UserIdScalar { return v.UserId }

type LinkFieldInput struct {
	Column string  `json:"column"`
	Path   *string `json:"path"`
}

// GetColumn returns LinkFieldInput.Column, and is useful for accessing the field via an interface.
func (v *LinkFieldInput) GetColumn() string { return v.Column }

// GetPath returns LinkFieldInput.Path, and is useful for accessing the field via an interface.
func (v *LinkFieldInput) GetPath() *string { return v.Path }

// ModuleVersion includes the GraphQL fields of ModuleVersion requested by the fragment ModuleVersion.
// The GraphQL type's documentation follows.
//
// ModuleVersion represents the metadata for a specific version of an application
type ModuleVersion struct {
	Version string `json:"version"`
}

// GetVersion returns ModuleVersion.Version, and is useful for accessing the field via an interface.
func (v *ModuleVersion) GetVersion() string { return v.Version }

// Monitor includes the GraphQL fields of Monitor requested by the fragment Monitor.
type Monitor struct {
	WorkspaceId string `json:"workspaceId"`
	Id          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	// Static comment for extra information about a monitor available in notification template.
	Comment             *string           `json:"comment"`
	IconUrl             string            `json:"iconUrl"`
	IsTemplate          bool              `json:"isTemplate"`
	Disabled            bool              `json:"disabled"`
	FreshnessGoal       types.Int64Scalar `json:"freshnessGoal"`
	UseDefaultFreshness bool              `json:"useDefaultFreshness"`
	Source              string            `json:"source"`
	Definition          *types.JsonObject `json:"definition"`
	ManagedById         *string           `json:"managedById"`
	// The source stage may be empty, just specifying an input dataset,
	// or it may include actual transform work
	Query            MonitorQueryMultiStageQuery                      `json:"query"`
	Rule             MonitorRule                                      `json:"-"`
	NotificationSpec MonitorNotificationSpecNotificationSpecification `json:"notificationSpec"`
}

// GetWorkspaceId returns Monitor.WorkspaceId, and is useful for accessing the field via an interface.
func (v *Monitor) GetWorkspaceId() string { return v.WorkspaceId }

// GetId returns Monitor.Id, and is useful for accessing the field via an interface.
func (v *Monitor) GetId() string { return v.Id }

// GetName returns Monitor.Name, and is useful for accessing the field via an interface.
func (v *Monitor) GetName() string { return v.Name }

// GetDescription returns Monitor.Description, and is useful for accessing the field via an interface.
func (v *Monitor) GetDescription() string { return v.Description }

// GetComment returns Monitor.Comment, and is useful for accessing the field via an interface.
func (v *Monitor) GetComment() *string { return v.Comment }

// GetIconUrl returns Monitor.IconUrl, and is useful for accessing the field via an interface.
func (v *Monitor) GetIconUrl() string { return v.IconUrl }

// GetIsTemplate returns Monitor.IsTemplate, and is useful for accessing the field via an interface.
func (v *Monitor) GetIsTemplate() bool { return v.IsTemplate }

// GetDisabled returns Monitor.Disabled, and is useful for accessing the field via an interface.
func (v *Monitor) GetDisabled() bool { return v.Disabled }

// GetFreshnessGoal returns Monitor.FreshnessGoal, and is useful for accessing the field via an interface.
func (v *Monitor) GetFreshnessGoal() types.Int64Scalar { return v.FreshnessGoal }

// GetUseDefaultFreshness returns Monitor.UseDefaultFreshness, and is useful for accessing the field via an interface.
func (v *Monitor) GetUseDefaultFreshness() bool { return v.UseDefaultFreshness }

// GetSource returns Monitor.Source, and is useful for accessing the field via an interface.
func (v *Monitor) GetSource() string { return v.Source }

// GetDefinition returns Monitor.Definition, and is useful for accessing the field via an interface.
func (v *Monitor) GetDefinition() *types.JsonObject { return v.Definition }

// GetManagedById returns Monitor.ManagedById, and is useful for accessing the field via an interface.
func (v *Monitor) GetManagedById() *string { return v.ManagedById }

// GetQuery returns Monitor.Query, and is useful for accessing the field via an interface.
func (v *Monitor) GetQuery() MonitorQueryMultiStageQuery { return v.Query }

// GetRule returns Monitor.Rule, and is useful for accessing the field via an interface.
func (v *Monitor) GetRule() MonitorRule { return v.Rule }

// GetNotificationSpec returns Monitor.NotificationSpec, and is useful for accessing the field via an interface.
func (v *Monitor) GetNotificationSpec() MonitorNotificationSpecNotificationSpecification {
	return v.NotificationSpec
}

func (v *Monitor) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*Monitor
		Rule json.RawMessage `json:"rule"`
		graphql.NoUnmarshalJSON
	}
	firstPass.Monitor = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Rule
		src := firstPass.Rule
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalMonitorRule(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal Monitor.Rule: %w", err)
			}
		}
	}
	return nil
}

type __premarshalMonitor struct {
	WorkspaceId string `json:"workspaceId"`

	Id string `json:"id"`

	Name string `json:"name"`

	Description string `json:"description"`

	Comment *string `json:"comment"`

	IconUrl string `json:"iconUrl"`

	IsTemplate bool `json:"isTemplate"`

	Disabled bool `json:"disabled"`

	FreshnessGoal types.Int64Scalar `json:"freshnessGoal"`

	UseDefaultFreshness bool `json:"useDefaultFreshness"`

	Source string `json:"source"`

	Definition *types.JsonObject `json:"definition"`

	ManagedById *string `json:"managedById"`

	Query MonitorQueryMultiStageQuery `json:"query"`

	Rule json.RawMessage `json:"rule"`

	NotificationSpec MonitorNotificationSpecNotificationSpecification `json:"notificationSpec"`
}

func (v *Monitor) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *Monitor) __premarshalJSON() (*__premarshalMonitor, error) {
	var retval __premarshalMonitor

	retval.WorkspaceId = v.WorkspaceId
	retval.Id = v.Id
	retval.Name = v.Name
	retval.Description = v.Description
	retval.Comment = v.Comment
	retval.IconUrl = v.IconUrl
	retval.IsTemplate = v.IsTemplate
	retval.Disabled = v.Disabled
	retval.FreshnessGoal = v.FreshnessGoal
	retval.UseDefaultFreshness = v.UseDefaultFreshness
	retval.Source = v.Source
	retval.Definition = v.Definition
	retval.ManagedById = v.ManagedById
	retval.Query = v.Query
	{

		dst := &retval.Rule
		src := v.Rule
		var err error
		*dst, err = __marshalMonitorRule(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal Monitor.Rule: %w", err)
		}
	}
	retval.NotificationSpec = v.NotificationSpec
	return &retval, nil
}

// MonitorAction includes the GraphQL fields of MonitorAction requested by the fragment MonitorAction.
//
// MonitorAction is implemented by the following types:
// MonitorActionEmailAction
// MonitorActionWebhookAction
// MonitorActionUnknownAction
type MonitorAction interface {
	implementsGraphQLInterfaceMonitorAction()
	// GetId returns the interface-field "id" from its implementation.
	GetId() string
	// GetName returns the interface-field "name" from its implementation.
	GetName() string
	// GetIconUrl returns the interface-field "iconUrl" from its implementation.
	GetIconUrl() string
	// GetDescription returns the interface-field "description" from its implementation.
	GetDescription() string
	// GetWorkspaceId returns the interface-field "workspaceId" from its implementation.
	GetWorkspaceId() string
	// GetRateLimit returns the interface-field "rateLimit" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Rate limit measured in nanoseconds.
	// For email actions the minimum is: 10 / 10min
	// For webhook actions the minimum is: 10 / 1s
	GetRateLimit() types.DurationScalar
	// GetNotifyOnClose returns the interface-field "notifyOnClose" from its implementation.
	GetNotifyOnClose() bool
	// GetIsPrivate returns the interface-field "isPrivate" from its implementation.
	GetIsPrivate() bool
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *MonitorActionEmailAction) implementsGraphQLInterfaceMonitorAction()   {}
func (v *MonitorActionWebhookAction) implementsGraphQLInterfaceMonitorAction() {}
func (v *MonitorActionUnknownAction) implementsGraphQLInterfaceMonitorAction() {}

func __unmarshalMonitorAction(b []byte, v *MonitorAction) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "EmailAction":
		*v = new(MonitorActionEmailAction)
		return json.Unmarshal(b, *v)
	case "WebhookAction":
		*v = new(MonitorActionWebhookAction)
		return json.Unmarshal(b, *v)
	case "UnknownAction":
		*v = new(MonitorActionUnknownAction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing MonitorAction.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for MonitorAction: "%v"`, tn.TypeName)
	}
}

func __marshalMonitorAction(v *MonitorAction) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *MonitorActionEmailAction:
		typename = "EmailAction"

		result := struct {
			TypeName string `json:"__typename"`
			*MonitorActionEmailAction
		}{typename, v}
		return json.Marshal(result)
	case *MonitorActionWebhookAction:
		typename = "WebhookAction"

		result := struct {
			TypeName string `json:"__typename"`
			*MonitorActionWebhookAction
		}{typename, v}
		return json.Marshal(result)
	case *MonitorActionUnknownAction:
		typename = "UnknownAction"

		result := struct {
			TypeName string `json:"__typename"`
			*MonitorActionUnknownAction
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for MonitorAction: "%T"`, v)
	}
}

// MonitorActionAttachment includes the GraphQL fields of MonitorActionAttachment requested by the fragment MonitorActionAttachment.
type MonitorActionAttachment struct {
	MonitorID   string  `json:"monitorID"`
	ActionID    string  `json:"actionID"`
	Id          string  `json:"id"`
	WorkspaceId string  `json:"workspaceId"`
	Name        string  `json:"name"`
	IconUrl     *string `json:"iconUrl"`
	Description *string `json:"description"`
}

// GetMonitorID returns MonitorActionAttachment.MonitorID, and is useful for accessing the field via an interface.
func (v *MonitorActionAttachment) GetMonitorID() string { return v.MonitorID }

// GetActionID returns MonitorActionAttachment.ActionID, and is useful for accessing the field via an interface.
func (v *MonitorActionAttachment) GetActionID() string { return v.ActionID }

// GetId returns MonitorActionAttachment.Id, and is useful for accessing the field via an interface.
func (v *MonitorActionAttachment) GetId() string { return v.Id }

// GetWorkspaceId returns MonitorActionAttachment.WorkspaceId, and is useful for accessing the field via an interface.
func (v *MonitorActionAttachment) GetWorkspaceId() string { return v.WorkspaceId }

// GetName returns MonitorActionAttachment.Name, and is useful for accessing the field via an interface.
func (v *MonitorActionAttachment) GetName() string { return v.Name }

// GetIconUrl returns MonitorActionAttachment.IconUrl, and is useful for accessing the field via an interface.
func (v *MonitorActionAttachment) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns MonitorActionAttachment.Description, and is useful for accessing the field via an interface.
func (v *MonitorActionAttachment) GetDescription() *string { return v.Description }

type MonitorActionAttachmentInput struct {
	MonitorID   string  `json:"monitorID"`
	ActionID    string  `json:"actionID"`
	ChannelID   *string `json:"channelID"`
	WorkspaceId string  `json:"workspaceId"`
	Name        *string `json:"name"`
	IconUrl     *string `json:"iconUrl"`
	Description *string `json:"description"`
	ManagedById *string `json:"managedById"`
	FolderId    *string `json:"folderId"`
}

// GetMonitorID returns MonitorActionAttachmentInput.MonitorID, and is useful for accessing the field via an interface.
func (v *MonitorActionAttachmentInput) GetMonitorID() string { return v.MonitorID }

// GetActionID returns MonitorActionAttachmentInput.ActionID, and is useful for accessing the field via an interface.
func (v *MonitorActionAttachmentInput) GetActionID() string { return v.ActionID }

// GetChannelID returns MonitorActionAttachmentInput.ChannelID, and is useful for accessing the field via an interface.
func (v *MonitorActionAttachmentInput) GetChannelID() *string { return v.ChannelID }

// GetWorkspaceId returns MonitorActionAttachmentInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *MonitorActionAttachmentInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetName returns MonitorActionAttachmentInput.Name, and is useful for accessing the field via an interface.
func (v *MonitorActionAttachmentInput) GetName() *string { return v.Name }

// GetIconUrl returns MonitorActionAttachmentInput.IconUrl, and is useful for accessing the field via an interface.
func (v *MonitorActionAttachmentInput) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns MonitorActionAttachmentInput.Description, and is useful for accessing the field via an interface.
func (v *MonitorActionAttachmentInput) GetDescription() *string { return v.Description }

// GetManagedById returns MonitorActionAttachmentInput.ManagedById, and is useful for accessing the field via an interface.
func (v *MonitorActionAttachmentInput) GetManagedById() *string { return v.ManagedById }

// GetFolderId returns MonitorActionAttachmentInput.FolderId, and is useful for accessing the field via an interface.
func (v *MonitorActionAttachmentInput) GetFolderId() *string { return v.FolderId }

// MonitorAction includes the GraphQL fields of EmailAction requested by the fragment MonitorAction.
type MonitorActionEmailAction struct {
	Id          string `json:"id"`
	Name        string `json:"name"`
	IconUrl     string `json:"iconUrl"`
	Description string `json:"description"`
	WorkspaceId string `json:"workspaceId"`
	// Rate limit measured in nanoseconds.
	// For email actions the minimum is: 10 / 10min
	// For webhook actions the minimum is: 10 / 1s
	RateLimit       types.DurationScalar `json:"rateLimit"`
	NotifyOnClose   bool                 `json:"notifyOnClose"`
	IsPrivate       bool                 `json:"isPrivate"`
	Typename        *string              `json:"__typename"`
	TargetAddresses []string             `json:"targetAddresses"`
	SubjectTemplate string               `json:"subjectTemplate"`
	BodyTemplate    string               `json:"bodyTemplate"`
	IsHtml          bool                 `json:"isHtml"`
}

// GetId returns MonitorActionEmailAction.Id, and is useful for accessing the field via an interface.
func (v *MonitorActionEmailAction) GetId() string { return v.Id }

// GetName returns MonitorActionEmailAction.Name, and is useful for accessing the field via an interface.
func (v *MonitorActionEmailAction) GetName() string { return v.Name }

// GetIconUrl returns MonitorActionEmailAction.IconUrl, and is useful for accessing the field via an interface.
func (v *MonitorActionEmailAction) GetIconUrl() string { return v.IconUrl }

// GetDescription returns MonitorActionEmailAction.Description, and is useful for accessing the field via an interface.
func (v *MonitorActionEmailAction) GetDescription() string { return v.Description }

// GetWorkspaceId returns MonitorActionEmailAction.WorkspaceId, and is useful for accessing the field via an interface.
func (v *MonitorActionEmailAction) GetWorkspaceId() string { return v.WorkspaceId }

// GetRateLimit returns MonitorActionEmailAction.RateLimit, and is useful for accessing the field via an interface.
func (v *MonitorActionEmailAction) GetRateLimit() types.DurationScalar { return v.RateLimit }

// GetNotifyOnClose returns MonitorActionEmailAction.NotifyOnClose, and is useful for accessing the field via an interface.
func (v *MonitorActionEmailAction) GetNotifyOnClose() bool { return v.NotifyOnClose }

// GetIsPrivate returns MonitorActionEmailAction.IsPrivate, and is useful for accessing the field via an interface.
func (v *MonitorActionEmailAction) GetIsPrivate() bool { return v.IsPrivate }

// GetTypename returns MonitorActionEmailAction.Typename, and is useful for accessing the field via an interface.
func (v *MonitorActionEmailAction) GetTypename() *string { return v.Typename }

// GetTargetAddresses returns MonitorActionEmailAction.TargetAddresses, and is useful for accessing the field via an interface.
func (v *MonitorActionEmailAction) GetTargetAddresses() []string { return v.TargetAddresses }

// GetSubjectTemplate returns MonitorActionEmailAction.SubjectTemplate, and is useful for accessing the field via an interface.
func (v *MonitorActionEmailAction) GetSubjectTemplate() string { return v.SubjectTemplate }

// GetBodyTemplate returns MonitorActionEmailAction.BodyTemplate, and is useful for accessing the field via an interface.
func (v *MonitorActionEmailAction) GetBodyTemplate() string { return v.BodyTemplate }

// GetIsHtml returns MonitorActionEmailAction.IsHtml, and is useful for accessing the field via an interface.
func (v *MonitorActionEmailAction) GetIsHtml() bool { return v.IsHtml }

// MonitorActionHeadersWebhookHeader includes the requested fields of the GraphQL type WebhookHeader.
type MonitorActionHeadersWebhookHeader struct {
	Header        string `json:"header"`
	ValueTemplate string `json:"valueTemplate"`
}

// GetHeader returns MonitorActionHeadersWebhookHeader.Header, and is useful for accessing the field via an interface.
func (v *MonitorActionHeadersWebhookHeader) GetHeader() string { return v.Header }

// GetValueTemplate returns MonitorActionHeadersWebhookHeader.ValueTemplate, and is useful for accessing the field via an interface.
func (v *MonitorActionHeadersWebhookHeader) GetValueTemplate() string { return v.ValueTemplate }

type MonitorActionInput struct {
	// Rate limit measured in nanoseconds.
	// For email actions the minimum is: 10 / 10min
	// For webhook actions the minimum is: 10 / 1s
	RateLimit        *types.DurationScalar `json:"rateLimit"`
	NotifyOnClose    bool                  `json:"notifyOnClose"`
	NotifyOnReminder bool                  `json:"notifyOnReminder"`
	IsPrivate        bool                  `json:"isPrivate"`
	Email            *EmailActionInput     `json:"email"`
	Webhook          *WebhookActionInput   `json:"webhook"`
	WorkspaceId      string                `json:"workspaceId"`
	Name             string                `json:"name"`
	IconUrl          *string               `json:"iconUrl"`
	Description      *string               `json:"description"`
	ManagedById      *string               `json:"managedById"`
	FolderId         *string               `json:"folderId"`
}

// GetRateLimit returns MonitorActionInput.RateLimit, and is useful for accessing the field via an interface.
func (v *MonitorActionInput) GetRateLimit() *types.DurationScalar { return v.RateLimit }

// GetNotifyOnClose returns MonitorActionInput.NotifyOnClose, and is useful for accessing the field via an interface.
func (v *MonitorActionInput) GetNotifyOnClose() bool { return v.NotifyOnClose }

// GetNotifyOnReminder returns MonitorActionInput.NotifyOnReminder, and is useful for accessing the field via an interface.
func (v *MonitorActionInput) GetNotifyOnReminder() bool { return v.NotifyOnReminder }

// GetIsPrivate returns MonitorActionInput.IsPrivate, and is useful for accessing the field via an interface.
func (v *MonitorActionInput) GetIsPrivate() bool { return v.IsPrivate }

// GetEmail returns MonitorActionInput.Email, and is useful for accessing the field via an interface.
func (v *MonitorActionInput) GetEmail() *EmailActionInput { return v.Email }

// GetWebhook returns MonitorActionInput.Webhook, and is useful for accessing the field via an interface.
func (v *MonitorActionInput) GetWebhook() *WebhookActionInput { return v.Webhook }

// GetWorkspaceId returns MonitorActionInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *MonitorActionInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetName returns MonitorActionInput.Name, and is useful for accessing the field via an interface.
func (v *MonitorActionInput) GetName() string { return v.Name }

// GetIconUrl returns MonitorActionInput.IconUrl, and is useful for accessing the field via an interface.
func (v *MonitorActionInput) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns MonitorActionInput.Description, and is useful for accessing the field via an interface.
func (v *MonitorActionInput) GetDescription() *string { return v.Description }

// GetManagedById returns MonitorActionInput.ManagedById, and is useful for accessing the field via an interface.
func (v *MonitorActionInput) GetManagedById() *string { return v.ManagedById }

// GetFolderId returns MonitorActionInput.FolderId, and is useful for accessing the field via an interface.
func (v *MonitorActionInput) GetFolderId() *string { return v.FolderId }

// MonitorAction includes the GraphQL fields of UnknownAction requested by the fragment MonitorAction.
type MonitorActionUnknownAction struct {
	Id          string `json:"id"`
	Name        string `json:"name"`
	IconUrl     string `json:"iconUrl"`
	Description string `json:"description"`
	WorkspaceId string `json:"workspaceId"`
	// Rate limit measured in nanoseconds.
	// For email actions the minimum is: 10 / 10min
	// For webhook actions the minimum is: 10 / 1s
	RateLimit     types.DurationScalar `json:"rateLimit"`
	NotifyOnClose bool                 `json:"notifyOnClose"`
	IsPrivate     bool                 `json:"isPrivate"`
	Typename      *string              `json:"__typename"`
}

// GetId returns MonitorActionUnknownAction.Id, and is useful for accessing the field via an interface.
func (v *MonitorActionUnknownAction) GetId() string { return v.Id }

// GetName returns MonitorActionUnknownAction.Name, and is useful for accessing the field via an interface.
func (v *MonitorActionUnknownAction) GetName() string { return v.Name }

// GetIconUrl returns MonitorActionUnknownAction.IconUrl, and is useful for accessing the field via an interface.
func (v *MonitorActionUnknownAction) GetIconUrl() string { return v.IconUrl }

// GetDescription returns MonitorActionUnknownAction.Description, and is useful for accessing the field via an interface.
func (v *MonitorActionUnknownAction) GetDescription() string { return v.Description }

// GetWorkspaceId returns MonitorActionUnknownAction.WorkspaceId, and is useful for accessing the field via an interface.
func (v *MonitorActionUnknownAction) GetWorkspaceId() string { return v.WorkspaceId }

// GetRateLimit returns MonitorActionUnknownAction.RateLimit, and is useful for accessing the field via an interface.
func (v *MonitorActionUnknownAction) GetRateLimit() types.DurationScalar { return v.RateLimit }

// GetNotifyOnClose returns MonitorActionUnknownAction.NotifyOnClose, and is useful for accessing the field via an interface.
func (v *MonitorActionUnknownAction) GetNotifyOnClose() bool { return v.NotifyOnClose }

// GetIsPrivate returns MonitorActionUnknownAction.IsPrivate, and is useful for accessing the field via an interface.
func (v *MonitorActionUnknownAction) GetIsPrivate() bool { return v.IsPrivate }

// GetTypename returns MonitorActionUnknownAction.Typename, and is useful for accessing the field via an interface.
func (v *MonitorActionUnknownAction) GetTypename() *string { return v.Typename }

// MonitorAction includes the GraphQL fields of WebhookAction requested by the fragment MonitorAction.
type MonitorActionWebhookAction struct {
	Id          string `json:"id"`
	Name        string `json:"name"`
	IconUrl     string `json:"iconUrl"`
	Description string `json:"description"`
	WorkspaceId string `json:"workspaceId"`
	// Rate limit measured in nanoseconds.
	// For email actions the minimum is: 10 / 10min
	// For webhook actions the minimum is: 10 / 1s
	RateLimit     types.DurationScalar                `json:"rateLimit"`
	NotifyOnClose bool                                `json:"notifyOnClose"`
	IsPrivate     bool                                `json:"isPrivate"`
	Typename      *string                             `json:"__typename"`
	UrlTemplate   string                              `json:"urlTemplate"`
	Method        string                              `json:"method"`
	Headers       []MonitorActionHeadersWebhookHeader `json:"headers"`
	BodyTemplate  string                              `json:"bodyTemplate"`
}

// GetId returns MonitorActionWebhookAction.Id, and is useful for accessing the field via an interface.
func (v *MonitorActionWebhookAction) GetId() string { return v.Id }

// GetName returns MonitorActionWebhookAction.Name, and is useful for accessing the field via an interface.
func (v *MonitorActionWebhookAction) GetName() string { return v.Name }

// GetIconUrl returns MonitorActionWebhookAction.IconUrl, and is useful for accessing the field via an interface.
func (v *MonitorActionWebhookAction) GetIconUrl() string { return v.IconUrl }

// GetDescription returns MonitorActionWebhookAction.Description, and is useful for accessing the field via an interface.
func (v *MonitorActionWebhookAction) GetDescription() string { return v.Description }

// GetWorkspaceId returns MonitorActionWebhookAction.WorkspaceId, and is useful for accessing the field via an interface.
func (v *MonitorActionWebhookAction) GetWorkspaceId() string { return v.WorkspaceId }

// GetRateLimit returns MonitorActionWebhookAction.RateLimit, and is useful for accessing the field via an interface.
func (v *MonitorActionWebhookAction) GetRateLimit() types.DurationScalar { return v.RateLimit }

// GetNotifyOnClose returns MonitorActionWebhookAction.NotifyOnClose, and is useful for accessing the field via an interface.
func (v *MonitorActionWebhookAction) GetNotifyOnClose() bool { return v.NotifyOnClose }

// GetIsPrivate returns MonitorActionWebhookAction.IsPrivate, and is useful for accessing the field via an interface.
func (v *MonitorActionWebhookAction) GetIsPrivate() bool { return v.IsPrivate }

// GetTypename returns MonitorActionWebhookAction.Typename, and is useful for accessing the field via an interface.
func (v *MonitorActionWebhookAction) GetTypename() *string { return v.Typename }

// GetUrlTemplate returns MonitorActionWebhookAction.UrlTemplate, and is useful for accessing the field via an interface.
func (v *MonitorActionWebhookAction) GetUrlTemplate() string { return v.UrlTemplate }

// GetMethod returns MonitorActionWebhookAction.Method, and is useful for accessing the field via an interface.
func (v *MonitorActionWebhookAction) GetMethod() string { return v.Method }

// GetHeaders returns MonitorActionWebhookAction.Headers, and is useful for accessing the field via an interface.
func (v *MonitorActionWebhookAction) GetHeaders() []MonitorActionHeadersWebhookHeader {
	return v.Headers
}

// GetBodyTemplate returns MonitorActionWebhookAction.BodyTemplate, and is useful for accessing the field via an interface.
func (v *MonitorActionWebhookAction) GetBodyTemplate() string { return v.BodyTemplate }

type MonitorGroupByColumnPathInput struct {
	Column string `json:"column"`
	Path   string `json:"path"`
}

// GetColumn returns MonitorGroupByColumnPathInput.Column, and is useful for accessing the field via an interface.
func (v *MonitorGroupByColumnPathInput) GetColumn() string { return v.Column }

// GetPath returns MonitorGroupByColumnPathInput.Path, and is useful for accessing the field via an interface.
func (v *MonitorGroupByColumnPathInput) GetPath() string { return v.Path }

type MonitorGroupInfoInput struct {
	// GroupBy:
	// ┌───────────┬─────────┬──────────────────────────┬─────────────┬────────────┐
	// │GroupBy    │Resource │Link                      │Value column │Column Path │
	// ├───────────┼─────────┼──────────────────────────┼─────────────┼────────────┤
	// │groupName  │Empty    │Non-empty (FK label)      │Empty        │Empty       │
	// ├───────────┼─────────┼──────────────────────────┼─────────────┼────────────┤
	// │columns    │Empty    │Non-empty (FK Src fields) │Non-empty    │Empty       │
	// ├───────────┼─────────┼──────────────────────────┼─────────────┼────────────┤
	// │columnPath │Nil      │Nil                       │Nil          │Non-nil     │
	// └───────────┴─────────┴──────────────────────────┴─────────────┴────────────┘
	Columns    []string                       `json:"columns"`
	GroupName  string                         `json:"groupName"`
	ColumnPath *MonitorGroupByColumnPathInput `json:"columnPath"`
}

// GetColumns returns MonitorGroupInfoInput.Columns, and is useful for accessing the field via an interface.
func (v *MonitorGroupInfoInput) GetColumns() []string { return v.Columns }

// GetGroupName returns MonitorGroupInfoInput.GroupName, and is useful for accessing the field via an interface.
func (v *MonitorGroupInfoInput) GetGroupName() string { return v.GroupName }

// GetColumnPath returns MonitorGroupInfoInput.ColumnPath, and is useful for accessing the field via an interface.
func (v *MonitorGroupInfoInput) GetColumnPath() *MonitorGroupByColumnPathInput { return v.ColumnPath }

type MonitorGrouping string

const (
	MonitorGroupingNone       MonitorGrouping = "None"
	MonitorGroupingValue      MonitorGrouping = "Value"
	MonitorGroupingResource   MonitorGrouping = "Resource"
	MonitorGroupingLinktarget MonitorGrouping = "LinkTarget"
)

type MonitorInput struct {
	Name        *string `json:"name"`
	IconUrl     *string `json:"iconUrl"`
	Description *string `json:"description"`
	// Static comment for extra information about a monitor available in notification template.
	Comment *string `json:"comment"`
	// Examples - "terraform", "webui".
	Source *string `json:"source"`
	// Only when the monitor is updated.
	OverwriteSource *bool `json:"overwriteSource,omitempty"`
	// The optional id of the object that owns the monitor. Ex: the id of an app that installs the monitor.
	ManagedById          *string `json:"managedById"`
	Disabled             *bool   `json:"disabled"`
	AccelerationDisabled *bool   `json:"accelerationDisabled,omitempty"`
	IsTemplate           *bool   `json:"isTemplate"`
	// Similar to dataset freshness goal, this is in Nanoseconds when received from UI.
	// Only changes setting if useDefaultFreshness is false
	FreshnessGoal *types.Int64Scalar `json:"freshnessGoal,omitempty"`
	// Defaults to true on creation if not specified
	UseDefaultFreshness *bool                           `json:"useDefaultFreshness"`
	Query               *MultiStageQueryInput           `json:"query"`
	Definition          *types.JsonObject               `json:"definition"`
	Rule                *MonitorRuleInput               `json:"rule"`
	NotificationSpec    *NotificationSpecificationInput `json:"notificationSpec"`
	Channels            []string                        `json:"channels"`
}

// GetName returns MonitorInput.Name, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetName() *string { return v.Name }

// GetIconUrl returns MonitorInput.IconUrl, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns MonitorInput.Description, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetDescription() *string { return v.Description }

// GetComment returns MonitorInput.Comment, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetComment() *string { return v.Comment }

// GetSource returns MonitorInput.Source, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetSource() *string { return v.Source }

// GetOverwriteSource returns MonitorInput.OverwriteSource, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetOverwriteSource() *bool { return v.OverwriteSource }

// GetManagedById returns MonitorInput.ManagedById, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetManagedById() *string { return v.ManagedById }

// GetDisabled returns MonitorInput.Disabled, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetDisabled() *bool { return v.Disabled }

// GetAccelerationDisabled returns MonitorInput.AccelerationDisabled, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetAccelerationDisabled() *bool { return v.AccelerationDisabled }

// GetIsTemplate returns MonitorInput.IsTemplate, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetIsTemplate() *bool { return v.IsTemplate }

// GetFreshnessGoal returns MonitorInput.FreshnessGoal, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetFreshnessGoal() *types.Int64Scalar { return v.FreshnessGoal }

// GetUseDefaultFreshness returns MonitorInput.UseDefaultFreshness, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetUseDefaultFreshness() *bool { return v.UseDefaultFreshness }

// GetQuery returns MonitorInput.Query, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetQuery() *MultiStageQueryInput { return v.Query }

// GetDefinition returns MonitorInput.Definition, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetDefinition() *types.JsonObject { return v.Definition }

// GetRule returns MonitorInput.Rule, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetRule() *MonitorRuleInput { return v.Rule }

// GetNotificationSpec returns MonitorInput.NotificationSpec, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetNotificationSpec() *NotificationSpecificationInput {
	return v.NotificationSpec
}

// GetChannels returns MonitorInput.Channels, and is useful for accessing the field via an interface.
func (v *MonitorInput) GetChannels() []string { return v.Channels }

// MonitorNotificationSpecNotificationSpecification includes the requested fields of the GraphQL type NotificationSpecification.
type MonitorNotificationSpecNotificationSpecification struct {
	// should these go in each applicable Rule instead?
	Merge             *NotificationMerge     `json:"merge"`
	Importance        NotificationImportance `json:"importance"`
	NotifyOnReminder  *bool                  `json:"notifyOnReminder"`
	ReminderFrequency types.DurationScalar   `json:"reminderFrequency"`
	NotifyOnClose     *bool                  `json:"notifyOnClose"`
}

// GetMerge returns MonitorNotificationSpecNotificationSpecification.Merge, and is useful for accessing the field via an interface.
func (v *MonitorNotificationSpecNotificationSpecification) GetMerge() *NotificationMerge {
	return v.Merge
}

// GetImportance returns MonitorNotificationSpecNotificationSpecification.Importance, and is useful for accessing the field via an interface.
func (v *MonitorNotificationSpecNotificationSpecification) GetImportance() NotificationImportance {
	return v.Importance
}

// GetNotifyOnReminder returns MonitorNotificationSpecNotificationSpecification.NotifyOnReminder, and is useful for accessing the field via an interface.
func (v *MonitorNotificationSpecNotificationSpecification) GetNotifyOnReminder() *bool {
	return v.NotifyOnReminder
}

// GetReminderFrequency returns MonitorNotificationSpecNotificationSpecification.ReminderFrequency, and is useful for accessing the field via an interface.
func (v *MonitorNotificationSpecNotificationSpecification) GetReminderFrequency() types.DurationScalar {
	return v.ReminderFrequency
}

// GetNotifyOnClose returns MonitorNotificationSpecNotificationSpecification.NotifyOnClose, and is useful for accessing the field via an interface.
func (v *MonitorNotificationSpecNotificationSpecification) GetNotifyOnClose() *bool {
	return v.NotifyOnClose
}

// MonitorQueryMultiStageQuery includes the requested fields of the GraphQL type MultiStageQuery.
type MonitorQueryMultiStageQuery struct {
	OutputStage string       `json:"outputStage"`
	Stages      []StageQuery `json:"stages"`
}

// GetOutputStage returns MonitorQueryMultiStageQuery.OutputStage, and is useful for accessing the field via an interface.
func (v *MonitorQueryMultiStageQuery) GetOutputStage() string { return v.OutputStage }

// GetStages returns MonitorQueryMultiStageQuery.Stages, and is useful for accessing the field via an interface.
func (v *MonitorQueryMultiStageQuery) GetStages() []StageQuery { return v.Stages }

// MonitorRule includes the requested fields of the GraphQL interface MonitorRule.
//
// MonitorRule is implemented by the following types:
// MonitorRuleMonitorRuleChange
// MonitorRuleMonitorRuleCount
// MonitorRuleMonitorRuleFacet
// MonitorRuleMonitorRuleLog
// MonitorRuleMonitorRulePromote
// MonitorRuleMonitorRuleThreshold
type MonitorRule interface {
	implementsGraphQLInterfaceMonitorRule()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetSourceColumn returns the interface-field "sourceColumn" from its implementation.
	GetSourceColumn() string
	// GetGroupByGroups returns the interface-field "groupByGroups" from its implementation.
	GetGroupByGroups() []MonitorRuleGroupByGroupsMonitorGroupInfo
}

func (v *MonitorRuleMonitorRuleChange) implementsGraphQLInterfaceMonitorRule()    {}
func (v *MonitorRuleMonitorRuleCount) implementsGraphQLInterfaceMonitorRule()     {}
func (v *MonitorRuleMonitorRuleFacet) implementsGraphQLInterfaceMonitorRule()     {}
func (v *MonitorRuleMonitorRuleLog) implementsGraphQLInterfaceMonitorRule()       {}
func (v *MonitorRuleMonitorRulePromote) implementsGraphQLInterfaceMonitorRule()   {}
func (v *MonitorRuleMonitorRuleThreshold) implementsGraphQLInterfaceMonitorRule() {}

func __unmarshalMonitorRule(b []byte, v *MonitorRule) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "MonitorRuleChange":
		*v = new(MonitorRuleMonitorRuleChange)
		return json.Unmarshal(b, *v)
	case "MonitorRuleCount":
		*v = new(MonitorRuleMonitorRuleCount)
		return json.Unmarshal(b, *v)
	case "MonitorRuleFacet":
		*v = new(MonitorRuleMonitorRuleFacet)
		return json.Unmarshal(b, *v)
	case "MonitorRuleLog":
		*v = new(MonitorRuleMonitorRuleLog)
		return json.Unmarshal(b, *v)
	case "MonitorRulePromote":
		*v = new(MonitorRuleMonitorRulePromote)
		return json.Unmarshal(b, *v)
	case "MonitorRuleThreshold":
		*v = new(MonitorRuleMonitorRuleThreshold)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing MonitorRule.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for MonitorRule: "%v"`, tn.TypeName)
	}
}

func __marshalMonitorRule(v *MonitorRule) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *MonitorRuleMonitorRuleChange:
		typename = "MonitorRuleChange"

		result := struct {
			TypeName string `json:"__typename"`
			*MonitorRuleMonitorRuleChange
		}{typename, v}
		return json.Marshal(result)
	case *MonitorRuleMonitorRuleCount:
		typename = "MonitorRuleCount"

		result := struct {
			TypeName string `json:"__typename"`
			*MonitorRuleMonitorRuleCount
		}{typename, v}
		return json.Marshal(result)
	case *MonitorRuleMonitorRuleFacet:
		typename = "MonitorRuleFacet"

		result := struct {
			TypeName string `json:"__typename"`
			*MonitorRuleMonitorRuleFacet
		}{typename, v}
		return json.Marshal(result)
	case *MonitorRuleMonitorRuleLog:
		typename = "MonitorRuleLog"

		result := struct {
			TypeName string `json:"__typename"`
			*MonitorRuleMonitorRuleLog
		}{typename, v}
		return json.Marshal(result)
	case *MonitorRuleMonitorRulePromote:
		typename = "MonitorRulePromote"

		result := struct {
			TypeName string `json:"__typename"`
			*MonitorRuleMonitorRulePromote
		}{typename, v}
		return json.Marshal(result)
	case *MonitorRuleMonitorRuleThreshold:
		typename = "MonitorRuleThreshold"

		result := struct {
			TypeName string `json:"__typename"`
			*MonitorRuleMonitorRuleThreshold
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for MonitorRule: "%T"`, v)
	}
}

type MonitorRuleChangeInput struct {
	ChangeType      *ChangeType      `json:"changeType"`
	CompareFunction *CompareFunction `json:"compareFunction"`
	// For Relative ChangeType, the value is a multiple -- 0.3 means 30% change
	CompareValues     []types.NumberScalar `json:"compareValues"`
	AggregateFunction *AggregateFunction   `json:"aggregateFunction"`
	// The comparison time is established as
	// from: now - lookbackTime - baselineTime
	// to:   now - lookbackTime
	// The triggering time is established as
	// from: now - lookbackTime
	// to:   now
	// (These may end up being approximate, depending on transform scheduling and such)
	LookbackTime *types.DurationScalar `json:"lookbackTime"`
	BaselineTime *types.DurationScalar `json:"baselineTime"`
}

// GetChangeType returns MonitorRuleChangeInput.ChangeType, and is useful for accessing the field via an interface.
func (v *MonitorRuleChangeInput) GetChangeType() *ChangeType { return v.ChangeType }

// GetCompareFunction returns MonitorRuleChangeInput.CompareFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleChangeInput) GetCompareFunction() *CompareFunction { return v.CompareFunction }

// GetCompareValues returns MonitorRuleChangeInput.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorRuleChangeInput) GetCompareValues() []types.NumberScalar { return v.CompareValues }

// GetAggregateFunction returns MonitorRuleChangeInput.AggregateFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleChangeInput) GetAggregateFunction() *AggregateFunction {
	return v.AggregateFunction
}

// GetLookbackTime returns MonitorRuleChangeInput.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleChangeInput) GetLookbackTime() *types.DurationScalar { return v.LookbackTime }

// GetBaselineTime returns MonitorRuleChangeInput.BaselineTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleChangeInput) GetBaselineTime() *types.DurationScalar { return v.BaselineTime }

type MonitorRuleCountInput struct {
	CompareFunction *CompareFunction      `json:"compareFunction"`
	CompareValues   []types.NumberScalar  `json:"compareValues"`
	LookbackTime    *types.DurationScalar `json:"lookbackTime"`
}

// GetCompareFunction returns MonitorRuleCountInput.CompareFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleCountInput) GetCompareFunction() *CompareFunction { return v.CompareFunction }

// GetCompareValues returns MonitorRuleCountInput.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorRuleCountInput) GetCompareValues() []types.NumberScalar { return v.CompareValues }

// GetLookbackTime returns MonitorRuleCountInput.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleCountInput) GetLookbackTime() *types.DurationScalar { return v.LookbackTime }

type MonitorRuleFacetInput struct {
	FacetFunction *FacetFunction        `json:"facetFunction"`
	FacetValues   []string              `json:"facetValues"`
	TimeFunction  *TimeFunction         `json:"timeFunction"`
	TimeValue     *types.NumberScalar   `json:"timeValue"`
	LookbackTime  *types.DurationScalar `json:"lookbackTime"`
}

// GetFacetFunction returns MonitorRuleFacetInput.FacetFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleFacetInput) GetFacetFunction() *FacetFunction { return v.FacetFunction }

// GetFacetValues returns MonitorRuleFacetInput.FacetValues, and is useful for accessing the field via an interface.
func (v *MonitorRuleFacetInput) GetFacetValues() []string { return v.FacetValues }

// GetTimeFunction returns MonitorRuleFacetInput.TimeFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleFacetInput) GetTimeFunction() *TimeFunction { return v.TimeFunction }

// GetTimeValue returns MonitorRuleFacetInput.TimeValue, and is useful for accessing the field via an interface.
func (v *MonitorRuleFacetInput) GetTimeValue() *types.NumberScalar { return v.TimeValue }

// GetLookbackTime returns MonitorRuleFacetInput.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleFacetInput) GetLookbackTime() *types.DurationScalar { return v.LookbackTime }

// MonitorRuleGroupByGroupsMonitorGroupInfo includes the requested fields of the GraphQL type MonitorGroupInfo.
type MonitorRuleGroupByGroupsMonitorGroupInfo struct {
	GroupName string `json:"groupName"`
	// GroupBy:
	// ┌───────────┬─────────┬──────────────────────────┬─────────────┬────────────┐
	// │GroupBy    │Resource │Link                      │Value column │Column Path │
	// ├───────────┼─────────┼──────────────────────────┼─────────────┼────────────┤
	// │groupName  │Empty    │Non-empty (FK label)      │Empty        │Empty       │
	// ├───────────┼─────────┼──────────────────────────┼─────────────┼────────────┤
	// │columns    │Empty    │Non-empty (FK Src fields) │Non-empty    │Empty       │
	// ├───────────┼─────────┼──────────────────────────┼─────────────┼────────────┤
	// │columnPath │Nil      │Nil                       │Nil          │Non-nil     │
	// └───────────┴─────────┴──────────────────────────┴─────────────┴────────────┘
	Columns []string `json:"columns"`
}

// GetGroupName returns MonitorRuleGroupByGroupsMonitorGroupInfo.GroupName, and is useful for accessing the field via an interface.
func (v *MonitorRuleGroupByGroupsMonitorGroupInfo) GetGroupName() string { return v.GroupName }

// GetColumns returns MonitorRuleGroupByGroupsMonitorGroupInfo.Columns, and is useful for accessing the field via an interface.
func (v *MonitorRuleGroupByGroupsMonitorGroupInfo) GetColumns() []string { return v.Columns }

type MonitorRuleInput struct {
	Layout       *types.JsonObject `json:"layout"`
	SourceColumn *string           `json:"sourceColumn"`
	// Takes precedence over GroupByColumns -- will replace contents of GroupByColumns
	// Specify value columns with an MonitorGroupInfo with a nil datasetId
	GroupByGroups     []MonitorGroupInfoInput `json:"groupByGroups"`
	GroupBy           *MonitorGrouping        `json:"groupBy"`
	GroupByColumns    []string                `json:"groupByColumns"`
	GroupByDatasetIds []string                `json:"groupByDatasetIds"`
	// exactly one of these should be used
	ChangeRule    *MonitorRuleChangeInput    `json:"changeRule"`
	CountRule     *MonitorRuleCountInput     `json:"countRule"`
	FacetRule     *MonitorRuleFacetInput     `json:"facetRule"`
	ThresholdRule *MonitorRuleThresholdInput `json:"thresholdRule"`
	LogRule       *MonitorRuleLogInput       `json:"logRule"`
	PromoteRule   *MonitorRulePromoteInput   `json:"promoteRule"`
}

// GetLayout returns MonitorRuleInput.Layout, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetLayout() *types.JsonObject { return v.Layout }

// GetSourceColumn returns MonitorRuleInput.SourceColumn, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetSourceColumn() *string { return v.SourceColumn }

// GetGroupByGroups returns MonitorRuleInput.GroupByGroups, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetGroupByGroups() []MonitorGroupInfoInput { return v.GroupByGroups }

// GetGroupBy returns MonitorRuleInput.GroupBy, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetGroupBy() *MonitorGrouping { return v.GroupBy }

// GetGroupByColumns returns MonitorRuleInput.GroupByColumns, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetGroupByColumns() []string { return v.GroupByColumns }

// GetGroupByDatasetIds returns MonitorRuleInput.GroupByDatasetIds, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetGroupByDatasetIds() []string { return v.GroupByDatasetIds }

// GetChangeRule returns MonitorRuleInput.ChangeRule, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetChangeRule() *MonitorRuleChangeInput { return v.ChangeRule }

// GetCountRule returns MonitorRuleInput.CountRule, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetCountRule() *MonitorRuleCountInput { return v.CountRule }

// GetFacetRule returns MonitorRuleInput.FacetRule, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetFacetRule() *MonitorRuleFacetInput { return v.FacetRule }

// GetThresholdRule returns MonitorRuleInput.ThresholdRule, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetThresholdRule() *MonitorRuleThresholdInput { return v.ThresholdRule }

// GetLogRule returns MonitorRuleInput.LogRule, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetLogRule() *MonitorRuleLogInput { return v.LogRule }

// GetPromoteRule returns MonitorRuleInput.PromoteRule, and is useful for accessing the field via an interface.
func (v *MonitorRuleInput) GetPromoteRule() *MonitorRulePromoteInput { return v.PromoteRule }

type MonitorRuleLogInput struct {
	CompareFunction    *CompareFunction      `json:"compareFunction"`
	CompareValues      []types.NumberScalar  `json:"compareValues"`
	LookbackTime       *types.DurationScalar `json:"lookbackTime"`
	ExpressionSummary  *string               `json:"expressionSummary"`
	LogStageId         *string               `json:"logStageId"`
	SourceLogDatasetId *string               `json:"sourceLogDatasetId"`
}

// GetCompareFunction returns MonitorRuleLogInput.CompareFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleLogInput) GetCompareFunction() *CompareFunction { return v.CompareFunction }

// GetCompareValues returns MonitorRuleLogInput.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorRuleLogInput) GetCompareValues() []types.NumberScalar { return v.CompareValues }

// GetLookbackTime returns MonitorRuleLogInput.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleLogInput) GetLookbackTime() *types.DurationScalar { return v.LookbackTime }

// GetExpressionSummary returns MonitorRuleLogInput.ExpressionSummary, and is useful for accessing the field via an interface.
func (v *MonitorRuleLogInput) GetExpressionSummary() *string { return v.ExpressionSummary }

// GetLogStageId returns MonitorRuleLogInput.LogStageId, and is useful for accessing the field via an interface.
func (v *MonitorRuleLogInput) GetLogStageId() *string { return v.LogStageId }

// GetSourceLogDatasetId returns MonitorRuleLogInput.SourceLogDatasetId, and is useful for accessing the field via an interface.
func (v *MonitorRuleLogInput) GetSourceLogDatasetId() *string { return v.SourceLogDatasetId }

// MonitorRuleMonitorRuleChange includes the requested fields of the GraphQL type MonitorRuleChange.
type MonitorRuleMonitorRuleChange struct {
	Typename        *string                                    `json:"__typename"`
	SourceColumn    string                                     `json:"sourceColumn"`
	GroupByGroups   []MonitorRuleGroupByGroupsMonitorGroupInfo `json:"groupByGroups"`
	ChangeType      ChangeType                                 `json:"changeType"`
	CompareFunction CompareFunction                            `json:"compareFunction"`
	// For Relative ChangeType, the value is a multiple -- 0.3 means 30% change
	CompareValues     []types.NumberScalar `json:"compareValues"`
	AggregateFunction AggregateFunction    `json:"aggregateFunction"`
	// The comparison time is established as
	// from: now - lookbackTime - baselineTime
	// to:   now - lookbackTime
	// The triggering time is established as
	// from: now - lookbackTime
	// to:   now
	// (These may end up being approximate, depending on transform scheduling and such)
	LookbackTime types.DurationScalar `json:"lookbackTime"`
	BaselineTime types.DurationScalar `json:"baselineTime"`
}

// GetTypename returns MonitorRuleMonitorRuleChange.Typename, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleChange) GetTypename() *string { return v.Typename }

// GetSourceColumn returns MonitorRuleMonitorRuleChange.SourceColumn, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleChange) GetSourceColumn() string { return v.SourceColumn }

// GetGroupByGroups returns MonitorRuleMonitorRuleChange.GroupByGroups, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleChange) GetGroupByGroups() []MonitorRuleGroupByGroupsMonitorGroupInfo {
	return v.GroupByGroups
}

// GetChangeType returns MonitorRuleMonitorRuleChange.ChangeType, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleChange) GetChangeType() ChangeType { return v.ChangeType }

// GetCompareFunction returns MonitorRuleMonitorRuleChange.CompareFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleChange) GetCompareFunction() CompareFunction { return v.CompareFunction }

// GetCompareValues returns MonitorRuleMonitorRuleChange.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleChange) GetCompareValues() []types.NumberScalar {
	return v.CompareValues
}

// GetAggregateFunction returns MonitorRuleMonitorRuleChange.AggregateFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleChange) GetAggregateFunction() AggregateFunction {
	return v.AggregateFunction
}

// GetLookbackTime returns MonitorRuleMonitorRuleChange.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleChange) GetLookbackTime() types.DurationScalar { return v.LookbackTime }

// GetBaselineTime returns MonitorRuleMonitorRuleChange.BaselineTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleChange) GetBaselineTime() types.DurationScalar { return v.BaselineTime }

// MonitorRuleMonitorRuleCount includes the requested fields of the GraphQL type MonitorRuleCount.
type MonitorRuleMonitorRuleCount struct {
	Typename        *string                                    `json:"__typename"`
	SourceColumn    string                                     `json:"sourceColumn"`
	GroupByGroups   []MonitorRuleGroupByGroupsMonitorGroupInfo `json:"groupByGroups"`
	CompareFunction CompareFunction                            `json:"compareFunction"`
	CompareValues   []types.NumberScalar                       `json:"compareValues"`
	LookbackTime    types.DurationScalar                       `json:"lookbackTime"`
}

// GetTypename returns MonitorRuleMonitorRuleCount.Typename, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleCount) GetTypename() *string { return v.Typename }

// GetSourceColumn returns MonitorRuleMonitorRuleCount.SourceColumn, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleCount) GetSourceColumn() string { return v.SourceColumn }

// GetGroupByGroups returns MonitorRuleMonitorRuleCount.GroupByGroups, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleCount) GetGroupByGroups() []MonitorRuleGroupByGroupsMonitorGroupInfo {
	return v.GroupByGroups
}

// GetCompareFunction returns MonitorRuleMonitorRuleCount.CompareFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleCount) GetCompareFunction() CompareFunction { return v.CompareFunction }

// GetCompareValues returns MonitorRuleMonitorRuleCount.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleCount) GetCompareValues() []types.NumberScalar { return v.CompareValues }

// GetLookbackTime returns MonitorRuleMonitorRuleCount.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleCount) GetLookbackTime() types.DurationScalar { return v.LookbackTime }

// MonitorRuleMonitorRuleFacet includes the requested fields of the GraphQL type MonitorRuleFacet.
type MonitorRuleMonitorRuleFacet struct {
	Typename      *string                                    `json:"__typename"`
	SourceColumn  string                                     `json:"sourceColumn"`
	GroupByGroups []MonitorRuleGroupByGroupsMonitorGroupInfo `json:"groupByGroups"`
	FacetFunction FacetFunction                              `json:"facetFunction"`
	FacetValues   []string                                   `json:"facetValues"`
	TimeFunction  TimeFunction                               `json:"timeFunction"`
	// for example, "50" for "more than 50% of the time"
	TimeValue    *types.NumberScalar  `json:"timeValue"`
	LookbackTime types.DurationScalar `json:"lookbackTime"`
}

// GetTypename returns MonitorRuleMonitorRuleFacet.Typename, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleFacet) GetTypename() *string { return v.Typename }

// GetSourceColumn returns MonitorRuleMonitorRuleFacet.SourceColumn, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleFacet) GetSourceColumn() string { return v.SourceColumn }

// GetGroupByGroups returns MonitorRuleMonitorRuleFacet.GroupByGroups, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleFacet) GetGroupByGroups() []MonitorRuleGroupByGroupsMonitorGroupInfo {
	return v.GroupByGroups
}

// GetFacetFunction returns MonitorRuleMonitorRuleFacet.FacetFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleFacet) GetFacetFunction() FacetFunction { return v.FacetFunction }

// GetFacetValues returns MonitorRuleMonitorRuleFacet.FacetValues, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleFacet) GetFacetValues() []string { return v.FacetValues }

// GetTimeFunction returns MonitorRuleMonitorRuleFacet.TimeFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleFacet) GetTimeFunction() TimeFunction { return v.TimeFunction }

// GetTimeValue returns MonitorRuleMonitorRuleFacet.TimeValue, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleFacet) GetTimeValue() *types.NumberScalar { return v.TimeValue }

// GetLookbackTime returns MonitorRuleMonitorRuleFacet.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleFacet) GetLookbackTime() types.DurationScalar { return v.LookbackTime }

// MonitorRuleMonitorRuleLog includes the requested fields of the GraphQL type MonitorRuleLog.
type MonitorRuleMonitorRuleLog struct {
	Typename           *string                                    `json:"__typename"`
	SourceColumn       string                                     `json:"sourceColumn"`
	GroupByGroups      []MonitorRuleGroupByGroupsMonitorGroupInfo `json:"groupByGroups"`
	CompareFunction    CompareFunction                            `json:"compareFunction"`
	CompareValues      []types.NumberScalar                       `json:"compareValues"`
	LookbackTime       types.DurationScalar                       `json:"lookbackTime"`
	ExpressionSummary  string                                     `json:"expressionSummary"`
	LogStageId         string                                     `json:"logStageId"`
	SourceLogDatasetId *string                                    `json:"sourceLogDatasetId"`
}

// GetTypename returns MonitorRuleMonitorRuleLog.Typename, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleLog) GetTypename() *string { return v.Typename }

// GetSourceColumn returns MonitorRuleMonitorRuleLog.SourceColumn, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleLog) GetSourceColumn() string { return v.SourceColumn }

// GetGroupByGroups returns MonitorRuleMonitorRuleLog.GroupByGroups, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleLog) GetGroupByGroups() []MonitorRuleGroupByGroupsMonitorGroupInfo {
	return v.GroupByGroups
}

// GetCompareFunction returns MonitorRuleMonitorRuleLog.CompareFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleLog) GetCompareFunction() CompareFunction { return v.CompareFunction }

// GetCompareValues returns MonitorRuleMonitorRuleLog.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleLog) GetCompareValues() []types.NumberScalar { return v.CompareValues }

// GetLookbackTime returns MonitorRuleMonitorRuleLog.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleLog) GetLookbackTime() types.DurationScalar { return v.LookbackTime }

// GetExpressionSummary returns MonitorRuleMonitorRuleLog.ExpressionSummary, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleLog) GetExpressionSummary() string { return v.ExpressionSummary }

// GetLogStageId returns MonitorRuleMonitorRuleLog.LogStageId, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleLog) GetLogStageId() string { return v.LogStageId }

// GetSourceLogDatasetId returns MonitorRuleMonitorRuleLog.SourceLogDatasetId, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleLog) GetSourceLogDatasetId() *string { return v.SourceLogDatasetId }

// MonitorRuleMonitorRulePromote includes the requested fields of the GraphQL type MonitorRulePromote.
type MonitorRuleMonitorRulePromote struct {
	Typename         *string                                    `json:"__typename"`
	SourceColumn     string                                     `json:"sourceColumn"`
	GroupByGroups    []MonitorRuleGroupByGroupsMonitorGroupInfo `json:"groupByGroups"`
	KindField        *string                                    `json:"kindField"`
	DescriptionField *string                                    `json:"descriptionField"`
	PrimaryKey       []string                                   `json:"primaryKey"`
}

// GetTypename returns MonitorRuleMonitorRulePromote.Typename, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRulePromote) GetTypename() *string { return v.Typename }

// GetSourceColumn returns MonitorRuleMonitorRulePromote.SourceColumn, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRulePromote) GetSourceColumn() string { return v.SourceColumn }

// GetGroupByGroups returns MonitorRuleMonitorRulePromote.GroupByGroups, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRulePromote) GetGroupByGroups() []MonitorRuleGroupByGroupsMonitorGroupInfo {
	return v.GroupByGroups
}

// GetKindField returns MonitorRuleMonitorRulePromote.KindField, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRulePromote) GetKindField() *string { return v.KindField }

// GetDescriptionField returns MonitorRuleMonitorRulePromote.DescriptionField, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRulePromote) GetDescriptionField() *string { return v.DescriptionField }

// GetPrimaryKey returns MonitorRuleMonitorRulePromote.PrimaryKey, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRulePromote) GetPrimaryKey() []string { return v.PrimaryKey }

// MonitorRuleMonitorRuleThreshold includes the requested fields of the GraphQL type MonitorRuleThreshold.
type MonitorRuleMonitorRuleThreshold struct {
	Typename             *string                                    `json:"__typename"`
	SourceColumn         string                                     `json:"sourceColumn"`
	GroupByGroups        []MonitorRuleGroupByGroupsMonitorGroupInfo `json:"groupByGroups"`
	CompareFunction      CompareFunction                            `json:"compareFunction"`
	CompareValues        []types.NumberScalar                       `json:"compareValues"`
	LookbackTime         types.DurationScalar                       `json:"lookbackTime"`
	ThresholdAggFunction ThresholdAggFunction                       `json:"thresholdAggFunction"`
}

// GetTypename returns MonitorRuleMonitorRuleThreshold.Typename, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleThreshold) GetTypename() *string { return v.Typename }

// GetSourceColumn returns MonitorRuleMonitorRuleThreshold.SourceColumn, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleThreshold) GetSourceColumn() string { return v.SourceColumn }

// GetGroupByGroups returns MonitorRuleMonitorRuleThreshold.GroupByGroups, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleThreshold) GetGroupByGroups() []MonitorRuleGroupByGroupsMonitorGroupInfo {
	return v.GroupByGroups
}

// GetCompareFunction returns MonitorRuleMonitorRuleThreshold.CompareFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleThreshold) GetCompareFunction() CompareFunction {
	return v.CompareFunction
}

// GetCompareValues returns MonitorRuleMonitorRuleThreshold.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleThreshold) GetCompareValues() []types.NumberScalar {
	return v.CompareValues
}

// GetLookbackTime returns MonitorRuleMonitorRuleThreshold.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleThreshold) GetLookbackTime() types.DurationScalar {
	return v.LookbackTime
}

// GetThresholdAggFunction returns MonitorRuleMonitorRuleThreshold.ThresholdAggFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleMonitorRuleThreshold) GetThresholdAggFunction() ThresholdAggFunction {
	return v.ThresholdAggFunction
}

type MonitorRulePromoteInput struct {
	PrimaryKey       []string `json:"primaryKey"`
	DescriptionField *string  `json:"descriptionField"`
	KindField        *string  `json:"kindField"`
}

// GetPrimaryKey returns MonitorRulePromoteInput.PrimaryKey, and is useful for accessing the field via an interface.
func (v *MonitorRulePromoteInput) GetPrimaryKey() []string { return v.PrimaryKey }

// GetDescriptionField returns MonitorRulePromoteInput.DescriptionField, and is useful for accessing the field via an interface.
func (v *MonitorRulePromoteInput) GetDescriptionField() *string { return v.DescriptionField }

// GetKindField returns MonitorRulePromoteInput.KindField, and is useful for accessing the field via an interface.
func (v *MonitorRulePromoteInput) GetKindField() *string { return v.KindField }

type MonitorRuleThresholdInput struct {
	CompareFunction      *CompareFunction      `json:"compareFunction"`
	CompareValues        []types.NumberScalar  `json:"compareValues"`
	LookbackTime         *types.DurationScalar `json:"lookbackTime"`
	ThresholdAggFunction *ThresholdAggFunction `json:"thresholdAggFunction"`
	ExpressionSummary    *string               `json:"expressionSummary"`
}

// GetCompareFunction returns MonitorRuleThresholdInput.CompareFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleThresholdInput) GetCompareFunction() *CompareFunction { return v.CompareFunction }

// GetCompareValues returns MonitorRuleThresholdInput.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorRuleThresholdInput) GetCompareValues() []types.NumberScalar { return v.CompareValues }

// GetLookbackTime returns MonitorRuleThresholdInput.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorRuleThresholdInput) GetLookbackTime() *types.DurationScalar { return v.LookbackTime }

// GetThresholdAggFunction returns MonitorRuleThresholdInput.ThresholdAggFunction, and is useful for accessing the field via an interface.
func (v *MonitorRuleThresholdInput) GetThresholdAggFunction() *ThresholdAggFunction {
	return v.ThresholdAggFunction
}

// GetExpressionSummary returns MonitorRuleThresholdInput.ExpressionSummary, and is useful for accessing the field via an interface.
func (v *MonitorRuleThresholdInput) GetExpressionSummary() *string { return v.ExpressionSummary }

// MonitorV2 includes the GraphQL fields of MonitorV2 requested by the fragment MonitorV2.
type MonitorV2 struct {
	Id           string                `json:"id"`
	WorkspaceId  string                `json:"workspaceId"`
	CreatedBy    types.UserIdScalar    `json:"createdBy"`
	CreatedDate  types.TimeScalar      `json:"createdDate"`
	Name         string                `json:"name"`
	IconUrl      *string               `json:"iconUrl"`
	Description  *string               `json:"description"`
	ManagedById  *string               `json:"managedById"`
	FolderId     string                `json:"folderId"`
	RollupStatus MonitorV2RollupStatus `json:"rollupStatus"`
	// Describes the type of each of the rules in the definition (they must all be the same type).
	RuleKind   MonitorV2RuleKind   `json:"ruleKind"`
	Definition MonitorV2Definition `json:"definition"`
	// List of actions and conditions for dispatching. Each entry will
	// contain the action definition regardless of whether the definition is
	// shared or provided inline.
	ActionRules []MonitorV2ActionRule `json:"actionRules"`
}

// GetId returns MonitorV2.Id, and is useful for accessing the field via an interface.
func (v *MonitorV2) GetId() string { return v.Id }

// GetWorkspaceId returns MonitorV2.WorkspaceId, and is useful for accessing the field via an interface.
func (v *MonitorV2) GetWorkspaceId() string { return v.WorkspaceId }

// GetCreatedBy returns MonitorV2.CreatedBy, and is useful for accessing the field via an interface.
func (v *MonitorV2) GetCreatedBy() types.UserIdScalar { return v.CreatedBy }

// GetCreatedDate returns MonitorV2.CreatedDate, and is useful for accessing the field via an interface.
func (v *MonitorV2) GetCreatedDate() types.TimeScalar { return v.CreatedDate }

// GetName returns MonitorV2.Name, and is useful for accessing the field via an interface.
func (v *MonitorV2) GetName() string { return v.Name }

// GetIconUrl returns MonitorV2.IconUrl, and is useful for accessing the field via an interface.
func (v *MonitorV2) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns MonitorV2.Description, and is useful for accessing the field via an interface.
func (v *MonitorV2) GetDescription() *string { return v.Description }

// GetManagedById returns MonitorV2.ManagedById, and is useful for accessing the field via an interface.
func (v *MonitorV2) GetManagedById() *string { return v.ManagedById }

// GetFolderId returns MonitorV2.FolderId, and is useful for accessing the field via an interface.
func (v *MonitorV2) GetFolderId() string { return v.FolderId }

// GetRollupStatus returns MonitorV2.RollupStatus, and is useful for accessing the field via an interface.
func (v *MonitorV2) GetRollupStatus() MonitorV2RollupStatus { return v.RollupStatus }

// GetRuleKind returns MonitorV2.RuleKind, and is useful for accessing the field via an interface.
func (v *MonitorV2) GetRuleKind() MonitorV2RuleKind { return v.RuleKind }

// GetDefinition returns MonitorV2.Definition, and is useful for accessing the field via an interface.
func (v *MonitorV2) GetDefinition() MonitorV2Definition { return v.Definition }

// GetActionRules returns MonitorV2.ActionRules, and is useful for accessing the field via an interface.
func (v *MonitorV2) GetActionRules() []MonitorV2ActionRule { return v.ActionRules }

// MonitorV2Action includes the GraphQL fields of MonitorV2Action requested by the fragment MonitorV2Action.
type MonitorV2Action struct {
	// The inline field determines whether the object is inlined within another object or not. If not inlined, it can be shared with other objects.
	Inline      *bool                   `json:"inline"`
	Type        MonitorV2ActionType     `json:"type"`
	Email       *MonitorV2EmailAction   `json:"email"`
	Webhook     *MonitorV2WebhookAction `json:"webhook"`
	Id          string                  `json:"id"`
	WorkspaceId string                  `json:"workspaceId"`
	Name        string                  `json:"name"`
	IconUrl     *string                 `json:"iconUrl"`
	Description *string                 `json:"description"`
	CreatedBy   types.UserIdScalar      `json:"createdBy"`
	CreatedDate types.TimeScalar        `json:"createdDate"`
}

// GetInline returns MonitorV2Action.Inline, and is useful for accessing the field via an interface.
func (v *MonitorV2Action) GetInline() *bool { return v.Inline }

// GetType returns MonitorV2Action.Type, and is useful for accessing the field via an interface.
func (v *MonitorV2Action) GetType() MonitorV2ActionType { return v.Type }

// GetEmail returns MonitorV2Action.Email, and is useful for accessing the field via an interface.
func (v *MonitorV2Action) GetEmail() *MonitorV2EmailAction { return v.Email }

// GetWebhook returns MonitorV2Action.Webhook, and is useful for accessing the field via an interface.
func (v *MonitorV2Action) GetWebhook() *MonitorV2WebhookAction { return v.Webhook }

// GetId returns MonitorV2Action.Id, and is useful for accessing the field via an interface.
func (v *MonitorV2Action) GetId() string { return v.Id }

// GetWorkspaceId returns MonitorV2Action.WorkspaceId, and is useful for accessing the field via an interface.
func (v *MonitorV2Action) GetWorkspaceId() string { return v.WorkspaceId }

// GetName returns MonitorV2Action.Name, and is useful for accessing the field via an interface.
func (v *MonitorV2Action) GetName() string { return v.Name }

// GetIconUrl returns MonitorV2Action.IconUrl, and is useful for accessing the field via an interface.
func (v *MonitorV2Action) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns MonitorV2Action.Description, and is useful for accessing the field via an interface.
func (v *MonitorV2Action) GetDescription() *string { return v.Description }

// GetCreatedBy returns MonitorV2Action.CreatedBy, and is useful for accessing the field via an interface.
func (v *MonitorV2Action) GetCreatedBy() types.UserIdScalar { return v.CreatedBy }

// GetCreatedDate returns MonitorV2Action.CreatedDate, and is useful for accessing the field via an interface.
func (v *MonitorV2Action) GetCreatedDate() types.TimeScalar { return v.CreatedDate }

type MonitorV2ActionInput struct {
	Inline      *bool                        `json:"inline"`
	Type        MonitorV2ActionType          `json:"type"`
	Email       *MonitorV2EmailActionInput   `json:"email,omitempty"`
	Webhook     *MonitorV2WebhookActionInput `json:"webhook,omitempty"`
	Name        string                       `json:"name"`
	IconUrl     *string                      `json:"iconUrl,omitempty"`
	Description *string                      `json:"description,omitempty"`
	ManagedById *string                      `json:"managedById,omitempty"`
	FolderId    *string                      `json:"folderId,omitempty"`
}

// GetInline returns MonitorV2ActionInput.Inline, and is useful for accessing the field via an interface.
func (v *MonitorV2ActionInput) GetInline() *bool { return v.Inline }

// GetType returns MonitorV2ActionInput.Type, and is useful for accessing the field via an interface.
func (v *MonitorV2ActionInput) GetType() MonitorV2ActionType { return v.Type }

// GetEmail returns MonitorV2ActionInput.Email, and is useful for accessing the field via an interface.
func (v *MonitorV2ActionInput) GetEmail() *MonitorV2EmailActionInput { return v.Email }

// GetWebhook returns MonitorV2ActionInput.Webhook, and is useful for accessing the field via an interface.
func (v *MonitorV2ActionInput) GetWebhook() *MonitorV2WebhookActionInput { return v.Webhook }

// GetName returns MonitorV2ActionInput.Name, and is useful for accessing the field via an interface.
func (v *MonitorV2ActionInput) GetName() string { return v.Name }

// GetIconUrl returns MonitorV2ActionInput.IconUrl, and is useful for accessing the field via an interface.
func (v *MonitorV2ActionInput) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns MonitorV2ActionInput.Description, and is useful for accessing the field via an interface.
func (v *MonitorV2ActionInput) GetDescription() *string { return v.Description }

// GetManagedById returns MonitorV2ActionInput.ManagedById, and is useful for accessing the field via an interface.
func (v *MonitorV2ActionInput) GetManagedById() *string { return v.ManagedById }

// GetFolderId returns MonitorV2ActionInput.FolderId, and is useful for accessing the field via an interface.
func (v *MonitorV2ActionInput) GetFolderId() *string { return v.FolderId }

// MonitorV2ActionRule includes the GraphQL fields of MonitorV2ActionRule requested by the fragment MonitorV2ActionRule.
type MonitorV2ActionRule struct {
	// Takes in a private or public action id created from an earlier createAction API call.
	ActionID string `json:"actionID"`
	// Dispatch this action when the alarm matches any of the provided levels.
	Levels                []MonitorV2AlarmLevel `json:"levels"`
	SendEndNotifications  *bool                 `json:"sendEndNotifications"`
	SendRemindersInterval *types.DurationScalar `json:"sendRemindersInterval"`
}

// GetActionID returns MonitorV2ActionRule.ActionID, and is useful for accessing the field via an interface.
func (v *MonitorV2ActionRule) GetActionID() string { return v.ActionID }

// GetLevels returns MonitorV2ActionRule.Levels, and is useful for accessing the field via an interface.
func (v *MonitorV2ActionRule) GetLevels() []MonitorV2AlarmLevel { return v.Levels }

// GetSendEndNotifications returns MonitorV2ActionRule.SendEndNotifications, and is useful for accessing the field via an interface.
func (v *MonitorV2ActionRule) GetSendEndNotifications() *bool { return v.SendEndNotifications }

// GetSendRemindersInterval returns MonitorV2ActionRule.SendRemindersInterval, and is useful for accessing the field via an interface.
func (v *MonitorV2ActionRule) GetSendRemindersInterval() *types.DurationScalar {
	return v.SendRemindersInterval
}

type MonitorV2ActionRuleInput struct {
	ActionID              string                `json:"actionID"`
	Levels                []MonitorV2AlarmLevel `json:"levels"`
	SendEndNotifications  *bool                 `json:"sendEndNotifications,omitempty"`
	SendRemindersInterval *types.DurationScalar `json:"sendRemindersInterval,omitempty"`
}

// GetActionID returns MonitorV2ActionRuleInput.ActionID, and is useful for accessing the field via an interface.
func (v *MonitorV2ActionRuleInput) GetActionID() string { return v.ActionID }

// GetLevels returns MonitorV2ActionRuleInput.Levels, and is useful for accessing the field via an interface.
func (v *MonitorV2ActionRuleInput) GetLevels() []MonitorV2AlarmLevel { return v.Levels }

// GetSendEndNotifications returns MonitorV2ActionRuleInput.SendEndNotifications, and is useful for accessing the field via an interface.
func (v *MonitorV2ActionRuleInput) GetSendEndNotifications() *bool { return v.SendEndNotifications }

// GetSendRemindersInterval returns MonitorV2ActionRuleInput.SendRemindersInterval, and is useful for accessing the field via an interface.
func (v *MonitorV2ActionRuleInput) GetSendRemindersInterval() *types.DurationScalar {
	return v.SendRemindersInterval
}

// MonitorV2ActionSearchResult includes the GraphQL fields of MonitorV2ActionSearchResult requested by the fragment MonitorV2ActionSearchResult.
type MonitorV2ActionSearchResult struct {
	Results []MonitorV2Action `json:"results"`
}

// GetResults returns MonitorV2ActionSearchResult.Results, and is useful for accessing the field via an interface.
func (v *MonitorV2ActionSearchResult) GetResults() []MonitorV2Action { return v.Results }

// MonitorV2ActionType defines the type of monitor returned when querying all
// actions for a monitor.
type MonitorV2ActionType string

const (
	MonitorV2ActionTypeEmail     MonitorV2ActionType = "Email"
	MonitorV2ActionTypePagerduty MonitorV2ActionType = "PagerDuty"
	MonitorV2ActionTypeSlack     MonitorV2ActionType = "Slack"
	MonitorV2ActionTypeWebhook   MonitorV2ActionType = "Webhook"
)

type MonitorV2AlarmLevel string

const (
	MonitorV2AlarmLevelCritical      MonitorV2AlarmLevel = "Critical"
	MonitorV2AlarmLevelError         MonitorV2AlarmLevel = "Error"
	MonitorV2AlarmLevelInformational MonitorV2AlarmLevel = "Informational"
	MonitorV2AlarmLevelNone          MonitorV2AlarmLevel = "None"
	MonitorV2AlarmLevelWarning       MonitorV2AlarmLevel = "Warning"
)

// MonitorV2Column includes the GraphQL fields of MonitorV2Column requested by the fragment MonitorV2Column.
type MonitorV2Column struct {
	// Link Column is for link typed column which the user wants to group by.
	LinkColumn *MonitorV2LinkColumn `json:"linkColumn"`
	// Column path is any non-link typed column along with an optional path which the user wants to group by.
	ColumnPath *MonitorV2ColumnPath `json:"columnPath"`
}

// GetLinkColumn returns MonitorV2Column.LinkColumn, and is useful for accessing the field via an interface.
func (v *MonitorV2Column) GetLinkColumn() *MonitorV2LinkColumn { return v.LinkColumn }

// GetColumnPath returns MonitorV2Column.ColumnPath, and is useful for accessing the field via an interface.
func (v *MonitorV2Column) GetColumnPath() *MonitorV2ColumnPath { return v.ColumnPath }

// MonitorV2ColumnComparison includes the GraphQL fields of MonitorV2ColumnComparison requested by the fragment MonitorV2ColumnComparison.
type MonitorV2ColumnComparison struct {
	// The column user wants to compare against using the values inside compareValues.
	Column MonitorV2Column `json:"column"`
	// CompareValues is a list of comparisons that provide an implicit AND where all comparisons must match.
	// This gives the option to specify one value for a threshold behavior (trigger if > 80) but also allows
	// for ranges of validity. If you want to trigger inside a range, give two compares here (like > 80 and < 90).
	// If you want to trigger outside a valid range, use two rules with a single compare to get the implied OR
	// (one rule for < 80 and one rule for > 90).
	CompareValues []MonitorV2Comparison `json:"compareValues"`
}

// GetColumn returns MonitorV2ColumnComparison.Column, and is useful for accessing the field via an interface.
func (v *MonitorV2ColumnComparison) GetColumn() MonitorV2Column { return v.Column }

// GetCompareValues returns MonitorV2ColumnComparison.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorV2ColumnComparison) GetCompareValues() []MonitorV2Comparison { return v.CompareValues }

type MonitorV2ColumnComparisonInput struct {
	CompareValues []MonitorV2ComparisonInput `json:"compareValues"`
	Column        MonitorV2ColumnInput       `json:"column"`
}

// GetCompareValues returns MonitorV2ColumnComparisonInput.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorV2ColumnComparisonInput) GetCompareValues() []MonitorV2ComparisonInput {
	return v.CompareValues
}

// GetColumn returns MonitorV2ColumnComparisonInput.Column, and is useful for accessing the field via an interface.
func (v *MonitorV2ColumnComparisonInput) GetColumn() MonitorV2ColumnInput { return v.Column }

type MonitorV2ColumnInput struct {
	LinkColumn *MonitorV2LinkColumnInput `json:"linkColumn,omitempty"`
	ColumnPath *MonitorV2ColumnPathInput `json:"columnPath,omitempty"`
}

// GetLinkColumn returns MonitorV2ColumnInput.LinkColumn, and is useful for accessing the field via an interface.
func (v *MonitorV2ColumnInput) GetLinkColumn() *MonitorV2LinkColumnInput { return v.LinkColumn }

// GetColumnPath returns MonitorV2ColumnInput.ColumnPath, and is useful for accessing the field via an interface.
func (v *MonitorV2ColumnInput) GetColumnPath() *MonitorV2ColumnPathInput { return v.ColumnPath }

// MonitorV2ColumnPath includes the GraphQL fields of MonitorV2ColumnPath requested by the fragment MonitorV2ColumnPath.
type MonitorV2ColumnPath struct {
	Name string  `json:"name"`
	Path *string `json:"path"`
}

// GetName returns MonitorV2ColumnPath.Name, and is useful for accessing the field via an interface.
func (v *MonitorV2ColumnPath) GetName() string { return v.Name }

// GetPath returns MonitorV2ColumnPath.Path, and is useful for accessing the field via an interface.
func (v *MonitorV2ColumnPath) GetPath() *string { return v.Path }

type MonitorV2ColumnPathInput struct {
	Name string  `json:"name"`
	Path *string `json:"path,omitempty"`
}

// GetName returns MonitorV2ColumnPathInput.Name, and is useful for accessing the field via an interface.
func (v *MonitorV2ColumnPathInput) GetName() string { return v.Name }

// GetPath returns MonitorV2ColumnPathInput.Path, and is useful for accessing the field via an interface.
func (v *MonitorV2ColumnPathInput) GetPath() *string { return v.Path }

// MonitorV2Comparison includes the GraphQL fields of MonitorV2Comparison requested by the fragment MonitorV2Comparison.
type MonitorV2Comparison struct {
	CompareFn MonitorV2ComparisonFunction `json:"compareFn"`
	// compareValue is the right-side value for comparisons that use it (like x > 10, this is 10).
	CompareValue PrimitiveValue `json:"compareValue"`
}

// GetCompareFn returns MonitorV2Comparison.CompareFn, and is useful for accessing the field via an interface.
func (v *MonitorV2Comparison) GetCompareFn() MonitorV2ComparisonFunction { return v.CompareFn }

// GetCompareValue returns MonitorV2Comparison.CompareValue, and is useful for accessing the field via an interface.
func (v *MonitorV2Comparison) GetCompareValue() PrimitiveValue { return v.CompareValue }

type MonitorV2ComparisonFunction string

const (
	MonitorV2ComparisonFunctionEqual          MonitorV2ComparisonFunction = "Equal"
	MonitorV2ComparisonFunctionGreater        MonitorV2ComparisonFunction = "Greater"
	MonitorV2ComparisonFunctionGreaterorequal MonitorV2ComparisonFunction = "GreaterOrEqual"
	MonitorV2ComparisonFunctionLess           MonitorV2ComparisonFunction = "Less"
	MonitorV2ComparisonFunctionLessorequal    MonitorV2ComparisonFunction = "LessOrEqual"
	MonitorV2ComparisonFunctionNotequal       MonitorV2ComparisonFunction = "NotEqual"
)

type MonitorV2ComparisonInput struct {
	CompareFn    MonitorV2ComparisonFunction `json:"compareFn"`
	CompareValue PrimitiveValueInput         `json:"compareValue"`
}

// GetCompareFn returns MonitorV2ComparisonInput.CompareFn, and is useful for accessing the field via an interface.
func (v *MonitorV2ComparisonInput) GetCompareFn() MonitorV2ComparisonFunction { return v.CompareFn }

// GetCompareValue returns MonitorV2ComparisonInput.CompareValue, and is useful for accessing the field via an interface.
func (v *MonitorV2ComparisonInput) GetCompareValue() PrimitiveValueInput { return v.CompareValue }

// MonitorV2CountRule includes the GraphQL fields of MonitorV2CountRule requested by the fragment MonitorV2CountRule.
type MonitorV2CountRule struct {
	// CompareValues is a list of comparisons that provide an implicit AND where all comparisons must match.
	// This gives the option to specify
	// one value for a threshold behavior (trigger if > 80) but also allows for ranges of validity. If you want
	// to trigger inside a range, give two compares here (like > 80 and < 90). If you want to trigger
	// outside a valid range, use two rules with a single compare to get the implied OR
	// (one rule for < 80 and one rule for > 90).
	CompareValues []MonitorV2Comparison `json:"compareValues"`
	// CompareGroups is a list of comparisons made against the columns which the monitor is grouped by.
	// This gives the option to add extra dimension to the existing rule by specifying which column of
	// the group the user looks forward to being alerted by. For example, this allows for rule expression
	// like (Count > 80 and Group = "Good Group") which would trigger a critical alert.
	CompareGroups []MonitorV2ColumnComparison `json:"compareGroups"`
}

// GetCompareValues returns MonitorV2CountRule.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorV2CountRule) GetCompareValues() []MonitorV2Comparison { return v.CompareValues }

// GetCompareGroups returns MonitorV2CountRule.CompareGroups, and is useful for accessing the field via an interface.
func (v *MonitorV2CountRule) GetCompareGroups() []MonitorV2ColumnComparison { return v.CompareGroups }

type MonitorV2CountRuleInput struct {
	CompareValues []MonitorV2ComparisonInput       `json:"compareValues"`
	CompareGroups []MonitorV2ColumnComparisonInput `json:"compareGroups"`
}

// GetCompareValues returns MonitorV2CountRuleInput.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorV2CountRuleInput) GetCompareValues() []MonitorV2ComparisonInput {
	return v.CompareValues
}

// GetCompareGroups returns MonitorV2CountRuleInput.CompareGroups, and is useful for accessing the field via an interface.
func (v *MonitorV2CountRuleInput) GetCompareGroups() []MonitorV2ColumnComparisonInput {
	return v.CompareGroups
}

// MonitorV2Definition includes the GraphQL fields of MonitorV2Definition requested by the fragment MonitorV2Definition.
type MonitorV2Definition struct {
	// InputQuery is the MultiStageQuery that defines the input feed of data for this monitor. It will include the
	// original dataset(s) and other transform information that the user selected to create "Create Monitor".
	InputQuery MonitorV2DefinitionInputQueryMultiStageQuery `json:"inputQuery"`
	// Rules are one or more instances of a MonitorV2Rule, which all must be of the same MonitorRuleKind
	// as specified in `ruleKind`.
	// Rules should be constructed logically such that a state transition from null->Warning implies a
	// transition from null->Informational as well.
	Rules []MonitorV2Rule `json:"rules"`
	// LookbackTime optionally describes a duration that must be satisifed by this monitor. It applies to all rules,
	// but is only applicable to rule kinds that utilize it.
	LookbackTime *types.DurationScalar `json:"lookbackTime"`
	// DataStabilizationDelay expresses the minimum time that should elapse before data is considered "good enough"
	// to evaluate. Choosing a delay really depends on the expectations of latency of data and whether data is expected
	// to arrive later than other data and thus would change previously evaluated results. Another way to think of this
	// value is defining where the "Ragged Right Edge" starts relative to the clock.
	DataStabilizationDelay *types.DurationScalar `json:"dataStabilizationDelay"`
	// Groupings describes the groups that logically separate events/rows/etc from each other.
	// When the input monitor dataset is of type resource and the monitor strategy is of type promote, this field should
	// either be left empty to be mutated with the primary keys of the resource dataset or it should only contain the
	// primary keys of the dataset.
	Groupings []MonitorV2Column `json:"groupings"`
	// Scheduling controls how often the monitor is evaluated. The default behavior when you do
	// not specify this field is a real-time transform monitor with a default freshness goal that
	// you cannot control.
	Scheduling *MonitorV2Scheduling `json:"scheduling"`
}

// GetInputQuery returns MonitorV2Definition.InputQuery, and is useful for accessing the field via an interface.
func (v *MonitorV2Definition) GetInputQuery() MonitorV2DefinitionInputQueryMultiStageQuery {
	return v.InputQuery
}

// GetRules returns MonitorV2Definition.Rules, and is useful for accessing the field via an interface.
func (v *MonitorV2Definition) GetRules() []MonitorV2Rule { return v.Rules }

// GetLookbackTime returns MonitorV2Definition.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorV2Definition) GetLookbackTime() *types.DurationScalar { return v.LookbackTime }

// GetDataStabilizationDelay returns MonitorV2Definition.DataStabilizationDelay, and is useful for accessing the field via an interface.
func (v *MonitorV2Definition) GetDataStabilizationDelay() *types.DurationScalar {
	return v.DataStabilizationDelay
}

// GetGroupings returns MonitorV2Definition.Groupings, and is useful for accessing the field via an interface.
func (v *MonitorV2Definition) GetGroupings() []MonitorV2Column { return v.Groupings }

// GetScheduling returns MonitorV2Definition.Scheduling, and is useful for accessing the field via an interface.
func (v *MonitorV2Definition) GetScheduling() *MonitorV2Scheduling { return v.Scheduling }

type MonitorV2DefinitionInput struct {
	InputQuery             MultiStageQueryInput      `json:"inputQuery"`
	Rules                  []MonitorV2RuleInput      `json:"rules"`
	LookbackTime           *types.DurationScalar     `json:"lookbackTime"`
	DataStabilizationDelay *types.DurationScalar     `json:"dataStabilizationDelay,omitempty"`
	Groupings              []MonitorV2ColumnInput    `json:"groupings"`
	Scheduling             *MonitorV2SchedulingInput `json:"scheduling"`
}

// GetInputQuery returns MonitorV2DefinitionInput.InputQuery, and is useful for accessing the field via an interface.
func (v *MonitorV2DefinitionInput) GetInputQuery() MultiStageQueryInput { return v.InputQuery }

// GetRules returns MonitorV2DefinitionInput.Rules, and is useful for accessing the field via an interface.
func (v *MonitorV2DefinitionInput) GetRules() []MonitorV2RuleInput { return v.Rules }

// GetLookbackTime returns MonitorV2DefinitionInput.LookbackTime, and is useful for accessing the field via an interface.
func (v *MonitorV2DefinitionInput) GetLookbackTime() *types.DurationScalar { return v.LookbackTime }

// GetDataStabilizationDelay returns MonitorV2DefinitionInput.DataStabilizationDelay, and is useful for accessing the field via an interface.
func (v *MonitorV2DefinitionInput) GetDataStabilizationDelay() *types.DurationScalar {
	return v.DataStabilizationDelay
}

// GetGroupings returns MonitorV2DefinitionInput.Groupings, and is useful for accessing the field via an interface.
func (v *MonitorV2DefinitionInput) GetGroupings() []MonitorV2ColumnInput { return v.Groupings }

// GetScheduling returns MonitorV2DefinitionInput.Scheduling, and is useful for accessing the field via an interface.
func (v *MonitorV2DefinitionInput) GetScheduling() *MonitorV2SchedulingInput { return v.Scheduling }

// MonitorV2DefinitionInputQueryMultiStageQuery includes the requested fields of the GraphQL type MultiStageQuery.
type MonitorV2DefinitionInputQueryMultiStageQuery struct {
	OutputStage string       `json:"outputStage"`
	Stages      []StageQuery `json:"stages"`
}

// GetOutputStage returns MonitorV2DefinitionInputQueryMultiStageQuery.OutputStage, and is useful for accessing the field via an interface.
func (v *MonitorV2DefinitionInputQueryMultiStageQuery) GetOutputStage() string { return v.OutputStage }

// GetStages returns MonitorV2DefinitionInputQueryMultiStageQuery.Stages, and is useful for accessing the field via an interface.
func (v *MonitorV2DefinitionInputQueryMultiStageQuery) GetStages() []StageQuery { return v.Stages }

// MonitorV2EmailAction includes the GraphQL fields of MonitorV2EmailAction requested by the fragment MonitorV2EmailAction.
type MonitorV2EmailAction struct {
	// A list of Observe users to email.
	Users []types.UserIdScalar `json:"users"`
	// A list of email addresses to email.
	Addresses []string `json:"addresses"`
	// The email subject template.
	Subject string `json:"subject"`
	// The email body template.
	Body *string `json:"body"`
	// Fragments allow users to bring in additional monitor or alarm metadata.
	Fragments *types.JsonObject `json:"fragments"`
}

// GetUsers returns MonitorV2EmailAction.Users, and is useful for accessing the field via an interface.
func (v *MonitorV2EmailAction) GetUsers() []types.UserIdScalar { return v.Users }

// GetAddresses returns MonitorV2EmailAction.Addresses, and is useful for accessing the field via an interface.
func (v *MonitorV2EmailAction) GetAddresses() []string { return v.Addresses }

// GetSubject returns MonitorV2EmailAction.Subject, and is useful for accessing the field via an interface.
func (v *MonitorV2EmailAction) GetSubject() string { return v.Subject }

// GetBody returns MonitorV2EmailAction.Body, and is useful for accessing the field via an interface.
func (v *MonitorV2EmailAction) GetBody() *string { return v.Body }

// GetFragments returns MonitorV2EmailAction.Fragments, and is useful for accessing the field via an interface.
func (v *MonitorV2EmailAction) GetFragments() *types.JsonObject { return v.Fragments }

type MonitorV2EmailActionInput struct {
	Users     []types.UserIdScalar `json:"users"`
	Addresses []string             `json:"addresses"`
	Subject   string               `json:"subject"`
	Body      *string              `json:"body"`
	Fragments *types.JsonObject    `json:"fragments,omitempty"`
}

// GetUsers returns MonitorV2EmailActionInput.Users, and is useful for accessing the field via an interface.
func (v *MonitorV2EmailActionInput) GetUsers() []types.UserIdScalar { return v.Users }

// GetAddresses returns MonitorV2EmailActionInput.Addresses, and is useful for accessing the field via an interface.
func (v *MonitorV2EmailActionInput) GetAddresses() []string { return v.Addresses }

// GetSubject returns MonitorV2EmailActionInput.Subject, and is useful for accessing the field via an interface.
func (v *MonitorV2EmailActionInput) GetSubject() string { return v.Subject }

// GetBody returns MonitorV2EmailActionInput.Body, and is useful for accessing the field via an interface.
func (v *MonitorV2EmailActionInput) GetBody() *string { return v.Body }

// GetFragments returns MonitorV2EmailActionInput.Fragments, and is useful for accessing the field via an interface.
func (v *MonitorV2EmailActionInput) GetFragments() *types.JsonObject { return v.Fragments }

// MonitorV2HttpType describes the two HTTP request methods that users can choose to alert to
// their desired webhook destinations: POST and PUT.
type MonitorV2HttpType string

const (
	MonitorV2HttpTypePost MonitorV2HttpType = "Post"
	MonitorV2HttpTypePut  MonitorV2HttpType = "Put"
)

type MonitorV2Input struct {
	Comment     *string                  `json:"comment"`
	Definition  MonitorV2DefinitionInput `json:"definition"`
	RuleKind    MonitorV2RuleKind        `json:"ruleKind"`
	Name        string                   `json:"name"`
	IconUrl     *string                  `json:"iconUrl,omitempty"`
	Description *string                  `json:"description,omitempty"`
	ManagedById *string                  `json:"managedById,omitempty"`
	FolderId    *string                  `json:"folderId,omitempty"`
}

// GetComment returns MonitorV2Input.Comment, and is useful for accessing the field via an interface.
func (v *MonitorV2Input) GetComment() *string { return v.Comment }

// GetDefinition returns MonitorV2Input.Definition, and is useful for accessing the field via an interface.
func (v *MonitorV2Input) GetDefinition() MonitorV2DefinitionInput { return v.Definition }

// GetRuleKind returns MonitorV2Input.RuleKind, and is useful for accessing the field via an interface.
func (v *MonitorV2Input) GetRuleKind() MonitorV2RuleKind { return v.RuleKind }

// GetName returns MonitorV2Input.Name, and is useful for accessing the field via an interface.
func (v *MonitorV2Input) GetName() string { return v.Name }

// GetIconUrl returns MonitorV2Input.IconUrl, and is useful for accessing the field via an interface.
func (v *MonitorV2Input) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns MonitorV2Input.Description, and is useful for accessing the field via an interface.
func (v *MonitorV2Input) GetDescription() *string { return v.Description }

// GetManagedById returns MonitorV2Input.ManagedById, and is useful for accessing the field via an interface.
func (v *MonitorV2Input) GetManagedById() *string { return v.ManagedById }

// GetFolderId returns MonitorV2Input.FolderId, and is useful for accessing the field via an interface.
func (v *MonitorV2Input) GetFolderId() *string { return v.FolderId }

// MonitorV2IntervalSchedule includes the GraphQL fields of MonitorV2IntervalSchedule requested by the fragment MonitorV2IntervalSchedule.
type MonitorV2IntervalSchedule struct {
	// Interval is how often the monitor should attempt to run. This interval describes when the
	// monitor enters the queue, but is not a guarantee of execution. Monitors are best-effort
	// and also may be subject to QoS or rate limiting in the future.
	Interval types.DurationScalar `json:"interval"`
	// Randomize is a maximum +/- to apply to the interval to avoid things like harmonics and
	// work stacking up in parallel. If interval is "10m" and randomize is "30s", then a random
	// interval between 9m30s and 10m30s will be selected each run.
	Randomize types.DurationScalar `json:"randomize"`
}

// GetInterval returns MonitorV2IntervalSchedule.Interval, and is useful for accessing the field via an interface.
func (v *MonitorV2IntervalSchedule) GetInterval() types.DurationScalar { return v.Interval }

// GetRandomize returns MonitorV2IntervalSchedule.Randomize, and is useful for accessing the field via an interface.
func (v *MonitorV2IntervalSchedule) GetRandomize() types.DurationScalar { return v.Randomize }

type MonitorV2IntervalScheduleInput struct {
	Interval  types.DurationScalar `json:"interval"`
	Randomize types.DurationScalar `json:"randomize"`
}

// GetInterval returns MonitorV2IntervalScheduleInput.Interval, and is useful for accessing the field via an interface.
func (v *MonitorV2IntervalScheduleInput) GetInterval() types.DurationScalar { return v.Interval }

// GetRandomize returns MonitorV2IntervalScheduleInput.Randomize, and is useful for accessing the field via an interface.
func (v *MonitorV2IntervalScheduleInput) GetRandomize() types.DurationScalar { return v.Randomize }

// MonitorV2LinkColumn includes the GraphQL fields of MonitorV2LinkColumn requested by the fragment MonitorV2LinkColumn.
type MonitorV2LinkColumn struct {
	Name string `json:"name"`
	// Any context surrounding the link column as part of the MonitorV2Alarm will be described here. This column
	// will include the source dataset's and the target dataset's columns linked together to create the current
	// link column.
	Meta *MonitorV2LinkColumnMeta `json:"meta"`
}

// GetName returns MonitorV2LinkColumn.Name, and is useful for accessing the field via an interface.
func (v *MonitorV2LinkColumn) GetName() string { return v.Name }

// GetMeta returns MonitorV2LinkColumn.Meta, and is useful for accessing the field via an interface.
func (v *MonitorV2LinkColumn) GetMeta() *MonitorV2LinkColumnMeta { return v.Meta }

type MonitorV2LinkColumnInput struct {
	Name string                        `json:"name"`
	Meta *MonitorV2LinkColumnMetaInput `json:"meta,omitempty"`
}

// GetName returns MonitorV2LinkColumnInput.Name, and is useful for accessing the field via an interface.
func (v *MonitorV2LinkColumnInput) GetName() string { return v.Name }

// GetMeta returns MonitorV2LinkColumnInput.Meta, and is useful for accessing the field via an interface.
func (v *MonitorV2LinkColumnInput) GetMeta() *MonitorV2LinkColumnMetaInput { return v.Meta }

// MonitorV2LinkColumnMeta includes the GraphQL fields of MonitorV2LinkColumnMeta requested by the fragment MonitorV2LinkColumnMeta.
type MonitorV2LinkColumnMeta struct {
	// List of source fields used to link against the primary keys of the target dataset.
	// Frontend only needs to provide the input for this field when it wants a preview of the template fields.
	SrcFields []MonitorV2ColumnPath `json:"srcFields"`
	// List of destination fields (a.k.a. primary keys) of the target dataset being linked against.
	// Frontend only needs to provide the input for this field when it wants a preview of the template fields.
	DstFields []string `json:"dstFields"`
	// The target dataset is the resource dataset id which the link came from. If the link was created from a stage in
	// the shape of a resource from the worksheet, this field will be empty as there's no resource dataset to point to.
	// Frontend only needs to provide the input for this field when it wants a preview of the template fields.
	TargetDataset *types.Int64Scalar `json:"targetDataset"`
}

// GetSrcFields returns MonitorV2LinkColumnMeta.SrcFields, and is useful for accessing the field via an interface.
func (v *MonitorV2LinkColumnMeta) GetSrcFields() []MonitorV2ColumnPath { return v.SrcFields }

// GetDstFields returns MonitorV2LinkColumnMeta.DstFields, and is useful for accessing the field via an interface.
func (v *MonitorV2LinkColumnMeta) GetDstFields() []string { return v.DstFields }

// GetTargetDataset returns MonitorV2LinkColumnMeta.TargetDataset, and is useful for accessing the field via an interface.
func (v *MonitorV2LinkColumnMeta) GetTargetDataset() *types.Int64Scalar { return v.TargetDataset }

type MonitorV2LinkColumnMetaInput struct {
	SrcFields     []MonitorV2ColumnPathInput `json:"srcFields"`
	DstFields     []string                   `json:"dstFields"`
	TargetDataset *types.Int64Scalar         `json:"targetDataset"`
}

// GetSrcFields returns MonitorV2LinkColumnMetaInput.SrcFields, and is useful for accessing the field via an interface.
func (v *MonitorV2LinkColumnMetaInput) GetSrcFields() []MonitorV2ColumnPathInput { return v.SrcFields }

// GetDstFields returns MonitorV2LinkColumnMetaInput.DstFields, and is useful for accessing the field via an interface.
func (v *MonitorV2LinkColumnMetaInput) GetDstFields() []string { return v.DstFields }

// GetTargetDataset returns MonitorV2LinkColumnMetaInput.TargetDataset, and is useful for accessing the field via an interface.
func (v *MonitorV2LinkColumnMetaInput) GetTargetDataset() *types.Int64Scalar { return v.TargetDataset }

// MonitorV2PromoteRule includes the GraphQL fields of MonitorV2PromoteRule requested by the fragment MonitorV2PromoteRule.
type MonitorV2PromoteRule struct {
	// If this field has been specified, it means there are values in the columns that we want to assign severity by.
	// When multiple column comparisons are specified within one promote rule, it will act as an AND condition. When defined
	// through separate promote rules, it will be treated as an OR condition.
	// If the field is left as an empty array by the frontend, all the rows of the dataset will be considered as an alert.
	// For example, if the field is left empty and the level of the MonitorV2Rule is set at critical, all the rows of the dataset
	// will be treated as a critical alert.
	CompareColumns []MonitorV2ColumnComparison `json:"compareColumns"`
}

// GetCompareColumns returns MonitorV2PromoteRule.CompareColumns, and is useful for accessing the field via an interface.
func (v *MonitorV2PromoteRule) GetCompareColumns() []MonitorV2ColumnComparison {
	return v.CompareColumns
}

type MonitorV2PromoteRuleInput struct {
	CompareColumns []MonitorV2ColumnComparisonInput `json:"compareColumns"`
}

// GetCompareColumns returns MonitorV2PromoteRuleInput.CompareColumns, and is useful for accessing the field via an interface.
func (v *MonitorV2PromoteRuleInput) GetCompareColumns() []MonitorV2ColumnComparisonInput {
	return v.CompareColumns
}

// MonitorV2RollupStatus is a convenience indicator of how to perceive the state of the monitor.
// This value is derived entirely using existing data in other fields, but
// encapsultes those inspections into a single priority-based status.
// Some status indicators are not exclusive with others so, for example, a monitor that is "Triggering"
// may also be "Degraded" because of underlying warnings.
// This priority-sorted rollup is just to let the user prioritize and sort things in the UI in an order
// we define as most sensible. This ordering can be changed as needed.
// In descending order of priority, the values are:
// - Inactive: The monitor is not running because it is disabled or because the system has deactivated it due to chronic failures.
// - Failed: The last attempt to run the monitor had fatal errors (it cannot trigger).
// - Triggering: The last evaluation had still-active alarms, or new one-shot alarms.
// - Degraded: The last evaluation had warnings, but evaluation completed and no alarms were detected.
// - Running: The default state. If no other status is indicated, the monitor is running.
type MonitorV2RollupStatus string

const (
	MonitorV2RollupStatusDegraded   MonitorV2RollupStatus = "Degraded"
	MonitorV2RollupStatusFailed     MonitorV2RollupStatus = "Failed"
	MonitorV2RollupStatusInactive   MonitorV2RollupStatus = "Inactive"
	MonitorV2RollupStatusRunning    MonitorV2RollupStatus = "Running"
	MonitorV2RollupStatusTriggering MonitorV2RollupStatus = "Triggering"
)

// MonitorV2Rule includes the GraphQL fields of MonitorV2Rule requested by the fragment MonitorV2Rule.
type MonitorV2Rule struct {
	// Level is the severity level to assign to a rule's conditions being matched.
	Level     MonitorV2AlarmLevel     `json:"level"`
	Count     *MonitorV2CountRule     `json:"count"`
	Threshold *MonitorV2ThresholdRule `json:"threshold"`
	Promote   *MonitorV2PromoteRule   `json:"promote"`
}

// GetLevel returns MonitorV2Rule.Level, and is useful for accessing the field via an interface.
func (v *MonitorV2Rule) GetLevel() MonitorV2AlarmLevel { return v.Level }

// GetCount returns MonitorV2Rule.Count, and is useful for accessing the field via an interface.
func (v *MonitorV2Rule) GetCount() *MonitorV2CountRule { return v.Count }

// GetThreshold returns MonitorV2Rule.Threshold, and is useful for accessing the field via an interface.
func (v *MonitorV2Rule) GetThreshold() *MonitorV2ThresholdRule { return v.Threshold }

// GetPromote returns MonitorV2Rule.Promote, and is useful for accessing the field via an interface.
func (v *MonitorV2Rule) GetPromote() *MonitorV2PromoteRule { return v.Promote }

type MonitorV2RuleInput struct {
	Level     MonitorV2AlarmLevel          `json:"level"`
	Count     *MonitorV2CountRuleInput     `json:"count,omitempty"`
	Threshold *MonitorV2ThresholdRuleInput `json:"threshold,omitempty"`
	Promote   *MonitorV2PromoteRuleInput   `json:"promote,omitempty"`
}

// GetLevel returns MonitorV2RuleInput.Level, and is useful for accessing the field via an interface.
func (v *MonitorV2RuleInput) GetLevel() MonitorV2AlarmLevel { return v.Level }

// GetCount returns MonitorV2RuleInput.Count, and is useful for accessing the field via an interface.
func (v *MonitorV2RuleInput) GetCount() *MonitorV2CountRuleInput { return v.Count }

// GetThreshold returns MonitorV2RuleInput.Threshold, and is useful for accessing the field via an interface.
func (v *MonitorV2RuleInput) GetThreshold() *MonitorV2ThresholdRuleInput { return v.Threshold }

// GetPromote returns MonitorV2RuleInput.Promote, and is useful for accessing the field via an interface.
func (v *MonitorV2RuleInput) GetPromote() *MonitorV2PromoteRuleInput { return v.Promote }

// MonitorV2RuleKind describes the strategy used to inspect the input query.
// - Count is used when what you care to inspect is the number of rows/instances
// in the query result.
// - Threshold is when you want to inspect a numerical value within the query
// results, not the presence of the rows themselves.
type MonitorV2RuleKind string

const (
	MonitorV2RuleKindCount     MonitorV2RuleKind = "Count"
	MonitorV2RuleKindPromote   MonitorV2RuleKind = "Promote"
	MonitorV2RuleKindThreshold MonitorV2RuleKind = "Threshold"
)

// MonitorV2Scheduling includes the GraphQL fields of MonitorV2Scheduling requested by the fragment MonitorV2Scheduling.
type MonitorV2Scheduling struct {
	// Interval should be used to run explicit ad-hoc queries.
	Interval *MonitorV2IntervalSchedule `json:"interval"`
	// Transform should be used to defer scheduling to the transformer and evaluate when data becomes
	// available.
	Transform *MonitorV2TransformSchedule `json:"transform"`
}

// GetInterval returns MonitorV2Scheduling.Interval, and is useful for accessing the field via an interface.
func (v *MonitorV2Scheduling) GetInterval() *MonitorV2IntervalSchedule { return v.Interval }

// GetTransform returns MonitorV2Scheduling.Transform, and is useful for accessing the field via an interface.
func (v *MonitorV2Scheduling) GetTransform() *MonitorV2TransformSchedule { return v.Transform }

type MonitorV2SchedulingInput struct {
	Interval  *MonitorV2IntervalScheduleInput  `json:"interval"`
	Transform *MonitorV2TransformScheduleInput `json:"transform"`
}

// GetInterval returns MonitorV2SchedulingInput.Interval, and is useful for accessing the field via an interface.
func (v *MonitorV2SchedulingInput) GetInterval() *MonitorV2IntervalScheduleInput { return v.Interval }

// GetTransform returns MonitorV2SchedulingInput.Transform, and is useful for accessing the field via an interface.
func (v *MonitorV2SchedulingInput) GetTransform() *MonitorV2TransformScheduleInput {
	return v.Transform
}

// MonitorV2SearchResult includes the GraphQL fields of MonitorV2SearchResult requested by the fragment MonitorV2SearchResult.
type MonitorV2SearchResult struct {
	Results []MonitorV2 `json:"results"`
}

// GetResults returns MonitorV2SearchResult.Results, and is useful for accessing the field via an interface.
func (v *MonitorV2SearchResult) GetResults() []MonitorV2 { return v.Results }

// MonitorV2ThresholdRule includes the GraphQL fields of MonitorV2ThresholdRule requested by the fragment MonitorV2ThresholdRule.
type MonitorV2ThresholdRule struct {
	// CompareValues is a list of comparisons that provide an implicit AND where all comparisons must match.
	// This gives the option to specify one value for a threshold behavior (trigger if > 80) but also allows
	// for ranges of validity. If you want to trigger inside a range, give two compares here (like > 80 and < 90).
	// If you want to trigger outside a valid range, use two rules with a single compare to get the implied OR
	// (one rule for < 80 and one rule for > 90).
	CompareValues []MonitorV2Comparison `json:"compareValues"`
	// ValueColumnName indicates which of the columns in the input query has the value to apply to the aggregation.
	ValueColumnName string                    `json:"valueColumnName"`
	Aggregation     MonitorV2ValueAggregation `json:"aggregation"`
	// CompareGroups is a list of comparisons made against the columns which the monitor is grouped by.
	// This gives the option to add extra dimension to the existing rule by specifying which column of
	// the group the user looks forward to being alerted by. For example, this allows for rule expression
	// like (Threshold > 80 and Group = "Good Group") which would trigger a critical alert.
	CompareGroups []MonitorV2ColumnComparison `json:"compareGroups"`
}

// GetCompareValues returns MonitorV2ThresholdRule.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorV2ThresholdRule) GetCompareValues() []MonitorV2Comparison { return v.CompareValues }

// GetValueColumnName returns MonitorV2ThresholdRule.ValueColumnName, and is useful for accessing the field via an interface.
func (v *MonitorV2ThresholdRule) GetValueColumnName() string { return v.ValueColumnName }

// GetAggregation returns MonitorV2ThresholdRule.Aggregation, and is useful for accessing the field via an interface.
func (v *MonitorV2ThresholdRule) GetAggregation() MonitorV2ValueAggregation { return v.Aggregation }

// GetCompareGroups returns MonitorV2ThresholdRule.CompareGroups, and is useful for accessing the field via an interface.
func (v *MonitorV2ThresholdRule) GetCompareGroups() []MonitorV2ColumnComparison {
	return v.CompareGroups
}

type MonitorV2ThresholdRuleInput struct {
	CompareValues   []MonitorV2ComparisonInput       `json:"compareValues"`
	ValueColumnName string                           `json:"valueColumnName"`
	Aggregation     MonitorV2ValueAggregation        `json:"aggregation"`
	CompareGroups   []MonitorV2ColumnComparisonInput `json:"compareGroups"`
}

// GetCompareValues returns MonitorV2ThresholdRuleInput.CompareValues, and is useful for accessing the field via an interface.
func (v *MonitorV2ThresholdRuleInput) GetCompareValues() []MonitorV2ComparisonInput {
	return v.CompareValues
}

// GetValueColumnName returns MonitorV2ThresholdRuleInput.ValueColumnName, and is useful for accessing the field via an interface.
func (v *MonitorV2ThresholdRuleInput) GetValueColumnName() string { return v.ValueColumnName }

// GetAggregation returns MonitorV2ThresholdRuleInput.Aggregation, and is useful for accessing the field via an interface.
func (v *MonitorV2ThresholdRuleInput) GetAggregation() MonitorV2ValueAggregation {
	return v.Aggregation
}

// GetCompareGroups returns MonitorV2ThresholdRuleInput.CompareGroups, and is useful for accessing the field via an interface.
func (v *MonitorV2ThresholdRuleInput) GetCompareGroups() []MonitorV2ColumnComparisonInput {
	return v.CompareGroups
}

// MonitorV2TransformSchedule includes the GraphQL fields of MonitorV2TransformSchedule requested by the fragment MonitorV2TransformSchedule.
type MonitorV2TransformSchedule struct {
	FreshnessGoal types.DurationScalar `json:"freshnessGoal"`
}

// GetFreshnessGoal returns MonitorV2TransformSchedule.FreshnessGoal, and is useful for accessing the field via an interface.
func (v *MonitorV2TransformSchedule) GetFreshnessGoal() types.DurationScalar { return v.FreshnessGoal }

type MonitorV2TransformScheduleInput struct {
	FreshnessGoal types.DurationScalar `json:"freshnessGoal"`
}

// GetFreshnessGoal returns MonitorV2TransformScheduleInput.FreshnessGoal, and is useful for accessing the field via an interface.
func (v *MonitorV2TransformScheduleInput) GetFreshnessGoal() types.DurationScalar {
	return v.FreshnessGoal
}

// MonitorV2ValueAggregation describes the numerical/value aggregations for the Value
// monitor type. These types map to your typical query aggregators except count, which is its own
// monitor type since it acts on rows, not on values.
// - AllOf: This is like "all values > 80" (which is like saying min(value) > 80)
// - AnyOf: This is like "any value > 80" (which is like saying max(value) > 80)
// - SumOf: This sums all values over the lookback and makes that the value to compare
// - AvgOf: This averages all values over the lookback and makes that the value to compare
type MonitorV2ValueAggregation string

const (
	MonitorV2ValueAggregationAllof MonitorV2ValueAggregation = "AllOf"
	MonitorV2ValueAggregationAnyof MonitorV2ValueAggregation = "AnyOf"
	MonitorV2ValueAggregationAvgof MonitorV2ValueAggregation = "AvgOf"
	MonitorV2ValueAggregationSumof MonitorV2ValueAggregation = "SumOf"
)

// MonitorV2WebhookAction includes the GraphQL fields of MonitorV2WebhookAction requested by the fragment MonitorV2WebhookAction.
type MonitorV2WebhookAction struct {
	// The webhook headers -- a header and a value template.
	Headers []MonitorV2WebhookHeader `json:"headers"`
	// The webhook body template.
	Body string `json:"body"`
	// Fragments allow users to bring in additional monitor or alarm metadata.
	Fragments *types.JsonObject `json:"fragments"`
	// A webhook URL template to a destination that can be rendered.
	Url string `json:"url"`
	// HTTP POST or PUT request into the webhook URL.
	Method MonitorV2HttpType `json:"method"`
}

// GetHeaders returns MonitorV2WebhookAction.Headers, and is useful for accessing the field via an interface.
func (v *MonitorV2WebhookAction) GetHeaders() []MonitorV2WebhookHeader { return v.Headers }

// GetBody returns MonitorV2WebhookAction.Body, and is useful for accessing the field via an interface.
func (v *MonitorV2WebhookAction) GetBody() string { return v.Body }

// GetFragments returns MonitorV2WebhookAction.Fragments, and is useful for accessing the field via an interface.
func (v *MonitorV2WebhookAction) GetFragments() *types.JsonObject { return v.Fragments }

// GetUrl returns MonitorV2WebhookAction.Url, and is useful for accessing the field via an interface.
func (v *MonitorV2WebhookAction) GetUrl() string { return v.Url }

// GetMethod returns MonitorV2WebhookAction.Method, and is useful for accessing the field via an interface.
func (v *MonitorV2WebhookAction) GetMethod() MonitorV2HttpType { return v.Method }

type MonitorV2WebhookActionInput struct {
	Url       string                        `json:"url"`
	Method    MonitorV2HttpType             `json:"method"`
	Headers   []MonitorV2WebhookHeaderInput `json:"headers,omitempty"`
	Body      string                        `json:"body"`
	Fragments *types.JsonObject             `json:"fragments,omitempty"`
}

// GetUrl returns MonitorV2WebhookActionInput.Url, and is useful for accessing the field via an interface.
func (v *MonitorV2WebhookActionInput) GetUrl() string { return v.Url }

// GetMethod returns MonitorV2WebhookActionInput.Method, and is useful for accessing the field via an interface.
func (v *MonitorV2WebhookActionInput) GetMethod() MonitorV2HttpType { return v.Method }

// GetHeaders returns MonitorV2WebhookActionInput.Headers, and is useful for accessing the field via an interface.
func (v *MonitorV2WebhookActionInput) GetHeaders() []MonitorV2WebhookHeaderInput { return v.Headers }

// GetBody returns MonitorV2WebhookActionInput.Body, and is useful for accessing the field via an interface.
func (v *MonitorV2WebhookActionInput) GetBody() string { return v.Body }

// GetFragments returns MonitorV2WebhookActionInput.Fragments, and is useful for accessing the field via an interface.
func (v *MonitorV2WebhookActionInput) GetFragments() *types.JsonObject { return v.Fragments }

// MonitorV2WebhookHeader includes the GraphQL fields of MonitorV2WebhookHeader requested by the fragment MonitorV2WebhookHeader.
type MonitorV2WebhookHeader struct {
	// A webhook header.
	Header string `json:"header"`
	// A value template that can be rendered.
	Value string `json:"value"`
}

// GetHeader returns MonitorV2WebhookHeader.Header, and is useful for accessing the field via an interface.
func (v *MonitorV2WebhookHeader) GetHeader() string { return v.Header }

// GetValue returns MonitorV2WebhookHeader.Value, and is useful for accessing the field via an interface.
func (v *MonitorV2WebhookHeader) GetValue() string { return v.Value }

type MonitorV2WebhookHeaderInput struct {
	Header string `json:"header"`
	Value  string `json:"value"`
}

// GetHeader returns MonitorV2WebhookHeaderInput.Header, and is useful for accessing the field via an interface.
func (v *MonitorV2WebhookHeaderInput) GetHeader() string { return v.Header }

// GetValue returns MonitorV2WebhookHeaderInput.Value, and is useful for accessing the field via an interface.
func (v *MonitorV2WebhookHeaderInput) GetValue() string { return v.Value }

type MultiStageQueryInput struct {
	OutputStage     string                  `json:"outputStage"`
	Stages          []StageQueryInput       `json:"stages"`
	Parameters      []ParameterSpecInput    `json:"parameters"`
	ParameterValues []ParameterBindingInput `json:"parameterValues"`
	Layout          *types.JsonObject       `json:"layout"`
}

// GetOutputStage returns MultiStageQueryInput.OutputStage, and is useful for accessing the field via an interface.
func (v *MultiStageQueryInput) GetOutputStage() string { return v.OutputStage }

// GetStages returns MultiStageQueryInput.Stages, and is useful for accessing the field via an interface.
func (v *MultiStageQueryInput) GetStages() []StageQueryInput { return v.Stages }

// GetParameters returns MultiStageQueryInput.Parameters, and is useful for accessing the field via an interface.
func (v *MultiStageQueryInput) GetParameters() []ParameterSpecInput { return v.Parameters }

// GetParameterValues returns MultiStageQueryInput.ParameterValues, and is useful for accessing the field via an interface.
func (v *MultiStageQueryInput) GetParameterValues() []ParameterBindingInput { return v.ParameterValues }

// GetLayout returns MultiStageQueryInput.Layout, and is useful for accessing the field via an interface.
func (v *MultiStageQueryInput) GetLayout() *types.JsonObject { return v.Layout }

type NotificationImportance string

const (
	NotificationImportanceInformational NotificationImportance = "Informational"
	NotificationImportanceImportant     NotificationImportance = "Important"
	NotificationImportanceMissing       NotificationImportance = "Missing"
)

type NotificationMerge string

const (
	NotificationMergeMerged   NotificationMerge = "Merged"
	NotificationMergeSeparate NotificationMerge = "Separate"
)

type NotificationSelection string

const (
	NotificationSelectionAny        NotificationSelection = "Any"
	NotificationSelectionAll        NotificationSelection = "All"
	NotificationSelectionPercentage NotificationSelection = "Percentage"
	NotificationSelectionCount      NotificationSelection = "Count"
)

type NotificationSpecificationInput struct {
	Importance     *NotificationImportance `json:"importance"`
	Merge          *NotificationMerge      `json:"merge"`
	Selection      *NotificationSelection  `json:"selection"`
	SelectionValue *types.NumberScalar     `json:"selectionValue"`
	// Check if we should send reminder notifications at the specified reminderFrequency.
	NotifyOnReminder *bool `json:"notifyOnReminder"`
	// Send a notification when this alert becomes inactive.
	NotifyOnClose     *bool                 `json:"notifyOnClose"`
	ReminderFrequency *types.DurationScalar `json:"reminderFrequency"`
}

// GetImportance returns NotificationSpecificationInput.Importance, and is useful for accessing the field via an interface.
func (v *NotificationSpecificationInput) GetImportance() *NotificationImportance { return v.Importance }

// GetMerge returns NotificationSpecificationInput.Merge, and is useful for accessing the field via an interface.
func (v *NotificationSpecificationInput) GetMerge() *NotificationMerge { return v.Merge }

// GetSelection returns NotificationSpecificationInput.Selection, and is useful for accessing the field via an interface.
func (v *NotificationSpecificationInput) GetSelection() *NotificationSelection { return v.Selection }

// GetSelectionValue returns NotificationSpecificationInput.SelectionValue, and is useful for accessing the field via an interface.
func (v *NotificationSpecificationInput) GetSelectionValue() *types.NumberScalar {
	return v.SelectionValue
}

// GetNotifyOnReminder returns NotificationSpecificationInput.NotifyOnReminder, and is useful for accessing the field via an interface.
func (v *NotificationSpecificationInput) GetNotifyOnReminder() *bool { return v.NotifyOnReminder }

// GetNotifyOnClose returns NotificationSpecificationInput.NotifyOnClose, and is useful for accessing the field via an interface.
func (v *NotificationSpecificationInput) GetNotifyOnClose() *bool { return v.NotifyOnClose }

// GetReminderFrequency returns NotificationSpecificationInput.ReminderFrequency, and is useful for accessing the field via an interface.
func (v *NotificationSpecificationInput) GetReminderFrequency() *types.DurationScalar {
	return v.ReminderFrequency
}

type NullOrdering string

const (
	// Default: nulls are "small" for valid-from, "big" for valid-to, and "last"
	// for other fields.
	NullOrderingDefault NullOrdering = "Default"
	NullOrderingFirst   NullOrdering = "First"
	NullOrderingLast    NullOrdering = "Last"
)

// At some point in the future, we may have Segments as business objects,
// and be able to bookmark them. Technically, we can bookmark bookmark groups, but
// there is no current UI using that feature.
type ObjectKind string

const (
	ObjectKindDataset       ObjectKind = "Dataset"
	ObjectKindWorksheet     ObjectKind = "Worksheet"
	ObjectKindBookmarkgroup ObjectKind = "BookmarkGroup"
	ObjectKindMonitor       ObjectKind = "Monitor"
	ObjectKindResource      ObjectKind = "Resource"
	ObjectKindDashboard     ObjectKind = "Dashboard"
)

type PaginationInput struct {
	// Number of rows to return in paginatedResults of initial TaskResult. May
	// be set to 0, in which case paginatedResults will only contain a cursor
	// ID. Any value < 0 (say, -1) is interpreted as "all rows" (beware of
	// large results).
	InitialRows types.Int64Scalar `json:"initialRows"`
	// Initial rollup filter (default to "all" mode if nil).
	InitialRollupFilter *RollupFilterInput `json:"initialRollupFilter"`
	// If set to true, cache the cursor so that Query.cursor() can be used to
	// fetch additional rows beyond initialRows. Omitting or setting the
	// parameter to false saves back-end resources and is to be preferred if
	// the caller knows it will not call Query.cursor().
	CacheCursor *bool `json:"cacheCursor"`
	// Choose how the cursor is cached.
	CursorCacheMode *CursorCacheMode `json:"cursorCacheMode"`
}

// GetInitialRows returns PaginationInput.InitialRows, and is useful for accessing the field via an interface.
func (v *PaginationInput) GetInitialRows() types.Int64Scalar { return v.InitialRows }

// GetInitialRollupFilter returns PaginationInput.InitialRollupFilter, and is useful for accessing the field via an interface.
func (v *PaginationInput) GetInitialRollupFilter() *RollupFilterInput { return v.InitialRollupFilter }

// GetCacheCursor returns PaginationInput.CacheCursor, and is useful for accessing the field via an interface.
func (v *PaginationInput) GetCacheCursor() *bool { return v.CacheCursor }

// GetCursorCacheMode returns PaginationInput.CursorCacheMode, and is useful for accessing the field via an interface.
func (v *PaginationInput) GetCursorCacheMode() *CursorCacheMode { return v.CursorCacheMode }

// Parameter values for queries (and defaults) are specified with
// ParameterBindingInput.
//
// For APIs that take a raw StageInput array, the parameterValues argument is in
// parallel.  For APIs that take MultiStageQueryInput, parameterValues are part
// of that query.
type ParameterBindingInput struct {
	Id    string      `json:"id"`
	Value types.Value `json:"value"`
}

// GetId returns ParameterBindingInput.Id, and is useful for accessing the field via an interface.
func (v *ParameterBindingInput) GetId() string { return v.Id }

// GetValue returns ParameterBindingInput.Value, and is useful for accessing the field via an interface.
func (v *ParameterBindingInput) GetValue() types.Value { return v.Value }

// Whever you can "save" a worksheet-like entity, you can also save the
// parameters that go with it. This is so that the worksheet component in the FE
// can have a unified API to work against. You can also save the parameterValues
// to go with it as well.
type ParameterSpecInput struct {
	// opal usable id, ideally a valid C and JavaScript identifier
	Id string `json:"id"`
	// user-readable name
	Name string `json:"name"`
	// optional default value, must match valueKind if present
	DefaultValue *types.Value       `json:"defaultValue"`
	ValueKind    ValueTypeSpecInput `json:"valueKind"`
}

// GetId returns ParameterSpecInput.Id, and is useful for accessing the field via an interface.
func (v *ParameterSpecInput) GetId() string { return v.Id }

// GetName returns ParameterSpecInput.Name, and is useful for accessing the field via an interface.
func (v *ParameterSpecInput) GetName() string { return v.Name }

// GetDefaultValue returns ParameterSpecInput.DefaultValue, and is useful for accessing the field via an interface.
func (v *ParameterSpecInput) GetDefaultValue() *types.Value { return v.DefaultValue }

// GetValueKind returns ParameterSpecInput.ValueKind, and is useful for accessing the field via an interface.
func (v *ParameterSpecInput) GetValueKind() ValueTypeSpecInput { return v.ValueKind }

// Poller includes the GraphQL fields of Poller requested by the fragment Poller.
type Poller struct {
	Id           string       `json:"id"`
	WorkspaceId  string       `json:"workspaceId"`
	CustomerId   string       `json:"customerId"`
	DatastreamId *string      `json:"datastreamId"`
	Disabled     bool         `json:"disabled"`
	Kind         PollerKind   `json:"kind"`
	Config       PollerConfig `json:"-"`
}

// GetId returns Poller.Id, and is useful for accessing the field via an interface.
func (v *Poller) GetId() string { return v.Id }

// GetWorkspaceId returns Poller.WorkspaceId, and is useful for accessing the field via an interface.
func (v *Poller) GetWorkspaceId() string { return v.WorkspaceId }

// GetCustomerId returns Poller.CustomerId, and is useful for accessing the field via an interface.
func (v *Poller) GetCustomerId() string { return v.CustomerId }

// GetDatastreamId returns Poller.DatastreamId, and is useful for accessing the field via an interface.
func (v *Poller) GetDatastreamId() *string { return v.DatastreamId }

// GetDisabled returns Poller.Disabled, and is useful for accessing the field via an interface.
func (v *Poller) GetDisabled() bool { return v.Disabled }

// GetKind returns Poller.Kind, and is useful for accessing the field via an interface.
func (v *Poller) GetKind() PollerKind { return v.Kind }

// GetConfig returns Poller.Config, and is useful for accessing the field via an interface.
func (v *Poller) GetConfig() PollerConfig { return v.Config }

func (v *Poller) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*Poller
		Config json.RawMessage `json:"config"`
		graphql.NoUnmarshalJSON
	}
	firstPass.Poller = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Config
		src := firstPass.Config
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalPollerConfig(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal Poller.Config: %w", err)
			}
		}
	}
	return nil
}

type __premarshalPoller struct {
	Id string `json:"id"`

	WorkspaceId string `json:"workspaceId"`

	CustomerId string `json:"customerId"`

	DatastreamId *string `json:"datastreamId"`

	Disabled bool `json:"disabled"`

	Kind PollerKind `json:"kind"`

	Config json.RawMessage `json:"config"`
}

func (v *Poller) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *Poller) __premarshalJSON() (*__premarshalPoller, error) {
	var retval __premarshalPoller

	retval.Id = v.Id
	retval.WorkspaceId = v.WorkspaceId
	retval.CustomerId = v.CustomerId
	retval.DatastreamId = v.DatastreamId
	retval.Disabled = v.Disabled
	retval.Kind = v.Kind
	{

		dst := &retval.Config
		src := v.Config
		var err error
		*dst, err = __marshalPollerConfig(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal Poller.Config: %w", err)
		}
	}
	return &retval, nil
}

type PollerAWSSnapshotInput struct {
	IncludeActions []string `json:"includeActions"`
	Region         string   `json:"region"`
	AssumeRoleArn  string   `json:"assumeRoleArn"`
}

// GetIncludeActions returns PollerAWSSnapshotInput.IncludeActions, and is useful for accessing the field via an interface.
func (v *PollerAWSSnapshotInput) GetIncludeActions() []string { return v.IncludeActions }

// GetRegion returns PollerAWSSnapshotInput.Region, and is useful for accessing the field via an interface.
func (v *PollerAWSSnapshotInput) GetRegion() string { return v.Region }

// GetAssumeRoleArn returns PollerAWSSnapshotInput.AssumeRoleArn, and is useful for accessing the field via an interface.
func (v *PollerAWSSnapshotInput) GetAssumeRoleArn() string { return v.AssumeRoleArn }

type PollerChunkInput struct {
	Enabled bool               `json:"enabled"`
	Size    *types.Int64Scalar `json:"size"`
}

// GetEnabled returns PollerChunkInput.Enabled, and is useful for accessing the field via an interface.
func (v *PollerChunkInput) GetEnabled() bool { return v.Enabled }

// GetSize returns PollerChunkInput.Size, and is useful for accessing the field via an interface.
func (v *PollerChunkInput) GetSize() *types.Int64Scalar { return v.Size }

type PollerCloudWatchMetricsDimensionFilterInput struct {
	Name  string  `json:"name"`
	Value *string `json:"value"`
}

// GetName returns PollerCloudWatchMetricsDimensionFilterInput.Name, and is useful for accessing the field via an interface.
func (v *PollerCloudWatchMetricsDimensionFilterInput) GetName() string { return v.Name }

// GetValue returns PollerCloudWatchMetricsDimensionFilterInput.Value, and is useful for accessing the field via an interface.
func (v *PollerCloudWatchMetricsDimensionFilterInput) GetValue() *string { return v.Value }

type PollerCloudWatchMetricsInput struct {
	Period        types.Int64Scalar                   `json:"period"`
	Delay         types.Int64Scalar                   `json:"delay"`
	Queries       []PollerCloudWatchMetricsQueryInput `json:"queries"`
	Region        string                              `json:"region"`
	AssumeRoleArn string                              `json:"assumeRoleArn"`
}

// GetPeriod returns PollerCloudWatchMetricsInput.Period, and is useful for accessing the field via an interface.
func (v *PollerCloudWatchMetricsInput) GetPeriod() types.Int64Scalar { return v.Period }

// GetDelay returns PollerCloudWatchMetricsInput.Delay, and is useful for accessing the field via an interface.
func (v *PollerCloudWatchMetricsInput) GetDelay() types.Int64Scalar { return v.Delay }

// GetQueries returns PollerCloudWatchMetricsInput.Queries, and is useful for accessing the field via an interface.
func (v *PollerCloudWatchMetricsInput) GetQueries() []PollerCloudWatchMetricsQueryInput {
	return v.Queries
}

// GetRegion returns PollerCloudWatchMetricsInput.Region, and is useful for accessing the field via an interface.
func (v *PollerCloudWatchMetricsInput) GetRegion() string { return v.Region }

// GetAssumeRoleArn returns PollerCloudWatchMetricsInput.AssumeRoleArn, and is useful for accessing the field via an interface.
func (v *PollerCloudWatchMetricsInput) GetAssumeRoleArn() string { return v.AssumeRoleArn }

type PollerCloudWatchMetricsQueryInput struct {
	Namespace      string                                        `json:"namespace"`
	MetricNames    []string                                      `json:"metricNames"`
	Dimensions     []PollerCloudWatchMetricsDimensionFilterInput `json:"dimensions"`
	ResourceFilter *PollerCloudWatchMetricsResourceFilterInput   `json:"resourceFilter"`
}

// GetNamespace returns PollerCloudWatchMetricsQueryInput.Namespace, and is useful for accessing the field via an interface.
func (v *PollerCloudWatchMetricsQueryInput) GetNamespace() string { return v.Namespace }

// GetMetricNames returns PollerCloudWatchMetricsQueryInput.MetricNames, and is useful for accessing the field via an interface.
func (v *PollerCloudWatchMetricsQueryInput) GetMetricNames() []string { return v.MetricNames }

// GetDimensions returns PollerCloudWatchMetricsQueryInput.Dimensions, and is useful for accessing the field via an interface.
func (v *PollerCloudWatchMetricsQueryInput) GetDimensions() []PollerCloudWatchMetricsDimensionFilterInput {
	return v.Dimensions
}

// GetResourceFilter returns PollerCloudWatchMetricsQueryInput.ResourceFilter, and is useful for accessing the field via an interface.
func (v *PollerCloudWatchMetricsQueryInput) GetResourceFilter() *PollerCloudWatchMetricsResourceFilterInput {
	return v.ResourceFilter
}

type PollerCloudWatchMetricsResourceFilterInput struct {
	ResourceType  *string                                 `json:"resourceType"`
	Pattern       *string                                 `json:"pattern"`
	DimensionName *string                                 `json:"dimensionName"`
	TagFilters    []PollerCloudWatchMetricsTagFilterInput `json:"tagFilters"`
}

// GetResourceType returns PollerCloudWatchMetricsResourceFilterInput.ResourceType, and is useful for accessing the field via an interface.
func (v *PollerCloudWatchMetricsResourceFilterInput) GetResourceType() *string { return v.ResourceType }

// GetPattern returns PollerCloudWatchMetricsResourceFilterInput.Pattern, and is useful for accessing the field via an interface.
func (v *PollerCloudWatchMetricsResourceFilterInput) GetPattern() *string { return v.Pattern }

// GetDimensionName returns PollerCloudWatchMetricsResourceFilterInput.DimensionName, and is useful for accessing the field via an interface.
func (v *PollerCloudWatchMetricsResourceFilterInput) GetDimensionName() *string {
	return v.DimensionName
}

// GetTagFilters returns PollerCloudWatchMetricsResourceFilterInput.TagFilters, and is useful for accessing the field via an interface.
func (v *PollerCloudWatchMetricsResourceFilterInput) GetTagFilters() []PollerCloudWatchMetricsTagFilterInput {
	return v.TagFilters
}

type PollerCloudWatchMetricsTagFilterInput struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

// GetKey returns PollerCloudWatchMetricsTagFilterInput.Key, and is useful for accessing the field via an interface.
func (v *PollerCloudWatchMetricsTagFilterInput) GetKey() string { return v.Key }

// GetValues returns PollerCloudWatchMetricsTagFilterInput.Values, and is useful for accessing the field via an interface.
func (v *PollerCloudWatchMetricsTagFilterInput) GetValues() []string { return v.Values }

// PollerConfig includes the requested fields of the GraphQL interface PollerConfig.
//
// PollerConfig is implemented by the following types:
// PollerConfigPollerAWSSnapshotConfig
// PollerConfigPollerCloudWatchMetricsConfig
// PollerConfigPollerConfluentCloudConfig
// PollerConfigPollerGCPMonitoringConfig
// PollerConfigPollerHTTPConfig
// PollerConfigPollerMongoDBAtlasConfig
// PollerConfigPollerPubSubConfig
type PollerConfig interface {
	implementsGraphQLInterfacePollerConfig()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetName returns the interface-field "name" from its implementation.
	GetName() *string
	// GetRetries returns the interface-field "retries" from its implementation.
	GetRetries() *types.Int64Scalar
	// GetInterval returns the interface-field "interval" from its implementation.
	GetInterval() *types.DurationScalar
	// GetTags returns the interface-field "tags" from its implementation.
	GetTags() *types.JsonObject
	// GetChunk returns the interface-field "chunk" from its implementation.
	GetChunk() *PollerConfigChunkPollerChunkConfig
}

func (v *PollerConfigPollerAWSSnapshotConfig) implementsGraphQLInterfacePollerConfig()       {}
func (v *PollerConfigPollerCloudWatchMetricsConfig) implementsGraphQLInterfacePollerConfig() {}
func (v *PollerConfigPollerConfluentCloudConfig) implementsGraphQLInterfacePollerConfig()    {}
func (v *PollerConfigPollerGCPMonitoringConfig) implementsGraphQLInterfacePollerConfig()     {}
func (v *PollerConfigPollerHTTPConfig) implementsGraphQLInterfacePollerConfig()              {}
func (v *PollerConfigPollerMongoDBAtlasConfig) implementsGraphQLInterfacePollerConfig()      {}
func (v *PollerConfigPollerPubSubConfig) implementsGraphQLInterfacePollerConfig()            {}

func __unmarshalPollerConfig(b []byte, v *PollerConfig) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "PollerAWSSnapshotConfig":
		*v = new(PollerConfigPollerAWSSnapshotConfig)
		return json.Unmarshal(b, *v)
	case "PollerCloudWatchMetricsConfig":
		*v = new(PollerConfigPollerCloudWatchMetricsConfig)
		return json.Unmarshal(b, *v)
	case "PollerConfluentCloudConfig":
		*v = new(PollerConfigPollerConfluentCloudConfig)
		return json.Unmarshal(b, *v)
	case "PollerGCPMonitoringConfig":
		*v = new(PollerConfigPollerGCPMonitoringConfig)
		return json.Unmarshal(b, *v)
	case "PollerHTTPConfig":
		*v = new(PollerConfigPollerHTTPConfig)
		return json.Unmarshal(b, *v)
	case "PollerMongoDBAtlasConfig":
		*v = new(PollerConfigPollerMongoDBAtlasConfig)
		return json.Unmarshal(b, *v)
	case "PollerPubSubConfig":
		*v = new(PollerConfigPollerPubSubConfig)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PollerConfig.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for PollerConfig: "%v"`, tn.TypeName)
	}
}

func __marshalPollerConfig(v *PollerConfig) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *PollerConfigPollerAWSSnapshotConfig:
		typename = "PollerAWSSnapshotConfig"

		result := struct {
			TypeName string `json:"__typename"`
			*PollerConfigPollerAWSSnapshotConfig
		}{typename, v}
		return json.Marshal(result)
	case *PollerConfigPollerCloudWatchMetricsConfig:
		typename = "PollerCloudWatchMetricsConfig"

		result := struct {
			TypeName string `json:"__typename"`
			*PollerConfigPollerCloudWatchMetricsConfig
		}{typename, v}
		return json.Marshal(result)
	case *PollerConfigPollerConfluentCloudConfig:
		typename = "PollerConfluentCloudConfig"

		result := struct {
			TypeName string `json:"__typename"`
			*PollerConfigPollerConfluentCloudConfig
		}{typename, v}
		return json.Marshal(result)
	case *PollerConfigPollerGCPMonitoringConfig:
		typename = "PollerGCPMonitoringConfig"

		result := struct {
			TypeName string `json:"__typename"`
			*PollerConfigPollerGCPMonitoringConfig
		}{typename, v}
		return json.Marshal(result)
	case *PollerConfigPollerHTTPConfig:
		typename = "PollerHTTPConfig"

		result := struct {
			TypeName string `json:"__typename"`
			*PollerConfigPollerHTTPConfig
		}{typename, v}
		return json.Marshal(result)
	case *PollerConfigPollerMongoDBAtlasConfig:
		typename = "PollerMongoDBAtlasConfig"

		result := struct {
			TypeName string `json:"__typename"`
			*PollerConfigPollerMongoDBAtlasConfig
		}{typename, v}
		return json.Marshal(result)
	case *PollerConfigPollerPubSubConfig:
		typename = "PollerPubSubConfig"

		result := struct {
			TypeName string `json:"__typename"`
			*PollerConfigPollerPubSubConfig
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for PollerConfig: "%T"`, v)
	}
}

// PollerConfigChunkPollerChunkConfig includes the requested fields of the GraphQL type PollerChunkConfig.
type PollerConfigChunkPollerChunkConfig struct {
	Enabled bool               `json:"enabled"`
	Size    *types.Int64Scalar `json:"size"`
}

// GetEnabled returns PollerConfigChunkPollerChunkConfig.Enabled, and is useful for accessing the field via an interface.
func (v *PollerConfigChunkPollerChunkConfig) GetEnabled() bool { return v.Enabled }

// GetSize returns PollerConfigChunkPollerChunkConfig.Size, and is useful for accessing the field via an interface.
func (v *PollerConfigChunkPollerChunkConfig) GetSize() *types.Int64Scalar { return v.Size }

// PollerConfigPollerAWSSnapshotConfig includes the requested fields of the GraphQL type PollerAWSSnapshotConfig.
type PollerConfigPollerAWSSnapshotConfig struct {
	Typename       *string                             `json:"__typename"`
	Name           *string                             `json:"name"`
	Retries        *types.Int64Scalar                  `json:"retries"`
	Interval       *types.DurationScalar               `json:"interval"`
	Tags           *types.JsonObject                   `json:"tags"`
	Chunk          *PollerConfigChunkPollerChunkConfig `json:"chunk"`
	Region         string                              `json:"region"`
	AssumeRoleArn  string                              `json:"assumeRoleArn"`
	IncludeActions []string                            `json:"includeActions"`
}

// GetTypename returns PollerConfigPollerAWSSnapshotConfig.Typename, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerAWSSnapshotConfig) GetTypename() *string { return v.Typename }

// GetName returns PollerConfigPollerAWSSnapshotConfig.Name, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerAWSSnapshotConfig) GetName() *string { return v.Name }

// GetRetries returns PollerConfigPollerAWSSnapshotConfig.Retries, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerAWSSnapshotConfig) GetRetries() *types.Int64Scalar { return v.Retries }

// GetInterval returns PollerConfigPollerAWSSnapshotConfig.Interval, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerAWSSnapshotConfig) GetInterval() *types.DurationScalar { return v.Interval }

// GetTags returns PollerConfigPollerAWSSnapshotConfig.Tags, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerAWSSnapshotConfig) GetTags() *types.JsonObject { return v.Tags }

// GetChunk returns PollerConfigPollerAWSSnapshotConfig.Chunk, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerAWSSnapshotConfig) GetChunk() *PollerConfigChunkPollerChunkConfig {
	return v.Chunk
}

// GetRegion returns PollerConfigPollerAWSSnapshotConfig.Region, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerAWSSnapshotConfig) GetRegion() string { return v.Region }

// GetAssumeRoleArn returns PollerConfigPollerAWSSnapshotConfig.AssumeRoleArn, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerAWSSnapshotConfig) GetAssumeRoleArn() string { return v.AssumeRoleArn }

// GetIncludeActions returns PollerConfigPollerAWSSnapshotConfig.IncludeActions, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerAWSSnapshotConfig) GetIncludeActions() []string { return v.IncludeActions }

// PollerConfigPollerCloudWatchMetricsConfig includes the requested fields of the GraphQL type PollerCloudWatchMetricsConfig.
type PollerConfigPollerCloudWatchMetricsConfig struct {
	Typename      *string                                                                              `json:"__typename"`
	Name          *string                                                                              `json:"name"`
	Retries       *types.Int64Scalar                                                                   `json:"retries"`
	Interval      *types.DurationScalar                                                                `json:"interval"`
	Tags          *types.JsonObject                                                                    `json:"tags"`
	Chunk         *PollerConfigChunkPollerChunkConfig                                                  `json:"chunk"`
	Period        types.Int64Scalar                                                                    `json:"period"`
	Delay         types.Int64Scalar                                                                    `json:"delay"`
	Region        string                                                                               `json:"region"`
	AssumeRoleArn string                                                                               `json:"assumeRoleArn"`
	Queries       []PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfig `json:"queries"`
}

// GetTypename returns PollerConfigPollerCloudWatchMetricsConfig.Typename, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfig) GetTypename() *string { return v.Typename }

// GetName returns PollerConfigPollerCloudWatchMetricsConfig.Name, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfig) GetName() *string { return v.Name }

// GetRetries returns PollerConfigPollerCloudWatchMetricsConfig.Retries, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfig) GetRetries() *types.Int64Scalar { return v.Retries }

// GetInterval returns PollerConfigPollerCloudWatchMetricsConfig.Interval, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfig) GetInterval() *types.DurationScalar {
	return v.Interval
}

// GetTags returns PollerConfigPollerCloudWatchMetricsConfig.Tags, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfig) GetTags() *types.JsonObject { return v.Tags }

// GetChunk returns PollerConfigPollerCloudWatchMetricsConfig.Chunk, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfig) GetChunk() *PollerConfigChunkPollerChunkConfig {
	return v.Chunk
}

// GetPeriod returns PollerConfigPollerCloudWatchMetricsConfig.Period, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfig) GetPeriod() types.Int64Scalar { return v.Period }

// GetDelay returns PollerConfigPollerCloudWatchMetricsConfig.Delay, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfig) GetDelay() types.Int64Scalar { return v.Delay }

// GetRegion returns PollerConfigPollerCloudWatchMetricsConfig.Region, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfig) GetRegion() string { return v.Region }

// GetAssumeRoleArn returns PollerConfigPollerCloudWatchMetricsConfig.AssumeRoleArn, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfig) GetAssumeRoleArn() string { return v.AssumeRoleArn }

// GetQueries returns PollerConfigPollerCloudWatchMetricsConfig.Queries, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfig) GetQueries() []PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfig {
	return v.Queries
}

// PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfig includes the requested fields of the GraphQL type PollerCloudWatchMetricsQueryConfig.
type PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfig struct {
	Namespace      string                                                                                                                                       `json:"namespace"`
	MetricNames    []string                                                                                                                                     `json:"metricNames"`
	Dimensions     []PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigDimensionsPollerCloudWatchMetricsDimensionFilterConfig   `json:"dimensions"`
	ResourceFilter *PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfig `json:"resourceFilter"`
}

// GetNamespace returns PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfig.Namespace, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfig) GetNamespace() string {
	return v.Namespace
}

// GetMetricNames returns PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfig.MetricNames, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfig) GetMetricNames() []string {
	return v.MetricNames
}

// GetDimensions returns PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfig.Dimensions, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfig) GetDimensions() []PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigDimensionsPollerCloudWatchMetricsDimensionFilterConfig {
	return v.Dimensions
}

// GetResourceFilter returns PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfig.ResourceFilter, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfig) GetResourceFilter() *PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfig {
	return v.ResourceFilter
}

// PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigDimensionsPollerCloudWatchMetricsDimensionFilterConfig includes the requested fields of the GraphQL type PollerCloudWatchMetricsDimensionFilterConfig.
type PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigDimensionsPollerCloudWatchMetricsDimensionFilterConfig struct {
	Name  string  `json:"name"`
	Value *string `json:"value"`
}

// GetName returns PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigDimensionsPollerCloudWatchMetricsDimensionFilterConfig.Name, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigDimensionsPollerCloudWatchMetricsDimensionFilterConfig) GetName() string {
	return v.Name
}

// GetValue returns PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigDimensionsPollerCloudWatchMetricsDimensionFilterConfig.Value, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigDimensionsPollerCloudWatchMetricsDimensionFilterConfig) GetValue() *string {
	return v.Value
}

// PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfig includes the requested fields of the GraphQL type PollerCloudWatchMetricsResourceFilterConfig.
type PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfig struct {
	ResourceType  *string                                                                                                                                                                                       `json:"resourceType"`
	Pattern       *string                                                                                                                                                                                       `json:"pattern"`
	DimensionName *string                                                                                                                                                                                       `json:"dimensionName"`
	TagFilters    []PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfigTagFiltersPollerCloudWatchMetricsTagFilterConfig `json:"tagFilters"`
}

// GetResourceType returns PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfig.ResourceType, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfig) GetResourceType() *string {
	return v.ResourceType
}

// GetPattern returns PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfig.Pattern, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfig) GetPattern() *string {
	return v.Pattern
}

// GetDimensionName returns PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfig.DimensionName, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfig) GetDimensionName() *string {
	return v.DimensionName
}

// GetTagFilters returns PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfig.TagFilters, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfig) GetTagFilters() []PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfigTagFiltersPollerCloudWatchMetricsTagFilterConfig {
	return v.TagFilters
}

// PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfigTagFiltersPollerCloudWatchMetricsTagFilterConfig includes the requested fields of the GraphQL type PollerCloudWatchMetricsTagFilterConfig.
type PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfigTagFiltersPollerCloudWatchMetricsTagFilterConfig struct {
	Key    string   `json:"key"`
	Values []string `json:"values"`
}

// GetKey returns PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfigTagFiltersPollerCloudWatchMetricsTagFilterConfig.Key, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfigTagFiltersPollerCloudWatchMetricsTagFilterConfig) GetKey() string {
	return v.Key
}

// GetValues returns PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfigTagFiltersPollerCloudWatchMetricsTagFilterConfig.Values, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerCloudWatchMetricsConfigQueriesPollerCloudWatchMetricsQueryConfigResourceFilterPollerCloudWatchMetricsResourceFilterConfigTagFiltersPollerCloudWatchMetricsTagFilterConfig) GetValues() []string {
	return v.Values
}

// PollerConfigPollerConfluentCloudConfig includes the requested fields of the GraphQL type PollerConfluentCloudConfig.
type PollerConfigPollerConfluentCloudConfig struct {
	Typename *string                             `json:"__typename"`
	Name     *string                             `json:"name"`
	Retries  *types.Int64Scalar                  `json:"retries"`
	Interval *types.DurationScalar               `json:"interval"`
	Tags     *types.JsonObject                   `json:"tags"`
	Chunk    *PollerConfigChunkPollerChunkConfig `json:"chunk"`
}

// GetTypename returns PollerConfigPollerConfluentCloudConfig.Typename, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerConfluentCloudConfig) GetTypename() *string { return v.Typename }

// GetName returns PollerConfigPollerConfluentCloudConfig.Name, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerConfluentCloudConfig) GetName() *string { return v.Name }

// GetRetries returns PollerConfigPollerConfluentCloudConfig.Retries, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerConfluentCloudConfig) GetRetries() *types.Int64Scalar { return v.Retries }

// GetInterval returns PollerConfigPollerConfluentCloudConfig.Interval, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerConfluentCloudConfig) GetInterval() *types.DurationScalar {
	return v.Interval
}

// GetTags returns PollerConfigPollerConfluentCloudConfig.Tags, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerConfluentCloudConfig) GetTags() *types.JsonObject { return v.Tags }

// GetChunk returns PollerConfigPollerConfluentCloudConfig.Chunk, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerConfluentCloudConfig) GetChunk() *PollerConfigChunkPollerChunkConfig {
	return v.Chunk
}

// PollerConfigPollerGCPMonitoringConfig includes the requested fields of the GraphQL type PollerGCPMonitoringConfig.
type PollerConfigPollerGCPMonitoringConfig struct {
	Typename                  *string                             `json:"__typename"`
	Name                      *string                             `json:"name"`
	Retries                   *types.Int64Scalar                  `json:"retries"`
	Interval                  *types.DurationScalar               `json:"interval"`
	Tags                      *types.JsonObject                   `json:"tags"`
	Chunk                     *PollerConfigChunkPollerChunkConfig `json:"chunk"`
	ProjectId                 string                              `json:"projectId"`
	JsonKey                   types.JsonObject                    `json:"jsonKey"`
	IncludeMetricTypePrefixes []string                            `json:"includeMetricTypePrefixes"`
	ExcludeMetricTypePrefixes []string                            `json:"excludeMetricTypePrefixes"`
	RateLimit                 *types.Int64Scalar                  `json:"rateLimit"`
	TotalLimit                *types.Int64Scalar                  `json:"totalLimit"`
}

// GetTypename returns PollerConfigPollerGCPMonitoringConfig.Typename, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetTypename() *string { return v.Typename }

// GetName returns PollerConfigPollerGCPMonitoringConfig.Name, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetName() *string { return v.Name }

// GetRetries returns PollerConfigPollerGCPMonitoringConfig.Retries, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetRetries() *types.Int64Scalar { return v.Retries }

// GetInterval returns PollerConfigPollerGCPMonitoringConfig.Interval, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetInterval() *types.DurationScalar {
	return v.Interval
}

// GetTags returns PollerConfigPollerGCPMonitoringConfig.Tags, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetTags() *types.JsonObject { return v.Tags }

// GetChunk returns PollerConfigPollerGCPMonitoringConfig.Chunk, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetChunk() *PollerConfigChunkPollerChunkConfig {
	return v.Chunk
}

// GetProjectId returns PollerConfigPollerGCPMonitoringConfig.ProjectId, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetProjectId() string { return v.ProjectId }

// GetJsonKey returns PollerConfigPollerGCPMonitoringConfig.JsonKey, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetJsonKey() types.JsonObject { return v.JsonKey }

// GetIncludeMetricTypePrefixes returns PollerConfigPollerGCPMonitoringConfig.IncludeMetricTypePrefixes, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetIncludeMetricTypePrefixes() []string {
	return v.IncludeMetricTypePrefixes
}

// GetExcludeMetricTypePrefixes returns PollerConfigPollerGCPMonitoringConfig.ExcludeMetricTypePrefixes, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetExcludeMetricTypePrefixes() []string {
	return v.ExcludeMetricTypePrefixes
}

// GetRateLimit returns PollerConfigPollerGCPMonitoringConfig.RateLimit, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetRateLimit() *types.Int64Scalar { return v.RateLimit }

// GetTotalLimit returns PollerConfigPollerGCPMonitoringConfig.TotalLimit, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerGCPMonitoringConfig) GetTotalLimit() *types.Int64Scalar {
	return v.TotalLimit
}

// PollerConfigPollerHTTPConfig includes the requested fields of the GraphQL type PollerHTTPConfig.
type PollerConfigPollerHTTPConfig struct {
	Typename    *string                             `json:"__typename"`
	Name        *string                             `json:"name"`
	Retries     *types.Int64Scalar                  `json:"retries"`
	Interval    *types.DurationScalar               `json:"interval"`
	Tags        *types.JsonObject                   `json:"tags"`
	Chunk       *PollerConfigChunkPollerChunkConfig `json:"chunk"`
	Method      *string                             `json:"method"`
	Body        *string                             `json:"body"`
	Endpoint    *string                             `json:"endpoint"`
	ContentType *string                             `json:"contentType"`
	Headers     *types.JsonObject                   `json:"headers"`
	// Default HTTP request configuration that will be used for all requests. Keys declared in requests will override these values.
	Template   *HttpRequestConfig                                                `json:"template"`
	Requests   []HttpRequestConfig                                               `json:"requests"`
	Rules      []PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig           `json:"rules"`
	Timestamps []PollerConfigPollerHTTPConfigTimestampsPollerHTTPTimestampConfig `json:"timestamps"`
}

// GetTypename returns PollerConfigPollerHTTPConfig.Typename, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetTypename() *string { return v.Typename }

// GetName returns PollerConfigPollerHTTPConfig.Name, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetName() *string { return v.Name }

// GetRetries returns PollerConfigPollerHTTPConfig.Retries, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetRetries() *types.Int64Scalar { return v.Retries }

// GetInterval returns PollerConfigPollerHTTPConfig.Interval, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetInterval() *types.DurationScalar { return v.Interval }

// GetTags returns PollerConfigPollerHTTPConfig.Tags, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetTags() *types.JsonObject { return v.Tags }

// GetChunk returns PollerConfigPollerHTTPConfig.Chunk, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetChunk() *PollerConfigChunkPollerChunkConfig { return v.Chunk }

// GetMethod returns PollerConfigPollerHTTPConfig.Method, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetMethod() *string { return v.Method }

// GetBody returns PollerConfigPollerHTTPConfig.Body, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetBody() *string { return v.Body }

// GetEndpoint returns PollerConfigPollerHTTPConfig.Endpoint, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetEndpoint() *string { return v.Endpoint }

// GetContentType returns PollerConfigPollerHTTPConfig.ContentType, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetContentType() *string { return v.ContentType }

// GetHeaders returns PollerConfigPollerHTTPConfig.Headers, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetHeaders() *types.JsonObject { return v.Headers }

// GetTemplate returns PollerConfigPollerHTTPConfig.Template, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetTemplate() *HttpRequestConfig { return v.Template }

// GetRequests returns PollerConfigPollerHTTPConfig.Requests, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetRequests() []HttpRequestConfig { return v.Requests }

// GetRules returns PollerConfigPollerHTTPConfig.Rules, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetRules() []PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig {
	return v.Rules
}

// GetTimestamps returns PollerConfigPollerHTTPConfig.Timestamps, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfig) GetTimestamps() []PollerConfigPollerHTTPConfigTimestampsPollerHTTPTimestampConfig {
	return v.Timestamps
}

// PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig includes the requested fields of the GraphQL type PollerHTTPRuleConfig.
type PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig struct {
	Match   *HttpRequestConfig                                                                   `json:"match"`
	Follow  *string                                                                              `json:"follow"`
	Decoder *PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfigDecoderPollerHTTPDecoderConfig `json:"decoder"`
}

// GetMatch returns PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig.Match, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig) GetMatch() *HttpRequestConfig {
	return v.Match
}

// GetFollow returns PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig.Follow, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig) GetFollow() *string { return v.Follow }

// GetDecoder returns PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig.Decoder, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfig) GetDecoder() *PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfigDecoderPollerHTTPDecoderConfig {
	return v.Decoder
}

// PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfigDecoderPollerHTTPDecoderConfig includes the requested fields of the GraphQL type PollerHTTPDecoderConfig.
type PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfigDecoderPollerHTTPDecoderConfig struct {
	Type string `json:"type"`
}

// GetType returns PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfigDecoderPollerHTTPDecoderConfig.Type, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfigRulesPollerHTTPRuleConfigDecoderPollerHTTPDecoderConfig) GetType() string {
	return v.Type
}

// PollerConfigPollerHTTPConfigTimestampsPollerHTTPTimestampConfig includes the requested fields of the GraphQL type PollerHTTPTimestampConfig.
type PollerConfigPollerHTTPConfigTimestampsPollerHTTPTimestampConfig struct {
	Name     *string                          `json:"name"`
	Source   *string                          `json:"source"`
	Format   *PollerHTTPTimestampFormatScheme `json:"format"`
	Offset   *string                          `json:"offset"`
	Truncate *string                          `json:"truncate"`
}

// GetName returns PollerConfigPollerHTTPConfigTimestampsPollerHTTPTimestampConfig.Name, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfigTimestampsPollerHTTPTimestampConfig) GetName() *string {
	return v.Name
}

// GetSource returns PollerConfigPollerHTTPConfigTimestampsPollerHTTPTimestampConfig.Source, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfigTimestampsPollerHTTPTimestampConfig) GetSource() *string {
	return v.Source
}

// GetFormat returns PollerConfigPollerHTTPConfigTimestampsPollerHTTPTimestampConfig.Format, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfigTimestampsPollerHTTPTimestampConfig) GetFormat() *PollerHTTPTimestampFormatScheme {
	return v.Format
}

// GetOffset returns PollerConfigPollerHTTPConfigTimestampsPollerHTTPTimestampConfig.Offset, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfigTimestampsPollerHTTPTimestampConfig) GetOffset() *string {
	return v.Offset
}

// GetTruncate returns PollerConfigPollerHTTPConfigTimestampsPollerHTTPTimestampConfig.Truncate, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerHTTPConfigTimestampsPollerHTTPTimestampConfig) GetTruncate() *string {
	return v.Truncate
}

// PollerConfigPollerMongoDBAtlasConfig includes the requested fields of the GraphQL type PollerMongoDBAtlasConfig.
type PollerConfigPollerMongoDBAtlasConfig struct {
	Typename      *string                             `json:"__typename"`
	Name          *string                             `json:"name"`
	Retries       *types.Int64Scalar                  `json:"retries"`
	Interval      *types.DurationScalar               `json:"interval"`
	Tags          *types.JsonObject                   `json:"tags"`
	Chunk         *PollerConfigChunkPollerChunkConfig `json:"chunk"`
	PublicKey     string                              `json:"publicKey"`
	PrivateKey    string                              `json:"privateKey"`
	IncludeGroups []string                            `json:"includeGroups"`
	ExcludeGroups []string                            `json:"excludeGroups"`
}

// GetTypename returns PollerConfigPollerMongoDBAtlasConfig.Typename, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetTypename() *string { return v.Typename }

// GetName returns PollerConfigPollerMongoDBAtlasConfig.Name, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetName() *string { return v.Name }

// GetRetries returns PollerConfigPollerMongoDBAtlasConfig.Retries, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetRetries() *types.Int64Scalar { return v.Retries }

// GetInterval returns PollerConfigPollerMongoDBAtlasConfig.Interval, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetInterval() *types.DurationScalar { return v.Interval }

// GetTags returns PollerConfigPollerMongoDBAtlasConfig.Tags, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetTags() *types.JsonObject { return v.Tags }

// GetChunk returns PollerConfigPollerMongoDBAtlasConfig.Chunk, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetChunk() *PollerConfigChunkPollerChunkConfig {
	return v.Chunk
}

// GetPublicKey returns PollerConfigPollerMongoDBAtlasConfig.PublicKey, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetPublicKey() string { return v.PublicKey }

// GetPrivateKey returns PollerConfigPollerMongoDBAtlasConfig.PrivateKey, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetPrivateKey() string { return v.PrivateKey }

// GetIncludeGroups returns PollerConfigPollerMongoDBAtlasConfig.IncludeGroups, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetIncludeGroups() []string { return v.IncludeGroups }

// GetExcludeGroups returns PollerConfigPollerMongoDBAtlasConfig.ExcludeGroups, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerMongoDBAtlasConfig) GetExcludeGroups() []string { return v.ExcludeGroups }

// PollerConfigPollerPubSubConfig includes the requested fields of the GraphQL type PollerPubSubConfig.
type PollerConfigPollerPubSubConfig struct {
	Typename       *string                             `json:"__typename"`
	Name           *string                             `json:"name"`
	Retries        *types.Int64Scalar                  `json:"retries"`
	Interval       *types.DurationScalar               `json:"interval"`
	Tags           *types.JsonObject                   `json:"tags"`
	Chunk          *PollerConfigChunkPollerChunkConfig `json:"chunk"`
	ProjectId      string                              `json:"projectId"`
	JsonKey        types.JsonObject                    `json:"jsonKey"`
	SubscriptionId string                              `json:"subscriptionId"`
}

// GetTypename returns PollerConfigPollerPubSubConfig.Typename, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerPubSubConfig) GetTypename() *string { return v.Typename }

// GetName returns PollerConfigPollerPubSubConfig.Name, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerPubSubConfig) GetName() *string { return v.Name }

// GetRetries returns PollerConfigPollerPubSubConfig.Retries, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerPubSubConfig) GetRetries() *types.Int64Scalar { return v.Retries }

// GetInterval returns PollerConfigPollerPubSubConfig.Interval, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerPubSubConfig) GetInterval() *types.DurationScalar { return v.Interval }

// GetTags returns PollerConfigPollerPubSubConfig.Tags, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerPubSubConfig) GetTags() *types.JsonObject { return v.Tags }

// GetChunk returns PollerConfigPollerPubSubConfig.Chunk, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerPubSubConfig) GetChunk() *PollerConfigChunkPollerChunkConfig {
	return v.Chunk
}

// GetProjectId returns PollerConfigPollerPubSubConfig.ProjectId, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerPubSubConfig) GetProjectId() string { return v.ProjectId }

// GetJsonKey returns PollerConfigPollerPubSubConfig.JsonKey, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerPubSubConfig) GetJsonKey() types.JsonObject { return v.JsonKey }

// GetSubscriptionId returns PollerConfigPollerPubSubConfig.SubscriptionId, and is useful for accessing the field via an interface.
func (v *PollerConfigPollerPubSubConfig) GetSubscriptionId() string { return v.SubscriptionId }

type PollerConfluentCloudInput struct {
	Key    string `json:"key"`
	Secret string `json:"secret"`
}

// GetKey returns PollerConfluentCloudInput.Key, and is useful for accessing the field via an interface.
func (v *PollerConfluentCloudInput) GetKey() string { return v.Key }

// GetSecret returns PollerConfluentCloudInput.Secret, and is useful for accessing the field via an interface.
func (v *PollerConfluentCloudInput) GetSecret() string { return v.Secret }

type PollerGCPMonitoringInput struct {
	ProjectId                 string             `json:"projectId"`
	JsonKey                   types.JsonObject   `json:"jsonKey"`
	IncludeMetricTypePrefixes []string           `json:"includeMetricTypePrefixes"`
	ExcludeMetricTypePrefixes []string           `json:"excludeMetricTypePrefixes"`
	RateLimit                 *types.Int64Scalar `json:"rateLimit"`
	TotalLimit                *types.Int64Scalar `json:"totalLimit"`
}

// GetProjectId returns PollerGCPMonitoringInput.ProjectId, and is useful for accessing the field via an interface.
func (v *PollerGCPMonitoringInput) GetProjectId() string { return v.ProjectId }

// GetJsonKey returns PollerGCPMonitoringInput.JsonKey, and is useful for accessing the field via an interface.
func (v *PollerGCPMonitoringInput) GetJsonKey() types.JsonObject { return v.JsonKey }

// GetIncludeMetricTypePrefixes returns PollerGCPMonitoringInput.IncludeMetricTypePrefixes, and is useful for accessing the field via an interface.
func (v *PollerGCPMonitoringInput) GetIncludeMetricTypePrefixes() []string {
	return v.IncludeMetricTypePrefixes
}

// GetExcludeMetricTypePrefixes returns PollerGCPMonitoringInput.ExcludeMetricTypePrefixes, and is useful for accessing the field via an interface.
func (v *PollerGCPMonitoringInput) GetExcludeMetricTypePrefixes() []string {
	return v.ExcludeMetricTypePrefixes
}

// GetRateLimit returns PollerGCPMonitoringInput.RateLimit, and is useful for accessing the field via an interface.
func (v *PollerGCPMonitoringInput) GetRateLimit() *types.Int64Scalar { return v.RateLimit }

// GetTotalLimit returns PollerGCPMonitoringInput.TotalLimit, and is useful for accessing the field via an interface.
func (v *PollerGCPMonitoringInput) GetTotalLimit() *types.Int64Scalar { return v.TotalLimit }

type PollerHTTPDecoderInput struct {
	Type string `json:"type"`
}

// GetType returns PollerHTTPDecoderInput.Type, and is useful for accessing the field via an interface.
func (v *PollerHTTPDecoderInput) GetType() string { return v.Type }

type PollerHTTPInput struct {
	Method      *string                    `json:"method"`
	Body        *string                    `json:"body"`
	Endpoint    *string                    `json:"endpoint"`
	ContentType *string                    `json:"contentType"`
	Headers     *types.JsonObject          `json:"headers"`
	Template    *PollerHTTPRequestInput    `json:"template"`
	Requests    []PollerHTTPRequestInput   `json:"requests"`
	Rules       []PollerHTTPRuleInput      `json:"rules"`
	Timestamps  []PollerHTTPTimestampInput `json:"timestamps"`
}

// GetMethod returns PollerHTTPInput.Method, and is useful for accessing the field via an interface.
func (v *PollerHTTPInput) GetMethod() *string { return v.Method }

// GetBody returns PollerHTTPInput.Body, and is useful for accessing the field via an interface.
func (v *PollerHTTPInput) GetBody() *string { return v.Body }

// GetEndpoint returns PollerHTTPInput.Endpoint, and is useful for accessing the field via an interface.
func (v *PollerHTTPInput) GetEndpoint() *string { return v.Endpoint }

// GetContentType returns PollerHTTPInput.ContentType, and is useful for accessing the field via an interface.
func (v *PollerHTTPInput) GetContentType() *string { return v.ContentType }

// GetHeaders returns PollerHTTPInput.Headers, and is useful for accessing the field via an interface.
func (v *PollerHTTPInput) GetHeaders() *types.JsonObject { return v.Headers }

// GetTemplate returns PollerHTTPInput.Template, and is useful for accessing the field via an interface.
func (v *PollerHTTPInput) GetTemplate() *PollerHTTPRequestInput { return v.Template }

// GetRequests returns PollerHTTPInput.Requests, and is useful for accessing the field via an interface.
func (v *PollerHTTPInput) GetRequests() []PollerHTTPRequestInput { return v.Requests }

// GetRules returns PollerHTTPInput.Rules, and is useful for accessing the field via an interface.
func (v *PollerHTTPInput) GetRules() []PollerHTTPRuleInput { return v.Rules }

// GetTimestamps returns PollerHTTPInput.Timestamps, and is useful for accessing the field via an interface.
func (v *PollerHTTPInput) GetTimestamps() []PollerHTTPTimestampInput { return v.Timestamps }

type PollerHTTPRequestAuthScheme string

const (
	PollerHTTPRequestAuthSchemeBasic  PollerHTTPRequestAuthScheme = "Basic"
	PollerHTTPRequestAuthSchemeDigest PollerHTTPRequestAuthScheme = "Digest"
)

type PollerHTTPRequestInput struct {
	Url        *string                      `json:"url"`
	Method     *string                      `json:"method"`
	Username   *string                      `json:"username"`
	Password   *string                      `json:"password"`
	AuthScheme *PollerHTTPRequestAuthScheme `json:"authScheme"`
	Body       *string                      `json:"body"`
	Headers    *types.JsonObject            `json:"headers"`
	Params     *types.JsonObject            `json:"params"`
}

// GetUrl returns PollerHTTPRequestInput.Url, and is useful for accessing the field via an interface.
func (v *PollerHTTPRequestInput) GetUrl() *string { return v.Url }

// GetMethod returns PollerHTTPRequestInput.Method, and is useful for accessing the field via an interface.
func (v *PollerHTTPRequestInput) GetMethod() *string { return v.Method }

// GetUsername returns PollerHTTPRequestInput.Username, and is useful for accessing the field via an interface.
func (v *PollerHTTPRequestInput) GetUsername() *string { return v.Username }

// GetPassword returns PollerHTTPRequestInput.Password, and is useful for accessing the field via an interface.
func (v *PollerHTTPRequestInput) GetPassword() *string { return v.Password }

// GetAuthScheme returns PollerHTTPRequestInput.AuthScheme, and is useful for accessing the field via an interface.
func (v *PollerHTTPRequestInput) GetAuthScheme() *PollerHTTPRequestAuthScheme { return v.AuthScheme }

// GetBody returns PollerHTTPRequestInput.Body, and is useful for accessing the field via an interface.
func (v *PollerHTTPRequestInput) GetBody() *string { return v.Body }

// GetHeaders returns PollerHTTPRequestInput.Headers, and is useful for accessing the field via an interface.
func (v *PollerHTTPRequestInput) GetHeaders() *types.JsonObject { return v.Headers }

// GetParams returns PollerHTTPRequestInput.Params, and is useful for accessing the field via an interface.
func (v *PollerHTTPRequestInput) GetParams() *types.JsonObject { return v.Params }

type PollerHTTPRuleInput struct {
	Match   *PollerHTTPRequestInput `json:"match"`
	Decoder *PollerHTTPDecoderInput `json:"decoder"`
	Follow  *string                 `json:"follow"`
}

// GetMatch returns PollerHTTPRuleInput.Match, and is useful for accessing the field via an interface.
func (v *PollerHTTPRuleInput) GetMatch() *PollerHTTPRequestInput { return v.Match }

// GetDecoder returns PollerHTTPRuleInput.Decoder, and is useful for accessing the field via an interface.
func (v *PollerHTTPRuleInput) GetDecoder() *PollerHTTPDecoderInput { return v.Decoder }

// GetFollow returns PollerHTTPRuleInput.Follow, and is useful for accessing the field via an interface.
func (v *PollerHTTPRuleInput) GetFollow() *string { return v.Follow }

type PollerHTTPTimestampFormatScheme string

const (
	PollerHTTPTimestampFormatSchemeAnsic       PollerHTTPTimestampFormatScheme = "ANSIC"
	PollerHTTPTimestampFormatSchemeUnixdate    PollerHTTPTimestampFormatScheme = "UnixDate"
	PollerHTTPTimestampFormatSchemeRubydate    PollerHTTPTimestampFormatScheme = "RubyDate"
	PollerHTTPTimestampFormatSchemeRfc822      PollerHTTPTimestampFormatScheme = "RFC822"
	PollerHTTPTimestampFormatSchemeRfc822z     PollerHTTPTimestampFormatScheme = "RFC822Z"
	PollerHTTPTimestampFormatSchemeRfc850      PollerHTTPTimestampFormatScheme = "RFC850"
	PollerHTTPTimestampFormatSchemeRfc1123     PollerHTTPTimestampFormatScheme = "RFC1123"
	PollerHTTPTimestampFormatSchemeRfc1123z    PollerHTTPTimestampFormatScheme = "RFC1123Z"
	PollerHTTPTimestampFormatSchemeRfc3339     PollerHTTPTimestampFormatScheme = "RFC3339"
	PollerHTTPTimestampFormatSchemeRfc3339nano PollerHTTPTimestampFormatScheme = "RFC3339Nano"
	PollerHTTPTimestampFormatSchemeKitchen     PollerHTTPTimestampFormatScheme = "Kitchen"
	PollerHTTPTimestampFormatSchemeUnix        PollerHTTPTimestampFormatScheme = "Unix"
	PollerHTTPTimestampFormatSchemeUnixmilli   PollerHTTPTimestampFormatScheme = "UnixMilli"
	PollerHTTPTimestampFormatSchemeUnixmicro   PollerHTTPTimestampFormatScheme = "UnixMicro"
	PollerHTTPTimestampFormatSchemeUnixmano    PollerHTTPTimestampFormatScheme = "UnixMano"
)

type PollerHTTPTimestampInput struct {
	Name     *string                          `json:"name"`
	Source   *string                          `json:"source"`
	Format   *PollerHTTPTimestampFormatScheme `json:"format"`
	Offset   *string                          `json:"offset"`
	Truncate *string                          `json:"truncate"`
}

// GetName returns PollerHTTPTimestampInput.Name, and is useful for accessing the field via an interface.
func (v *PollerHTTPTimestampInput) GetName() *string { return v.Name }

// GetSource returns PollerHTTPTimestampInput.Source, and is useful for accessing the field via an interface.
func (v *PollerHTTPTimestampInput) GetSource() *string { return v.Source }

// GetFormat returns PollerHTTPTimestampInput.Format, and is useful for accessing the field via an interface.
func (v *PollerHTTPTimestampInput) GetFormat() *PollerHTTPTimestampFormatScheme { return v.Format }

// GetOffset returns PollerHTTPTimestampInput.Offset, and is useful for accessing the field via an interface.
func (v *PollerHTTPTimestampInput) GetOffset() *string { return v.Offset }

// GetTruncate returns PollerHTTPTimestampInput.Truncate, and is useful for accessing the field via an interface.
func (v *PollerHTTPTimestampInput) GetTruncate() *string { return v.Truncate }

// Config is mandatory, but varies based on the poller kind
type PollerInput struct {
	Name                    *string                       `json:"name"`
	Description             *string                       `json:"description"`
	Disabled                *bool                         `json:"disabled"`
	Retries                 *types.Int64Scalar            `json:"retries"`
	Interval                *types.DurationScalar         `json:"interval"`
	Chunk                   *PollerChunkInput             `json:"chunk"`
	Tags                    *types.JsonObject             `json:"tags"`
	ApiReqLimit             *RateLimitInput               `json:"apiReqLimit"`
	DatastreamId            *string                       `json:"datastreamId"`
	PubsubConfig            *PollerPubSubInput            `json:"pubsubConfig"`
	HttpConfig              *PollerHTTPInput              `json:"httpConfig"`
	GcpConfig               *PollerGCPMonitoringInput     `json:"gcpConfig"`
	MongoDBAtlasConfig      *PollerMongoDBAtlasInput      `json:"mongoDBAtlasConfig"`
	ConfluentCloudConfig    *PollerConfluentCloudInput    `json:"confluentCloudConfig"`
	CloudWatchMetricsConfig *PollerCloudWatchMetricsInput `json:"cloudWatchMetricsConfig"`
	AwsSnapshotConfig       *PollerAWSSnapshotInput       `json:"awsSnapshotConfig"`
	SkipExternalValidation  *bool                         `json:"skipExternalValidation"`
	// The optional id of the object that owns the poller. Ex: The id of an AppDataSource instance.
	ManagedById *string `json:"managedById"`
}

// GetName returns PollerInput.Name, and is useful for accessing the field via an interface.
func (v *PollerInput) GetName() *string { return v.Name }

// GetDescription returns PollerInput.Description, and is useful for accessing the field via an interface.
func (v *PollerInput) GetDescription() *string { return v.Description }

// GetDisabled returns PollerInput.Disabled, and is useful for accessing the field via an interface.
func (v *PollerInput) GetDisabled() *bool { return v.Disabled }

// GetRetries returns PollerInput.Retries, and is useful for accessing the field via an interface.
func (v *PollerInput) GetRetries() *types.Int64Scalar { return v.Retries }

// GetInterval returns PollerInput.Interval, and is useful for accessing the field via an interface.
func (v *PollerInput) GetInterval() *types.DurationScalar { return v.Interval }

// GetChunk returns PollerInput.Chunk, and is useful for accessing the field via an interface.
func (v *PollerInput) GetChunk() *PollerChunkInput { return v.Chunk }

// GetTags returns PollerInput.Tags, and is useful for accessing the field via an interface.
func (v *PollerInput) GetTags() *types.JsonObject { return v.Tags }

// GetApiReqLimit returns PollerInput.ApiReqLimit, and is useful for accessing the field via an interface.
func (v *PollerInput) GetApiReqLimit() *RateLimitInput { return v.ApiReqLimit }

// GetDatastreamId returns PollerInput.DatastreamId, and is useful for accessing the field via an interface.
func (v *PollerInput) GetDatastreamId() *string { return v.DatastreamId }

// GetPubsubConfig returns PollerInput.PubsubConfig, and is useful for accessing the field via an interface.
func (v *PollerInput) GetPubsubConfig() *PollerPubSubInput { return v.PubsubConfig }

// GetHttpConfig returns PollerInput.HttpConfig, and is useful for accessing the field via an interface.
func (v *PollerInput) GetHttpConfig() *PollerHTTPInput { return v.HttpConfig }

// GetGcpConfig returns PollerInput.GcpConfig, and is useful for accessing the field via an interface.
func (v *PollerInput) GetGcpConfig() *PollerGCPMonitoringInput { return v.GcpConfig }

// GetMongoDBAtlasConfig returns PollerInput.MongoDBAtlasConfig, and is useful for accessing the field via an interface.
func (v *PollerInput) GetMongoDBAtlasConfig() *PollerMongoDBAtlasInput { return v.MongoDBAtlasConfig }

// GetConfluentCloudConfig returns PollerInput.ConfluentCloudConfig, and is useful for accessing the field via an interface.
func (v *PollerInput) GetConfluentCloudConfig() *PollerConfluentCloudInput {
	return v.ConfluentCloudConfig
}

// GetCloudWatchMetricsConfig returns PollerInput.CloudWatchMetricsConfig, and is useful for accessing the field via an interface.
func (v *PollerInput) GetCloudWatchMetricsConfig() *PollerCloudWatchMetricsInput {
	return v.CloudWatchMetricsConfig
}

// GetAwsSnapshotConfig returns PollerInput.AwsSnapshotConfig, and is useful for accessing the field via an interface.
func (v *PollerInput) GetAwsSnapshotConfig() *PollerAWSSnapshotInput { return v.AwsSnapshotConfig }

// GetSkipExternalValidation returns PollerInput.SkipExternalValidation, and is useful for accessing the field via an interface.
func (v *PollerInput) GetSkipExternalValidation() *bool { return v.SkipExternalValidation }

// GetManagedById returns PollerInput.ManagedById, and is useful for accessing the field via an interface.
func (v *PollerInput) GetManagedById() *string { return v.ManagedById }

type PollerKind string

const (
	PollerKindPubsub            PollerKind = "PubSub"
	PollerKindHttp              PollerKind = "HTTP"
	PollerKindGcpmonitoring     PollerKind = "GCPMonitoring"
	PollerKindMongodbatlas      PollerKind = "MongoDBAtlas"
	PollerKindConfluentcloud    PollerKind = "ConfluentCloud"
	PollerKindCloudwatchmetrics PollerKind = "CloudWatchMetrics"
	PollerKindAwssnapshot       PollerKind = "AWSSnapshot"
)

type PollerMongoDBAtlasInput struct {
	PublicKey     string   `json:"publicKey"`
	PrivateKey    string   `json:"privateKey"`
	IncludeGroups []string `json:"includeGroups"`
	ExcludeGroups []string `json:"excludeGroups"`
}

// GetPublicKey returns PollerMongoDBAtlasInput.PublicKey, and is useful for accessing the field via an interface.
func (v *PollerMongoDBAtlasInput) GetPublicKey() string { return v.PublicKey }

// GetPrivateKey returns PollerMongoDBAtlasInput.PrivateKey, and is useful for accessing the field via an interface.
func (v *PollerMongoDBAtlasInput) GetPrivateKey() string { return v.PrivateKey }

// GetIncludeGroups returns PollerMongoDBAtlasInput.IncludeGroups, and is useful for accessing the field via an interface.
func (v *PollerMongoDBAtlasInput) GetIncludeGroups() []string { return v.IncludeGroups }

// GetExcludeGroups returns PollerMongoDBAtlasInput.ExcludeGroups, and is useful for accessing the field via an interface.
func (v *PollerMongoDBAtlasInput) GetExcludeGroups() []string { return v.ExcludeGroups }

type PollerPubSubInput struct {
	ProjectId      string           `json:"projectId"`
	JsonKey        types.JsonObject `json:"jsonKey"`
	SubscriptionId string           `json:"subscriptionId"`
}

// GetProjectId returns PollerPubSubInput.ProjectId, and is useful for accessing the field via an interface.
func (v *PollerPubSubInput) GetProjectId() string { return v.ProjectId }

// GetJsonKey returns PollerPubSubInput.JsonKey, and is useful for accessing the field via an interface.
func (v *PollerPubSubInput) GetJsonKey() types.JsonObject { return v.JsonKey }

// GetSubscriptionId returns PollerPubSubInput.SubscriptionId, and is useful for accessing the field via an interface.
func (v *PollerPubSubInput) GetSubscriptionId() string { return v.SubscriptionId }

// PreferredPath includes the GraphQL fields of PreferredPath requested by the fragment PreferredPath.
// The GraphQL type's documentation follows.
//
// Properties that are expensive, and should not be requested as part of
// "list all paths" type operations:
// - destinationDataset
// - resolvedPath
// - managedBy
// It's OK to make these part of "list paths for given source dataset" though, as
// that's only one, and presumably you're likely to actually use it.
type PreferredPath struct {
	Id            string                               `json:"id"`
	Name          string                               `json:"name"`
	IconUrl       *string                              `json:"iconUrl"`
	Description   string                               `json:"description"`
	WorkspaceId   string                               `json:"workspaceId"`
	FolderId      string                               `json:"folderId"`
	SourceDataset string                               `json:"sourceDataset"`
	Path          []PreferredPathPathPreferredPathStep `json:"path"`
}

// GetId returns PreferredPath.Id, and is useful for accessing the field via an interface.
func (v *PreferredPath) GetId() string { return v.Id }

// GetName returns PreferredPath.Name, and is useful for accessing the field via an interface.
func (v *PreferredPath) GetName() string { return v.Name }

// GetIconUrl returns PreferredPath.IconUrl, and is useful for accessing the field via an interface.
func (v *PreferredPath) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns PreferredPath.Description, and is useful for accessing the field via an interface.
func (v *PreferredPath) GetDescription() string { return v.Description }

// GetWorkspaceId returns PreferredPath.WorkspaceId, and is useful for accessing the field via an interface.
func (v *PreferredPath) GetWorkspaceId() string { return v.WorkspaceId }

// GetFolderId returns PreferredPath.FolderId, and is useful for accessing the field via an interface.
func (v *PreferredPath) GetFolderId() string { return v.FolderId }

// GetSourceDataset returns PreferredPath.SourceDataset, and is useful for accessing the field via an interface.
func (v *PreferredPath) GetSourceDataset() string { return v.SourceDataset }

// GetPath returns PreferredPath.Path, and is useful for accessing the field via an interface.
func (v *PreferredPath) GetPath() []PreferredPathPathPreferredPathStep { return v.Path }

// An PreferredPath specifies some preferred destination to go to
// from a given dataset starting point in GraphLink, and also how
// to get there, specifically.
type PreferredPathInput struct {
	// Short name for the path, to use in menus, must be unique within folder
	Name *string `json:"name"`
	// Long description text for the path, at most 1000 characters.
	Description *string `json:"description"`
	// Which dataset ID to present this path starting out from. Note that this
	// must be an extant dataset when creating/updating the path, even if we
	// 'acceptInErrorState' for the steps, and even though it can become broken later.
	SourceDataset *string `json:"sourceDataset"`
	// Each step along the path to get to the destination. The destination
	// is inferred from the last element in the step.
	Path []PreferredPathStepInput `json:"path"`
	// Which folder is this path organized in? If not specified, will be put
	// in the default folder for the workspace.
	FolderId *string `json:"folderId,omitempty"`
	// If managed by an app or other business object, provide it here. Only
	// the object that initially creates it can later update it.
	ManagedById *string `json:"managedById,omitempty"`
}

// GetName returns PreferredPathInput.Name, and is useful for accessing the field via an interface.
func (v *PreferredPathInput) GetName() *string { return v.Name }

// GetDescription returns PreferredPathInput.Description, and is useful for accessing the field via an interface.
func (v *PreferredPathInput) GetDescription() *string { return v.Description }

// GetSourceDataset returns PreferredPathInput.SourceDataset, and is useful for accessing the field via an interface.
func (v *PreferredPathInput) GetSourceDataset() *string { return v.SourceDataset }

// GetPath returns PreferredPathInput.Path, and is useful for accessing the field via an interface.
func (v *PreferredPathInput) GetPath() []PreferredPathStepInput { return v.Path }

// GetFolderId returns PreferredPathInput.FolderId, and is useful for accessing the field via an interface.
func (v *PreferredPathInput) GetFolderId() *string { return v.FolderId }

// GetManagedById returns PreferredPathInput.ManagedById, and is useful for accessing the field via an interface.
func (v *PreferredPathInput) GetManagedById() *string { return v.ManagedById }

// PreferredPathPathPreferredPathStep includes the requested fields of the GraphQL type PreferredPathStep.
// The GraphQL type's documentation follows.
//
// The valid combinations are: 'linkName' and possibly 'reverseFromDataset', or
// 'linkId' and possibly 'reverse'. See PreferredPathStepInput.
type PreferredPathPathPreferredPathStep struct {
	LinkId             *string `json:"linkId"`
	Reverse            *bool   `json:"reverse"`
	LinkName           *string `json:"linkName"`
	ReverseFromDataset *string `json:"reverseFromDataset"`
}

// GetLinkId returns PreferredPathPathPreferredPathStep.LinkId, and is useful for accessing the field via an interface.
func (v *PreferredPathPathPreferredPathStep) GetLinkId() *string { return v.LinkId }

// GetReverse returns PreferredPathPathPreferredPathStep.Reverse, and is useful for accessing the field via an interface.
func (v *PreferredPathPathPreferredPathStep) GetReverse() *bool { return v.Reverse }

// GetLinkName returns PreferredPathPathPreferredPathStep.LinkName, and is useful for accessing the field via an interface.
func (v *PreferredPathPathPreferredPathStep) GetLinkName() *string { return v.LinkName }

// GetReverseFromDataset returns PreferredPathPathPreferredPathStep.ReverseFromDataset, and is useful for accessing the field via an interface.
func (v *PreferredPathPathPreferredPathStep) GetReverseFromDataset() *string {
	return v.ReverseFromDataset
}

// There are four modes for how to specify a step along the path:
// - using a foreign key that exists in the dataset
// - using a related key that exists pointint to the dataset
// - using a deferred foreign key specification as a forward key
// - using a deferred foreign key specification as a related key
type PreferredPathStepInput struct {
	// This is the name of the link to use -- not the name of the step.
	// It is an error if the link doesn't exist. Use 'linkName' with 'to' or 'from'.
	LinkName *string `json:"linkName,omitempty"`
	// If taking this step using a (reverse) related key, specify the dataset
	// to step TO in 'reverseFromDataset' (because the reverse link is "from" that dataset.)
	// Also specify 'linkName' when using 'reverseFromDataset'.
	ReverseFromDataset *string `json:"reverseFromDataset,omitempty"`
	// If specifying a deferred foreign key to use as the step, in forward or reverse
	// direction, specify this using 'linkId'. Do not use 'linkName' or 'reverseFromDataset'
	// when specifying 'linkId'.
	LinkId *string `json:"linkId,omitempty"`
	// If specifying a deferred foreign key to use as the step, in related (reverse)
	// direction, set reverse to 'true', in addition to the id in 'linkId'.
	Reverse *bool `json:"reverse,omitempty"`
}

// GetLinkName returns PreferredPathStepInput.LinkName, and is useful for accessing the field via an interface.
func (v *PreferredPathStepInput) GetLinkName() *string { return v.LinkName }

// GetReverseFromDataset returns PreferredPathStepInput.ReverseFromDataset, and is useful for accessing the field via an interface.
func (v *PreferredPathStepInput) GetReverseFromDataset() *string { return v.ReverseFromDataset }

// GetLinkId returns PreferredPathStepInput.LinkId, and is useful for accessing the field via an interface.
func (v *PreferredPathStepInput) GetLinkId() *string { return v.LinkId }

// GetReverse returns PreferredPathStepInput.Reverse, and is useful for accessing the field via an interface.
func (v *PreferredPathStepInput) GetReverse() *bool { return v.Reverse }

// PreferredPathWithStatus includes the GraphQL fields of PreferredPathWithStatus requested by the fragment PreferredPathWithStatus.
type PreferredPathWithStatus struct {
	// If this path is defined (saved with an ID,) return the path here. Note that a path
	// may be accepted and get an ID, yet be in error state in the same operation, if
	// 'acceptInErrorState' is true.
	Path *PreferredPathWithStatusPathPreferredPath `json:"path"`
	// If this path is in error state, returns a description of why here.
	Error *string `json:"error"`
}

// GetPath returns PreferredPathWithStatus.Path, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatus) GetPath() *PreferredPathWithStatusPathPreferredPath { return v.Path }

// GetError returns PreferredPathWithStatus.Error, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatus) GetError() *string { return v.Error }

// PreferredPathWithStatusPathPreferredPath includes the requested fields of the GraphQL type PreferredPath.
// The GraphQL type's documentation follows.
//
// Properties that are expensive, and should not be requested as part of
// "list all paths" type operations:
// - destinationDataset
// - resolvedPath
// - managedBy
// It's OK to make these part of "list paths for given source dataset" though, as
// that's only one, and presumably you're likely to actually use it.
type PreferredPathWithStatusPathPreferredPath struct {
	PreferredPath `json:"-"`
}

// GetId returns PreferredPathWithStatusPathPreferredPath.Id, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatusPathPreferredPath) GetId() string { return v.PreferredPath.Id }

// GetName returns PreferredPathWithStatusPathPreferredPath.Name, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatusPathPreferredPath) GetName() string { return v.PreferredPath.Name }

// GetIconUrl returns PreferredPathWithStatusPathPreferredPath.IconUrl, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatusPathPreferredPath) GetIconUrl() *string {
	return v.PreferredPath.IconUrl
}

// GetDescription returns PreferredPathWithStatusPathPreferredPath.Description, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatusPathPreferredPath) GetDescription() string {
	return v.PreferredPath.Description
}

// GetWorkspaceId returns PreferredPathWithStatusPathPreferredPath.WorkspaceId, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatusPathPreferredPath) GetWorkspaceId() string {
	return v.PreferredPath.WorkspaceId
}

// GetFolderId returns PreferredPathWithStatusPathPreferredPath.FolderId, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatusPathPreferredPath) GetFolderId() string {
	return v.PreferredPath.FolderId
}

// GetSourceDataset returns PreferredPathWithStatusPathPreferredPath.SourceDataset, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatusPathPreferredPath) GetSourceDataset() string {
	return v.PreferredPath.SourceDataset
}

// GetPath returns PreferredPathWithStatusPathPreferredPath.Path, and is useful for accessing the field via an interface.
func (v *PreferredPathWithStatusPathPreferredPath) GetPath() []PreferredPathPathPreferredPathStep {
	return v.PreferredPath.Path
}

func (v *PreferredPathWithStatusPathPreferredPath) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PreferredPathWithStatusPathPreferredPath
		graphql.NoUnmarshalJSON
	}
	firstPass.PreferredPathWithStatusPathPreferredPath = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PreferredPath)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPreferredPathWithStatusPathPreferredPath struct {
	Id string `json:"id"`

	Name string `json:"name"`

	IconUrl *string `json:"iconUrl"`

	Description string `json:"description"`

	WorkspaceId string `json:"workspaceId"`

	FolderId string `json:"folderId"`

	SourceDataset string `json:"sourceDataset"`

	Path []PreferredPathPathPreferredPathStep `json:"path"`
}

func (v *PreferredPathWithStatusPathPreferredPath) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PreferredPathWithStatusPathPreferredPath) __premarshalJSON() (*__premarshalPreferredPathWithStatusPathPreferredPath, error) {
	var retval __premarshalPreferredPathWithStatusPathPreferredPath

	retval.Id = v.PreferredPath.Id
	retval.Name = v.PreferredPath.Name
	retval.IconUrl = v.PreferredPath.IconUrl
	retval.Description = v.PreferredPath.Description
	retval.WorkspaceId = v.PreferredPath.WorkspaceId
	retval.FolderId = v.PreferredPath.FolderId
	retval.SourceDataset = v.PreferredPath.SourceDataset
	retval.Path = v.PreferredPath.Path
	return &retval, nil
}

// PrimitiveValue includes the GraphQL fields of PrimitiveValue requested by the fragment PrimitiveValue.
type PrimitiveValue struct {
	Bool      *bool              `json:"bool"`
	Float64   *float64           `json:"float64"`
	Int64     *types.Int64Scalar `json:"int64"`
	String    *string            `json:"string"`
	Timestamp *types.TimeScalar  `json:"timestamp"`
	Duration  *types.Int64Scalar `json:"duration"`
}

// GetBool returns PrimitiveValue.Bool, and is useful for accessing the field via an interface.
func (v *PrimitiveValue) GetBool() *bool { return v.Bool }

// GetFloat64 returns PrimitiveValue.Float64, and is useful for accessing the field via an interface.
func (v *PrimitiveValue) GetFloat64() *float64 { return v.Float64 }

// GetInt64 returns PrimitiveValue.Int64, and is useful for accessing the field via an interface.
func (v *PrimitiveValue) GetInt64() *types.Int64Scalar { return v.Int64 }

// GetString returns PrimitiveValue.String, and is useful for accessing the field via an interface.
func (v *PrimitiveValue) GetString() *string { return v.String }

// GetTimestamp returns PrimitiveValue.Timestamp, and is useful for accessing the field via an interface.
func (v *PrimitiveValue) GetTimestamp() *types.TimeScalar { return v.Timestamp }

// GetDuration returns PrimitiveValue.Duration, and is useful for accessing the field via an interface.
func (v *PrimitiveValue) GetDuration() *types.Int64Scalar { return v.Duration }

type PrimitiveValueInput struct {
	Bool      *bool              `json:"bool,omitempty"`
	Float64   *float64           `json:"float64,omitempty"`
	Int64     *types.Int64Scalar `json:"int64,omitempty"`
	String    *string            `json:"string,omitempty"`
	Timestamp *types.TimeScalar  `json:"timestamp,omitempty"`
	Duration  *types.Int64Scalar `json:"duration,omitempty"`
}

// GetBool returns PrimitiveValueInput.Bool, and is useful for accessing the field via an interface.
func (v *PrimitiveValueInput) GetBool() *bool { return v.Bool }

// GetFloat64 returns PrimitiveValueInput.Float64, and is useful for accessing the field via an interface.
func (v *PrimitiveValueInput) GetFloat64() *float64 { return v.Float64 }

// GetInt64 returns PrimitiveValueInput.Int64, and is useful for accessing the field via an interface.
func (v *PrimitiveValueInput) GetInt64() *types.Int64Scalar { return v.Int64 }

// GetString returns PrimitiveValueInput.String, and is useful for accessing the field via an interface.
func (v *PrimitiveValueInput) GetString() *string { return v.String }

// GetTimestamp returns PrimitiveValueInput.Timestamp, and is useful for accessing the field via an interface.
func (v *PrimitiveValueInput) GetTimestamp() *types.TimeScalar { return v.Timestamp }

// GetDuration returns PrimitiveValueInput.Duration, and is useful for accessing the field via an interface.
func (v *PrimitiveValueInput) GetDuration() *types.Int64Scalar { return v.Duration }

// QueryParams are for parameters intrinsic to the *query*, not the *presentation*
// of the query. One way to think about this, is that anything that goes in here
// should be equally applicable to invocations by transformer, monitors, exports,
// or worksheets.
type QueryParams struct {
	// Please specify exact one of startTime and startTimeSinceEpoch.
	StartTime           *types.TimeScalar `json:"startTime"`
	StartTimeSinceEpoch *TimeSinceEpoch   `json:"startTimeSinceEpoch"`
	// Please specify exact one of endTime and endTimeSinceEpoch.
	EndTime           *types.TimeScalar `json:"endTime"`
	EndTimeSinceEpoch *TimeSinceEpoch   `json:"endTimeSinceEpoch"`
	// Use this to specify rate limiting options for this query. To bypass the
	// rate limit for all queries by this user for a certain amount of time, see
	// the QueryGovernor.bypassUntil layered setting instead
	RateLimitOption *RateLimitOption `json:"rateLimitOption"`
	// Queries may have some parameter values bound
	OpalParameters []ParameterBindingInput `json:"opalParameters"`
}

// GetStartTime returns QueryParams.StartTime, and is useful for accessing the field via an interface.
func (v *QueryParams) GetStartTime() *types.TimeScalar { return v.StartTime }

// GetStartTimeSinceEpoch returns QueryParams.StartTimeSinceEpoch, and is useful for accessing the field via an interface.
func (v *QueryParams) GetStartTimeSinceEpoch() *TimeSinceEpoch { return v.StartTimeSinceEpoch }

// GetEndTime returns QueryParams.EndTime, and is useful for accessing the field via an interface.
func (v *QueryParams) GetEndTime() *types.TimeScalar { return v.EndTime }

// GetEndTimeSinceEpoch returns QueryParams.EndTimeSinceEpoch, and is useful for accessing the field via an interface.
func (v *QueryParams) GetEndTimeSinceEpoch() *TimeSinceEpoch { return v.EndTimeSinceEpoch }

// GetRateLimitOption returns QueryParams.RateLimitOption, and is useful for accessing the field via an interface.
func (v *QueryParams) GetRateLimitOption() *RateLimitOption { return v.RateLimitOption }

// GetOpalParameters returns QueryParams.OpalParameters, and is useful for accessing the field via an interface.
func (v *QueryParams) GetOpalParameters() []ParameterBindingInput { return v.OpalParameters }

type RateLimitInput struct {
	Rate  float64            `json:"rate"`
	Burst *types.Int64Scalar `json:"burst"`
}

// GetRate returns RateLimitInput.Rate, and is useful for accessing the field via an interface.
func (v *RateLimitInput) GetRate() float64 { return v.Rate }

// GetBurst returns RateLimitInput.Burst, and is useful for accessing the field via an interface.
func (v *RateLimitInput) GetBurst() *types.Int64Scalar { return v.Burst }

type RateLimitOption string

const (
	// Default behavior. Rate limiting is enforced unless it is explicitly
	// disabled at the customer or user level using some other mechanism.
	RateLimitOptionEnforceratelimit RateLimitOption = "EnforceRateLimit"
	// Set this to bypass rate limiting for this query. Credits used by queries
	// that bypass the rate limit are not counted towards the rate limit.
	RateLimitOptionBypassratelimit RateLimitOption = "BypassRateLimit"
)

// RbacGroup includes the GraphQL fields of RbacGroup requested by the fragment RbacGroup.
type RbacGroup struct {
	Id          string `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

// GetId returns RbacGroup.Id, and is useful for accessing the field via an interface.
func (v *RbacGroup) GetId() string { return v.Id }

// GetName returns RbacGroup.Name, and is useful for accessing the field via an interface.
func (v *RbacGroup) GetName() string { return v.Name }

// GetDescription returns RbacGroup.Description, and is useful for accessing the field via an interface.
func (v *RbacGroup) GetDescription() string { return v.Description }

type RbacGroupInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

// GetName returns RbacGroupInput.Name, and is useful for accessing the field via an interface.
func (v *RbacGroupInput) GetName() string { return v.Name }

// GetDescription returns RbacGroupInput.Description, and is useful for accessing the field via an interface.
func (v *RbacGroupInput) GetDescription() string { return v.Description }

// RbacGroupmember includes the GraphQL fields of RbacGroupmember requested by the fragment RbacGroupmember.
type RbacGroupmember struct {
	Id            string              `json:"id"`
	Description   string              `json:"description"`
	GroupId       string              `json:"groupId"`
	MemberUserId  *types.UserIdScalar `json:"memberUserId"`
	MemberGroupId *string             `json:"memberGroupId"`
}

// GetId returns RbacGroupmember.Id, and is useful for accessing the field via an interface.
func (v *RbacGroupmember) GetId() string { return v.Id }

// GetDescription returns RbacGroupmember.Description, and is useful for accessing the field via an interface.
func (v *RbacGroupmember) GetDescription() string { return v.Description }

// GetGroupId returns RbacGroupmember.GroupId, and is useful for accessing the field via an interface.
func (v *RbacGroupmember) GetGroupId() string { return v.GroupId }

// GetMemberUserId returns RbacGroupmember.MemberUserId, and is useful for accessing the field via an interface.
func (v *RbacGroupmember) GetMemberUserId() *types.UserIdScalar { return v.MemberUserId }

// GetMemberGroupId returns RbacGroupmember.MemberGroupId, and is useful for accessing the field via an interface.
func (v *RbacGroupmember) GetMemberGroupId() *string { return v.MemberGroupId }

type RbacGroupmemberInput struct {
	Description   string              `json:"description"`
	GroupId       string              `json:"groupId"`
	MemberUserId  *types.UserIdScalar `json:"memberUserId"`
	MemberGroupId *string             `json:"memberGroupId"`
}

// GetDescription returns RbacGroupmemberInput.Description, and is useful for accessing the field via an interface.
func (v *RbacGroupmemberInput) GetDescription() string { return v.Description }

// GetGroupId returns RbacGroupmemberInput.GroupId, and is useful for accessing the field via an interface.
func (v *RbacGroupmemberInput) GetGroupId() string { return v.GroupId }

// GetMemberUserId returns RbacGroupmemberInput.MemberUserId, and is useful for accessing the field via an interface.
func (v *RbacGroupmemberInput) GetMemberUserId() *types.UserIdScalar { return v.MemberUserId }

// GetMemberGroupId returns RbacGroupmemberInput.MemberGroupId, and is useful for accessing the field via an interface.
func (v *RbacGroupmemberInput) GetMemberGroupId() *string { return v.MemberGroupId }

type RbacObjectInput struct {
	ObjectId    *string `json:"objectId"`
	FolderId    *string `json:"folderId"`
	WorkspaceId *string `json:"workspaceId"`
	Type        *string `json:"type"`
	Name        *string `json:"name"`
	Owner       *bool   `json:"owner"`
	All         *bool   `json:"all"`
}

// GetObjectId returns RbacObjectInput.ObjectId, and is useful for accessing the field via an interface.
func (v *RbacObjectInput) GetObjectId() *string { return v.ObjectId }

// GetFolderId returns RbacObjectInput.FolderId, and is useful for accessing the field via an interface.
func (v *RbacObjectInput) GetFolderId() *string { return v.FolderId }

// GetWorkspaceId returns RbacObjectInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *RbacObjectInput) GetWorkspaceId() *string { return v.WorkspaceId }

// GetType returns RbacObjectInput.Type, and is useful for accessing the field via an interface.
func (v *RbacObjectInput) GetType() *string { return v.Type }

// GetName returns RbacObjectInput.Name, and is useful for accessing the field via an interface.
func (v *RbacObjectInput) GetName() *string { return v.Name }

// GetOwner returns RbacObjectInput.Owner, and is useful for accessing the field via an interface.
func (v *RbacObjectInput) GetOwner() *bool { return v.Owner }

// GetAll returns RbacObjectInput.All, and is useful for accessing the field via an interface.
func (v *RbacObjectInput) GetAll() *bool { return v.All }

type RbacRole string

const (
	RbacRoleManager  RbacRole = "Manager"
	RbacRoleEditor   RbacRole = "Editor"
	RbacRoleViewer   RbacRole = "Viewer"
	RbacRoleIngester RbacRole = "Ingester"
	RbacRoleLister   RbacRole = "Lister"
)

// RbacStatement includes the GraphQL fields of RbacStatement requested by the fragment RbacStatement.
type RbacStatement struct {
	Id          string                          `json:"id"`
	Description string                          `json:"description"`
	Subject     RbacStatementSubjectRbacSubject `json:"subject"`
	Object      RbacStatementObjectRbacObject   `json:"object"`
	Role        RbacRole                        `json:"role"`
	Version     *int                            `json:"version"`
}

// GetId returns RbacStatement.Id, and is useful for accessing the field via an interface.
func (v *RbacStatement) GetId() string { return v.Id }

// GetDescription returns RbacStatement.Description, and is useful for accessing the field via an interface.
func (v *RbacStatement) GetDescription() string { return v.Description }

// GetSubject returns RbacStatement.Subject, and is useful for accessing the field via an interface.
func (v *RbacStatement) GetSubject() RbacStatementSubjectRbacSubject { return v.Subject }

// GetObject returns RbacStatement.Object, and is useful for accessing the field via an interface.
func (v *RbacStatement) GetObject() RbacStatementObjectRbacObject { return v.Object }

// GetRole returns RbacStatement.Role, and is useful for accessing the field via an interface.
func (v *RbacStatement) GetRole() RbacRole { return v.Role }

// GetVersion returns RbacStatement.Version, and is useful for accessing the field via an interface.
func (v *RbacStatement) GetVersion() *int { return v.Version }

type RbacStatementInput struct {
	Description string           `json:"description"`
	Subject     RbacSubjectInput `json:"subject"`
	Object      RbacObjectInput  `json:"object"`
	Role        RbacRole         `json:"role"`
	Version     *int             `json:"version"`
}

// GetDescription returns RbacStatementInput.Description, and is useful for accessing the field via an interface.
func (v *RbacStatementInput) GetDescription() string { return v.Description }

// GetSubject returns RbacStatementInput.Subject, and is useful for accessing the field via an interface.
func (v *RbacStatementInput) GetSubject() RbacSubjectInput { return v.Subject }

// GetObject returns RbacStatementInput.Object, and is useful for accessing the field via an interface.
func (v *RbacStatementInput) GetObject() RbacObjectInput { return v.Object }

// GetRole returns RbacStatementInput.Role, and is useful for accessing the field via an interface.
func (v *RbacStatementInput) GetRole() RbacRole { return v.Role }

// GetVersion returns RbacStatementInput.Version, and is useful for accessing the field via an interface.
func (v *RbacStatementInput) GetVersion() *int { return v.Version }

// RbacStatementObjectRbacObject includes the requested fields of the GraphQL type RbacObject.
type RbacStatementObjectRbacObject struct {
	ObjectId    *string `json:"objectId"`
	FolderId    *string `json:"folderId"`
	WorkspaceId *string `json:"workspaceId"`
	Type        *string `json:"type"`
	Name        *string `json:"name"`
	Owner       *bool   `json:"owner"`
	All         *bool   `json:"all"`
}

// GetObjectId returns RbacStatementObjectRbacObject.ObjectId, and is useful for accessing the field via an interface.
func (v *RbacStatementObjectRbacObject) GetObjectId() *string { return v.ObjectId }

// GetFolderId returns RbacStatementObjectRbacObject.FolderId, and is useful for accessing the field via an interface.
func (v *RbacStatementObjectRbacObject) GetFolderId() *string { return v.FolderId }

// GetWorkspaceId returns RbacStatementObjectRbacObject.WorkspaceId, and is useful for accessing the field via an interface.
func (v *RbacStatementObjectRbacObject) GetWorkspaceId() *string { return v.WorkspaceId }

// GetType returns RbacStatementObjectRbacObject.Type, and is useful for accessing the field via an interface.
func (v *RbacStatementObjectRbacObject) GetType() *string { return v.Type }

// GetName returns RbacStatementObjectRbacObject.Name, and is useful for accessing the field via an interface.
func (v *RbacStatementObjectRbacObject) GetName() *string { return v.Name }

// GetOwner returns RbacStatementObjectRbacObject.Owner, and is useful for accessing the field via an interface.
func (v *RbacStatementObjectRbacObject) GetOwner() *bool { return v.Owner }

// GetAll returns RbacStatementObjectRbacObject.All, and is useful for accessing the field via an interface.
func (v *RbacStatementObjectRbacObject) GetAll() *bool { return v.All }

// RbacStatementSubjectRbacSubject includes the requested fields of the GraphQL type RbacSubject.
type RbacStatementSubjectRbacSubject struct {
	UserId  *types.UserIdScalar `json:"userId"`
	GroupId *string             `json:"groupId"`
	All     *bool               `json:"all"`
}

// GetUserId returns RbacStatementSubjectRbacSubject.UserId, and is useful for accessing the field via an interface.
func (v *RbacStatementSubjectRbacSubject) GetUserId() *types.UserIdScalar { return v.UserId }

// GetGroupId returns RbacStatementSubjectRbacSubject.GroupId, and is useful for accessing the field via an interface.
func (v *RbacStatementSubjectRbacSubject) GetGroupId() *string { return v.GroupId }

// GetAll returns RbacStatementSubjectRbacSubject.All, and is useful for accessing the field via an interface.
func (v *RbacStatementSubjectRbacSubject) GetAll() *bool { return v.All }

type RbacSubjectInput struct {
	UserId  *types.UserIdScalar `json:"userId"`
	GroupId *string             `json:"groupId"`
	All     *bool               `json:"all"`
}

// GetUserId returns RbacSubjectInput.UserId, and is useful for accessing the field via an interface.
func (v *RbacSubjectInput) GetUserId() *types.UserIdScalar { return v.UserId }

// GetGroupId returns RbacSubjectInput.GroupId, and is useful for accessing the field via an interface.
func (v *RbacSubjectInput) GetGroupId() *string { return v.GroupId }

// GetAll returns RbacSubjectInput.All, and is useful for accessing the field via an interface.
func (v *RbacSubjectInput) GetAll() *bool { return v.All }

type ResourceIdInput struct {
	DatasetId       string                `json:"datasetId"`
	PrimaryKeyValue []ColumnAndValueInput `json:"primaryKeyValue"`
	TimeRange       *TimeRangeInput       `json:"timeRange"`
}

// GetDatasetId returns ResourceIdInput.DatasetId, and is useful for accessing the field via an interface.
func (v *ResourceIdInput) GetDatasetId() string { return v.DatasetId }

// GetPrimaryKeyValue returns ResourceIdInput.PrimaryKeyValue, and is useful for accessing the field via an interface.
func (v *ResourceIdInput) GetPrimaryKeyValue() []ColumnAndValueInput { return v.PrimaryKeyValue }

// GetTimeRange returns ResourceIdInput.TimeRange, and is useful for accessing the field via an interface.
func (v *ResourceIdInput) GetTimeRange() *TimeRangeInput { return v.TimeRange }

// What pieces of result to include in the response to an OPAL query.
type ResultKind string

const (
	ResultKindResultkindschema          ResultKind = "ResultKindSchema"
	ResultKindResultkinddata            ResultKind = "ResultKindData"
	ResultKindResultkindstats           ResultKind = "ResultKindStats"
	ResultKindResultkindcolumnstats     ResultKind = "ResultKindColumnStats"
	ResultKindResultkindvolumestats     ResultKind = "ResultKindVolumeStats"
	ResultKindResultkindsuppress        ResultKind = "ResultKindSuppress"
	ResultKindResultkindprogress        ResultKind = "ResultKindProgress"
	ResultKindResultkindmetricdiscovery ResultKind = "ResultKindMetricDiscovery"
)

// ResultStatus includes the GraphQL fields of ResultStatus requested by the fragment ResultStatus.
type ResultStatus struct {
	Success      bool              `json:"success"`
	ErrorMessage string            `json:"errorMessage"`
	DetailedInfo *types.JsonObject `json:"detailedInfo"`
}

// GetSuccess returns ResultStatus.Success, and is useful for accessing the field via an interface.
func (v *ResultStatus) GetSuccess() bool { return v.Success }

// GetErrorMessage returns ResultStatus.ErrorMessage, and is useful for accessing the field via an interface.
func (v *ResultStatus) GetErrorMessage() string { return v.ErrorMessage }

// GetDetailedInfo returns ResultStatus.DetailedInfo, and is useful for accessing the field via an interface.
func (v *ResultStatus) GetDetailedInfo() *types.JsonObject { return v.DetailedInfo }

type RollupFilterInput struct {
	Mode RollupFilterMode `json:"mode"`
}

// GetMode returns RollupFilterInput.Mode, and is useful for accessing the field via an interface.
func (v *RollupFilterInput) GetMode() RollupFilterMode { return v.Mode }

type RollupFilterMode string

const (
	RollupFilterModeLast RollupFilterMode = "Last"
	RollupFilterModeAll  RollupFilterMode = "All"
)

type RollupMode string

const (
	// Roll up the result, grouping by primary key if possible,
	// otherwise by grouping all rows together.
	RollupModeAlways RollupMode = "Always"
	// Don't roll up the result.
	RollupModeNever RollupMode = "Never"
	// Roll up the result if it is a Resource, otherwise don't roll up the result.
	RollupModeAuto RollupMode = "Auto"
	// Roll up the result (by returning the last value + a bit describing whether
	// the value changed during the query window) if it is a Resource, otherwise
	// don’t roll up the result
	RollupModeLastvalueandchanged RollupMode = "LastValueAndChanged"
)

type RollupOptionInput struct {
	// If maxRowsPerGroup is set, rollup presentation will respect it as the limit for maximum number
	// of points allowed for each group; otherwise, rollup presentation will use heuristics to propose
	// a limit (typically 400 or 2000).
	// Either way, rollup presentation limits each group to this size, and apply sampling preemptively.
	MaxRowsPerGroup *types.Int64Scalar `json:"maxRowsPerGroup"`
	// If unrollColumns is set, the columns specified will be unrolled after being
	// grouped by primary key and ordered by time. Empty unrollColumns will produce
	// 1 row for each primary key (because all non-primary key columns are rolled
	// up). If a column C having values [0,1,0] at times [0,1,2] for a given primary
	// key is specified in unrollColumns, 3 rows will be produced for that primary
	// key, with the values of C being 0, 1, 0 in each row, respectively.
	UnrollColumns []string `json:"unrollColumns"`
	// If set to true, explicitly disables rollup, even for a Resource
	ForceNoRollup *bool `json:"forceNoRollup"`
}

// GetMaxRowsPerGroup returns RollupOptionInput.MaxRowsPerGroup, and is useful for accessing the field via an interface.
func (v *RollupOptionInput) GetMaxRowsPerGroup() *types.Int64Scalar { return v.MaxRowsPerGroup }

// GetUnrollColumns returns RollupOptionInput.UnrollColumns, and is useful for accessing the field via an interface.
func (v *RollupOptionInput) GetUnrollColumns() []string { return v.UnrollColumns }

// GetForceNoRollup returns RollupOptionInput.ForceNoRollup, and is useful for accessing the field via an interface.
func (v *RollupOptionInput) GetForceNoRollup() *bool { return v.ForceNoRollup }

type SaveMode string

const (
	// Only update the dataset ID specified in the operation, disregarding dependencies
	SaveModeUpdatedataset SaveMode = "UpdateDataset"
	// Update the dataset ID specified, and its dependencies, but don't change anything if there's any error that's not ignored
	SaveModeUpdatedatasetanddependenciesunlessnewerrors SaveMode = "UpdateDatasetAndDependenciesUnlessNewErrors"
	// Update the dataset ID specified, and its dependencies, as far as can be done without errors, return errors
	SaveModeUpdatedatasetanddependenciesignoringallerrors SaveMode = "UpdateDatasetAndDependenciesIgnoringAllErrors"
	// Return what would happen if you updated the dataset ID (only) disregarding dependencies. Do not change database.
	SaveModePreflightdataset SaveMode = "PreflightDataset"
	// Return what would happen if you updated the dataset ID, including effects on dependencies. Do not change database.
	SaveModePreflightdatasetanddependencies SaveMode = "PreflightDatasetAndDependencies"
)

type SearchMatchKind string

const (
	// Search match  data is not needed
	SearchMatchKindSearchmatchnone SearchMatchKind = "SearchMatchNone"
	// Send back a list of columns that have contributed to resulting data matching the search
	SearchMatchKindSearchmatchcolumns SearchMatchKind = "SearchMatchColumns"
)

// SettingAndTargetScope includes the GraphQL fields of SettingAndTargetScope requested by the fragment SettingAndTargetScope.
type SettingAndTargetScope struct {
	Setting string                     `json:"setting"`
	Target  LayeredSettingRecordTarget `json:"target"`
}

// GetSetting returns SettingAndTargetScope.Setting, and is useful for accessing the field via an interface.
func (v *SettingAndTargetScope) GetSetting() string { return v.Setting }

// GetTarget returns SettingAndTargetScope.Target, and is useful for accessing the field via an interface.
func (v *SettingAndTargetScope) GetTarget() LayeredSettingRecordTarget { return v.Target }

type SettingAndTargetScopeInput struct {
	Setting string                          `json:"setting"`
	Target  LayeredSettingRecordTargetInput `json:"target"`
}

// GetSetting returns SettingAndTargetScopeInput.Setting, and is useful for accessing the field via an interface.
func (v *SettingAndTargetScopeInput) GetSetting() string { return v.Setting }

// GetTarget returns SettingAndTargetScopeInput.Target, and is useful for accessing the field via an interface.
func (v *SettingAndTargetScopeInput) GetTarget() LayeredSettingRecordTargetInput { return v.Target }

// SnowflakeAccount includes the GraphQL fields of SnowflakeAccount requested by the fragment SnowflakeAccount.
type SnowflakeAccount struct {
	// The name of the organization that owns the Snowflake account.
	Organization string `json:"organization"`
	// The name of the Snowflake account.
	Account string `json:"account"`
}

// GetOrganization returns SnowflakeAccount.Organization, and is useful for accessing the field via an interface.
func (v *SnowflakeAccount) GetOrganization() string { return v.Organization }

// GetAccount returns SnowflakeAccount.Account, and is useful for accessing the field via an interface.
func (v *SnowflakeAccount) GetAccount() string { return v.Account }

type SnowflakeAccountInput struct {
	Account      string `json:"account"`
	Organization string `json:"organization"`
}

// GetAccount returns SnowflakeAccountInput.Account, and is useful for accessing the field via an interface.
func (v *SnowflakeAccountInput) GetAccount() string { return v.Account }

// GetOrganization returns SnowflakeAccountInput.Organization, and is useful for accessing the field via an interface.
func (v *SnowflakeAccountInput) GetOrganization() string { return v.Organization }

// SnowflakeOutboundShare includes the GraphQL fields of SnowflakeOutboundShare requested by the fragment SnowflakeOutboundShare.
type SnowflakeOutboundShare struct {
	Id          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
	WorkspaceId string  `json:"workspaceId"`
	// The fully qualified name of the Snowflake share, for use in a consumer account.
	ShareName string `json:"shareName"`
	// The Snowlake accounts that have access to the share.
	Accounts []SnowflakeAccount `json:"accounts"`
}

// GetId returns SnowflakeOutboundShare.Id, and is useful for accessing the field via an interface.
func (v *SnowflakeOutboundShare) GetId() string { return v.Id }

// GetName returns SnowflakeOutboundShare.Name, and is useful for accessing the field via an interface.
func (v *SnowflakeOutboundShare) GetName() string { return v.Name }

// GetDescription returns SnowflakeOutboundShare.Description, and is useful for accessing the field via an interface.
func (v *SnowflakeOutboundShare) GetDescription() *string { return v.Description }

// GetWorkspaceId returns SnowflakeOutboundShare.WorkspaceId, and is useful for accessing the field via an interface.
func (v *SnowflakeOutboundShare) GetWorkspaceId() string { return v.WorkspaceId }

// GetShareName returns SnowflakeOutboundShare.ShareName, and is useful for accessing the field via an interface.
func (v *SnowflakeOutboundShare) GetShareName() string { return v.ShareName }

// GetAccounts returns SnowflakeOutboundShare.Accounts, and is useful for accessing the field via an interface.
func (v *SnowflakeOutboundShare) GetAccounts() []SnowflakeAccount { return v.Accounts }

type SnowflakeOutboundShareInput struct {
	Accounts    []SnowflakeAccountInput `json:"accounts"`
	Name        string                  `json:"name"`
	IconUrl     *string                 `json:"iconUrl"`
	Description *string                 `json:"description"`
	ManagedById *string                 `json:"managedById"`
	FolderId    *string                 `json:"folderId"`
}

// GetAccounts returns SnowflakeOutboundShareInput.Accounts, and is useful for accessing the field via an interface.
func (v *SnowflakeOutboundShareInput) GetAccounts() []SnowflakeAccountInput { return v.Accounts }

// GetName returns SnowflakeOutboundShareInput.Name, and is useful for accessing the field via an interface.
func (v *SnowflakeOutboundShareInput) GetName() string { return v.Name }

// GetIconUrl returns SnowflakeOutboundShareInput.IconUrl, and is useful for accessing the field via an interface.
func (v *SnowflakeOutboundShareInput) GetIconUrl() *string { return v.IconUrl }

// GetDescription returns SnowflakeOutboundShareInput.Description, and is useful for accessing the field via an interface.
func (v *SnowflakeOutboundShareInput) GetDescription() *string { return v.Description }

// GetManagedById returns SnowflakeOutboundShareInput.ManagedById, and is useful for accessing the field via an interface.
func (v *SnowflakeOutboundShareInput) GetManagedById() *string { return v.ManagedById }

// GetFolderId returns SnowflakeOutboundShareInput.FolderId, and is useful for accessing the field via an interface.
func (v *SnowflakeOutboundShareInput) GetFolderId() *string { return v.FolderId }

type SourceLocInput struct {
	Row types.Int64Scalar `json:"row"`
	Col types.Int64Scalar `json:"col"`
}

// GetRow returns SourceLocInput.Row, and is useful for accessing the field via an interface.
func (v *SourceLocInput) GetRow() types.Int64Scalar { return v.Row }

// GetCol returns SourceLocInput.Col, and is useful for accessing the field via an interface.
func (v *SourceLocInput) GetCol() types.Int64Scalar { return v.Col }

type SourceTableDefinitionInput struct {
	Schema                string                            `json:"schema"`
	TableName             string                            `json:"tableName"`
	Fields                []SourceTableFieldDefinitionInput `json:"fields"`
	ValidFromField        *string                           `json:"validFromField"`
	BatchSeqField         *string                           `json:"batchSeqField"`
	IsInsertOnly          *bool                             `json:"isInsertOnly,omitempty"`
	SourceUpdateTableName *string                           `json:"sourceUpdateTableName"`
}

// GetSchema returns SourceTableDefinitionInput.Schema, and is useful for accessing the field via an interface.
func (v *SourceTableDefinitionInput) GetSchema() string { return v.Schema }

// GetTableName returns SourceTableDefinitionInput.TableName, and is useful for accessing the field via an interface.
func (v *SourceTableDefinitionInput) GetTableName() string { return v.TableName }

// GetFields returns SourceTableDefinitionInput.Fields, and is useful for accessing the field via an interface.
func (v *SourceTableDefinitionInput) GetFields() []SourceTableFieldDefinitionInput { return v.Fields }

// GetValidFromField returns SourceTableDefinitionInput.ValidFromField, and is useful for accessing the field via an interface.
func (v *SourceTableDefinitionInput) GetValidFromField() *string { return v.ValidFromField }

// GetBatchSeqField returns SourceTableDefinitionInput.BatchSeqField, and is useful for accessing the field via an interface.
func (v *SourceTableDefinitionInput) GetBatchSeqField() *string { return v.BatchSeqField }

// GetIsInsertOnly returns SourceTableDefinitionInput.IsInsertOnly, and is useful for accessing the field via an interface.
func (v *SourceTableDefinitionInput) GetIsInsertOnly() *bool { return v.IsInsertOnly }

// GetSourceUpdateTableName returns SourceTableDefinitionInput.SourceUpdateTableName, and is useful for accessing the field via an interface.
func (v *SourceTableDefinitionInput) GetSourceUpdateTableName() *string {
	return v.SourceUpdateTableName
}

type SourceTableFieldDefinitionInput struct {
	Name    string `json:"name"`
	SqlType string `json:"sqlType"`
}

// GetName returns SourceTableFieldDefinitionInput.Name, and is useful for accessing the field via an interface.
func (v *SourceTableFieldDefinitionInput) GetName() string { return v.Name }

// GetSqlType returns SourceTableFieldDefinitionInput.SqlType, and is useful for accessing the field via an interface.
func (v *SourceTableFieldDefinitionInput) GetSqlType() string { return v.SqlType }

type StageInput struct {
	// unique ID that other stages can reference in their InputDefinitionInput
	StageId string `json:"stageId"`
	// What is the description of this stage (stage name)
	Description *string `json:"description"`
	// What component feature is this stage driving? i.e. filter bar, visualization etc.
	Component *string `json:"component"`
	// Which inputs are defined for this stage?
	Inputs []InputDefinitionInput `json:"inputs"`
	// What is the processing?
	Pipeline string `json:"pipeline"`
	// How do we arrange presentation? (ordering etc)
	// Note that later stages referencing this stage will NOT see the stage presentation processing
	Presentation *StagePresentationInput `json:"presentation"`
	// UI presentation data to use when storing transforms
	Layout *types.JsonObject `json:"layout"`
	// If set, enables paginatedResults in initial TaskResult of ResultKindData.
	Pagination *PaginationInput `json:"pagination"`
	// If set, run this stage with progressive execution
	Progressive *bool `json:"progressive"`
	// If set and progressive is also set, we will try to run the query incrementally
	Incremental *bool `json:"incremental"`
	// If set, backend will try to run this stage with best effort binding mode
	BestEffortBinding *bool `json:"bestEffortBinding"`
	// A location within the pipeline. Used to support "run query up to cursor" type functionality, where this location
	// defines the last verb within the query or subquery to run.
	RunUntilLocation *SourceLocInput `json:"runUntilLocation"`
	// Parameter values for parameters scoped to this stage
	ParameterValues []ParameterBindingInput `json:"parameterValues"`
	// Additional metadata about the stage. Should not change the behavior of the query, and should
	// merely provide more context about how and where the stage is being used.
	Metadata *StageMetadata `json:"metadata"`
}

// GetStageId returns StageInput.StageId, and is useful for accessing the field via an interface.
func (v *StageInput) GetStageId() string { return v.StageId }

// GetDescription returns StageInput.Description, and is useful for accessing the field via an interface.
func (v *StageInput) GetDescription() *string { return v.Description }

// GetComponent returns StageInput.Component, and is useful for accessing the field via an interface.
func (v *StageInput) GetComponent() *string { return v.Component }

// GetInputs returns StageInput.Inputs, and is useful for accessing the field via an interface.
func (v *StageInput) GetInputs() []InputDefinitionInput { return v.Inputs }

// GetPipeline returns StageInput.Pipeline, and is useful for accessing the field via an interface.
func (v *StageInput) GetPipeline() string { return v.Pipeline }

// GetPresentation returns StageInput.Presentation, and is useful for accessing the field via an interface.
func (v *StageInput) GetPresentation() *StagePresentationInput { return v.Presentation }

// GetLayout returns StageInput.Layout, and is useful for accessing the field via an interface.
func (v *StageInput) GetLayout() *types.JsonObject { return v.Layout }

// GetPagination returns StageInput.Pagination, and is useful for accessing the field via an interface.
func (v *StageInput) GetPagination() *PaginationInput { return v.Pagination }

// GetProgressive returns StageInput.Progressive, and is useful for accessing the field via an interface.
func (v *StageInput) GetProgressive() *bool { return v.Progressive }

// GetIncremental returns StageInput.Incremental, and is useful for accessing the field via an interface.
func (v *StageInput) GetIncremental() *bool { return v.Incremental }

// GetBestEffortBinding returns StageInput.BestEffortBinding, and is useful for accessing the field via an interface.
func (v *StageInput) GetBestEffortBinding() *bool { return v.BestEffortBinding }

// GetRunUntilLocation returns StageInput.RunUntilLocation, and is useful for accessing the field via an interface.
func (v *StageInput) GetRunUntilLocation() *SourceLocInput { return v.RunUntilLocation }

// GetParameterValues returns StageInput.ParameterValues, and is useful for accessing the field via an interface.
func (v *StageInput) GetParameterValues() []ParameterBindingInput { return v.ParameterValues }

// GetMetadata returns StageInput.Metadata, and is useful for accessing the field via an interface.
func (v *StageInput) GetMetadata() *StageMetadata { return v.Metadata }

// Metadata a client can send for a particular stage in a query. Should not change
// the behavior of the query, and should only provide some context around what this
// stage is used for.
type StageMetadata struct {
	// Display name of the stage in the UI
	DisplayName *string `json:"displayName"`
	// Description of the stage
	Description *string `json:"description"`
	// What component feature is this stage driving? i.e. filter bar, visualization etc.
	Component *string `json:"component"`
	// Extra stuff
	Extra *types.JsonObject `json:"extra"`
}

// GetDisplayName returns StageMetadata.DisplayName, and is useful for accessing the field via an interface.
func (v *StageMetadata) GetDisplayName() *string { return v.DisplayName }

// GetDescription returns StageMetadata.Description, and is useful for accessing the field via an interface.
func (v *StageMetadata) GetDescription() *string { return v.Description }

// GetComponent returns StageMetadata.Component, and is useful for accessing the field via an interface.
func (v *StageMetadata) GetComponent() *string { return v.Component }

// GetExtra returns StageMetadata.Extra, and is useful for accessing the field via an interface.
func (v *StageMetadata) GetExtra() *types.JsonObject { return v.Extra }

// StagePresentationInput is about how to format the results of the query. Here is
// where you can ask for things like linkified results, rolled up results, stats
// from the results, schema-only results, and so forth. These requests are
// generally made by interactive systems, and are not generally applicable to
// other use cases.
type StagePresentationInput struct {
	// limit can be per-query in addition to per-request; the min() is applied
	Limit *types.Int64Scalar `json:"limit"`
	// columnStats configuration
	ColumnStats *ColumnStatsInput `json:"columnStats"`
	// volumeStats configuration
	VolumeStats *VolumeStatsInput `json:"volumeStats"`
	// orderColumns determines order of returned data rows
	OrderColumns []ColumnOrderInput `json:"orderColumns"`
	// when linkify is true, the server will resolve all declared foreign keys
	// and create one new field for each containing that user-readable name of the
	// target of the key (see design doc in Notion)
	Linkify *bool `json:"linkify"`
	// Specifies the options for rollup presentation.
	Rollup *RollupOptionInput `json:"rollup"`
	// rollupMode, if specified, overrides rollup.
	// Always: Roll up the result, grouping by primary key if possible,
	// otherwise by grouping all rows together.
	// Never: Don't roll up the result.
	// Auto: Roll up the result if it is a Resource, otherwise don't roll up
	// the result.
	RollupMode *RollupMode `json:"rollupMode"`
	// resultKinds map to which fields of TaskResult will end up containing
	// information in results (when using datasetProgressive for querying.) Note that not
	// all the fields may be set at the same time, data may be split across
	// multiple separate TaskResult structs in the result stream. However, in
	// aggregate, all the data requested in resultKinds will be responded.
	ResultKinds []ResultKind `json:"resultKinds"`
	// When wantBuckets is set, time-binning verbs without explicit resolution specification
	// will automatically find a human-friendly resolution and generate the wanted number of
	// buckets. When exact number of buckets is not possible, more buckets will be generated.
	WantBuckets *types.Int64Scalar `json:"wantBuckets"`
	// When set to SearchMatchColumns, TaskResult.TODO for ResultKindData responses
	// will contain a list of column names that produced matches for some of the filters in
	// the pipeline
	SearchMatchKind *SearchMatchKind `json:"searchMatchKind"`
	// Specifies the aggregation mode. Default is `Precise`.
	AggregationMode *AggregationMode `json:"aggregationMode"`
	// This field is deprecated and will be ignored, but cannot be removed because
	// Terraform provider depends on it.
	DefaultStats *DefaultStatsInput `json:"defaultStats"`
}

// GetLimit returns StagePresentationInput.Limit, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetLimit() *types.Int64Scalar { return v.Limit }

// GetColumnStats returns StagePresentationInput.ColumnStats, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetColumnStats() *ColumnStatsInput { return v.ColumnStats }

// GetVolumeStats returns StagePresentationInput.VolumeStats, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetVolumeStats() *VolumeStatsInput { return v.VolumeStats }

// GetOrderColumns returns StagePresentationInput.OrderColumns, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetOrderColumns() []ColumnOrderInput { return v.OrderColumns }

// GetLinkify returns StagePresentationInput.Linkify, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetLinkify() *bool { return v.Linkify }

// GetRollup returns StagePresentationInput.Rollup, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetRollup() *RollupOptionInput { return v.Rollup }

// GetRollupMode returns StagePresentationInput.RollupMode, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetRollupMode() *RollupMode { return v.RollupMode }

// GetResultKinds returns StagePresentationInput.ResultKinds, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetResultKinds() []ResultKind { return v.ResultKinds }

// GetWantBuckets returns StagePresentationInput.WantBuckets, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetWantBuckets() *types.Int64Scalar { return v.WantBuckets }

// GetSearchMatchKind returns StagePresentationInput.SearchMatchKind, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetSearchMatchKind() *SearchMatchKind { return v.SearchMatchKind }

// GetAggregationMode returns StagePresentationInput.AggregationMode, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetAggregationMode() *AggregationMode { return v.AggregationMode }

// GetDefaultStats returns StagePresentationInput.DefaultStats, and is useful for accessing the field via an interface.
func (v *StagePresentationInput) GetDefaultStats() *DefaultStatsInput { return v.DefaultStats }

// StageQuery includes the GraphQL fields of StageQuery requested by the fragment StageQuery.
type StageQuery struct {
	Id       *string                          `json:"id"`
	Pipeline string                           `json:"pipeline"`
	Params   *types.JsonObject                `json:"params"`
	Layout   *types.JsonObject                `json:"layout"`
	Input    []StageQueryInputInputDefinition `json:"input"`
}

// GetId returns StageQuery.Id, and is useful for accessing the field via an interface.
func (v *StageQuery) GetId() *string { return v.Id }

// GetPipeline returns StageQuery.Pipeline, and is useful for accessing the field via an interface.
func (v *StageQuery) GetPipeline() string { return v.Pipeline }

// GetParams returns StageQuery.Params, and is useful for accessing the field via an interface.
func (v *StageQuery) GetParams() *types.JsonObject { return v.Params }

// GetLayout returns StageQuery.Layout, and is useful for accessing the field via an interface.
func (v *StageQuery) GetLayout() *types.JsonObject { return v.Layout }

// GetInput returns StageQuery.Input, and is useful for accessing the field via an interface.
func (v *StageQuery) GetInput() []StageQueryInputInputDefinition { return v.Input }

type StageQueryInput struct {
	StageID *string `json:"stageID,omitempty"`
	StageId *string `json:"stageId,omitempty"`
	// make id required when we've removed all deprecated use of stageId
	Id              *string                 `json:"id,omitempty"`
	Input           []InputDefinitionInput  `json:"input"`
	Pipeline        string                  `json:"pipeline"`
	Layout          *types.JsonObject       `json:"layout"`
	Parameters      []ParameterSpecInput    `json:"parameters"`
	ParameterValues []ParameterBindingInput `json:"parameterValues"`
}

// GetStageID returns StageQueryInput.StageID, and is useful for accessing the field via an interface.
func (v *StageQueryInput) GetStageID() *string { return v.StageID }

// GetStageId returns StageQueryInput.StageId, and is useful for accessing the field via an interface.
func (v *StageQueryInput) GetStageId() *string { return v.StageId }

// GetId returns StageQueryInput.Id, and is useful for accessing the field via an interface.
func (v *StageQueryInput) GetId() *string { return v.Id }

// GetInput returns StageQueryInput.Input, and is useful for accessing the field via an interface.
func (v *StageQueryInput) GetInput() []InputDefinitionInput { return v.Input }

// GetPipeline returns StageQueryInput.Pipeline, and is useful for accessing the field via an interface.
func (v *StageQueryInput) GetPipeline() string { return v.Pipeline }

// GetLayout returns StageQueryInput.Layout, and is useful for accessing the field via an interface.
func (v *StageQueryInput) GetLayout() *types.JsonObject { return v.Layout }

// GetParameters returns StageQueryInput.Parameters, and is useful for accessing the field via an interface.
func (v *StageQueryInput) GetParameters() []ParameterSpecInput { return v.Parameters }

// GetParameterValues returns StageQueryInput.ParameterValues, and is useful for accessing the field via an interface.
func (v *StageQueryInput) GetParameterValues() []ParameterBindingInput { return v.ParameterValues }

// StageQueryInputInputDefinition includes the requested fields of the GraphQL type InputDefinition.
type StageQueryInputInputDefinition struct {
	// Assign the short and unique user mnemonic for this input, used in @tableref expressions
	InputName string    `json:"inputName"`
	InputRole InputRole `json:"inputRole"`
	// One of the input definition fields is used; the others are null
	// because GO doesn't have unions.
	DatasetId   *string `json:"datasetId"`
	DatasetPath *string `json:"datasetPath"`
	// Only set stageId to reference input that comes from an actual stage in the same query
	StageId *string `json:"stageId"`
}

// GetInputName returns StageQueryInputInputDefinition.InputName, and is useful for accessing the field via an interface.
func (v *StageQueryInputInputDefinition) GetInputName() string { return v.InputName }

// GetInputRole returns StageQueryInputInputDefinition.InputRole, and is useful for accessing the field via an interface.
func (v *StageQueryInputInputDefinition) GetInputRole() InputRole { return v.InputRole }

// GetDatasetId returns StageQueryInputInputDefinition.DatasetId, and is useful for accessing the field via an interface.
func (v *StageQueryInputInputDefinition) GetDatasetId() *string { return v.DatasetId }

// GetDatasetPath returns StageQueryInputInputDefinition.DatasetPath, and is useful for accessing the field via an interface.
func (v *StageQueryInputInputDefinition) GetDatasetPath() *string { return v.DatasetPath }

// GetStageId returns StageQueryInputInputDefinition.StageId, and is useful for accessing the field via an interface.
func (v *StageQueryInputInputDefinition) GetStageId() *string { return v.StageId }

// TaskResult includes the GraphQL fields of TaskResult requested by the fragment TaskResult.
// The GraphQL type's documentation follows.
//
// Results returned from datasetProgressive and datasetQueryOutput.
// Note that we want to split this type up into individual types per result kind, because this allows
// to better specify (narrow down) which data is present in which result type.
// To better constrain this, the individual result types (currently only TaskResult and LiveQueryFreshnessUpdateResult)
// implement the interfaces of the subscriptions' / queries' result interfaces.
// Currently the only interface is LiveQueryResult, but there will be more when we split up TaskResult.
type TaskResult struct {
	// The Observe Query identifier
	QueryId string  `json:"queryId"`
	StageId *string `json:"stageId"`
	// The time range which this set of results cover.
	StartTime *types.TimeScalar `json:"startTime"`
	EndTime   *types.TimeScalar `json:"endTime"`
	// You used to paginate the data yourself out of S3 -- not needed anymore
	ResultCursor *interface{} `json:"resultCursor"`
	// how to understand the columns in the result from Snowflake --
	ResultSchema *TaskResultResultSchemaTaskResultSchema `json:"resultSchema"`
}

// GetQueryId returns TaskResult.QueryId, and is useful for accessing the field via an interface.
func (v *TaskResult) GetQueryId() string { return v.QueryId }

// GetStageId returns TaskResult.StageId, and is useful for accessing the field via an interface.
func (v *TaskResult) GetStageId() *string { return v.StageId }

// GetStartTime returns TaskResult.StartTime, and is useful for accessing the field via an interface.
func (v *TaskResult) GetStartTime() *types.TimeScalar { return v.StartTime }

// GetEndTime returns TaskResult.EndTime, and is useful for accessing the field via an interface.
func (v *TaskResult) GetEndTime() *types.TimeScalar { return v.EndTime }

// GetResultCursor returns TaskResult.ResultCursor, and is useful for accessing the field via an interface.
func (v *TaskResult) GetResultCursor() *interface{} { return v.ResultCursor }

// GetResultSchema returns TaskResult.ResultSchema, and is useful for accessing the field via an interface.
func (v *TaskResult) GetResultSchema() *TaskResultResultSchemaTaskResultSchema { return v.ResultSchema }

// TaskResultResultSchemaTaskResultSchema includes the requested fields of the GraphQL type TaskResultSchema.
type TaskResultResultSchemaTaskResultSchema struct {
	// this is the same schema as Typedef.definition
	TypedefDefinition *types.JsonObject `json:"typedefDefinition"`
}

// GetTypedefDefinition returns TaskResultResultSchemaTaskResultSchema.TypedefDefinition, and is useful for accessing the field via an interface.
func (v *TaskResultResultSchemaTaskResultSchema) GetTypedefDefinition() *types.JsonObject {
	return v.TypedefDefinition
}

// TerraformDefinition includes the GraphQL fields of TerraformDefinition requested by the fragment TerraformDefinition.
type TerraformDefinition struct {
	DataSource *string `json:"dataSource"`
	Resource   *string `json:"resource"`
	ImportId   *string `json:"importId"`
	ImportName *string `json:"importName"`
}

// GetDataSource returns TerraformDefinition.DataSource, and is useful for accessing the field via an interface.
func (v *TerraformDefinition) GetDataSource() *string { return v.DataSource }

// GetResource returns TerraformDefinition.Resource, and is useful for accessing the field via an interface.
func (v *TerraformDefinition) GetResource() *string { return v.Resource }

// GetImportId returns TerraformDefinition.ImportId, and is useful for accessing the field via an interface.
func (v *TerraformDefinition) GetImportId() *string { return v.ImportId }

// GetImportName returns TerraformDefinition.ImportName, and is useful for accessing the field via an interface.
func (v *TerraformDefinition) GetImportName() *string { return v.ImportName }

type TerraformObjectType string

const (
	TerraformObjectTypeDataset   TerraformObjectType = "Dataset"
	TerraformObjectTypeBoard     TerraformObjectType = "Board"
	TerraformObjectTypeMonitor   TerraformObjectType = "Monitor"
	TerraformObjectTypeDashboard TerraformObjectType = "Dashboard"
)

type ThresholdAggFunction string

const (
	ThresholdAggFunctionAtalltimes  ThresholdAggFunction = "AtAllTimes"
	ThresholdAggFunctionAtleastonce ThresholdAggFunction = "AtLeastOnce"
	ThresholdAggFunctionOnaverage   ThresholdAggFunction = "OnAverage"
	ThresholdAggFunctionIntotal     ThresholdAggFunction = "InTotal"
)

type TimeFunction string

const (
	TimeFunctionNever                  TimeFunction = "Never"
	TimeFunctionAtleastonce            TimeFunction = "AtLeastOnce"
	TimeFunctionAtalltimes             TimeFunction = "AtAllTimes"
	TimeFunctionAtleastpercentagetime  TimeFunction = "AtLeastPercentageTime"
	TimeFunctionLessthanpercentagetime TimeFunction = "LessThanPercentageTime"
	TimeFunctionNoevents               TimeFunction = "NoEvents"
	TimeFunctionAllevents              TimeFunction = "AllEvents"
	TimeFunctionCounttimes             TimeFunction = "CountTimes"
)

type TimeRangeInput struct {
	Start *types.TimeScalar `json:"start"`
	End   *types.TimeScalar `json:"end"`
}

// GetStart returns TimeRangeInput.Start, and is useful for accessing the field via an interface.
func (v *TimeRangeInput) GetStart() *types.TimeScalar { return v.Start }

// GetEnd returns TimeRangeInput.End, and is useful for accessing the field via an interface.
func (v *TimeRangeInput) GetEnd() *types.TimeScalar { return v.End }

type TimeSinceEpoch struct {
	Value *types.Int64Scalar `json:"value"`
	Unit  *TimeUnit          `json:"unit"`
}

// GetValue returns TimeSinceEpoch.Value, and is useful for accessing the field via an interface.
func (v *TimeSinceEpoch) GetValue() *types.Int64Scalar { return v.Value }

// GetUnit returns TimeSinceEpoch.Unit, and is useful for accessing the field via an interface.
func (v *TimeSinceEpoch) GetUnit() *TimeUnit { return v.Unit }

type TimeUnit string

const (
	TimeUnitSecond      TimeUnit = "Second"
	TimeUnitMillisecond TimeUnit = "Millisecond"
	TimeUnitMicrosecond TimeUnit = "Microsecond"
	TimeUnitNanosecond  TimeUnit = "Nanosecond"
)

// User includes the GraphQL fields of User requested by the fragment User.
type User struct {
	Id      types.UserIdScalar `json:"id"`
	Email   string             `json:"email"`
	Comment *string            `json:"comment"`
	Label   string             `json:"label"`
}

// GetId returns User.Id, and is useful for accessing the field via an interface.
func (v *User) GetId() types.UserIdScalar { return v.Id }

// GetEmail returns User.Email, and is useful for accessing the field via an interface.
func (v *User) GetEmail() string { return v.Email }

// GetComment returns User.Comment, and is useful for accessing the field via an interface.
func (v *User) GetComment() *string { return v.Comment }

// GetLabel returns User.Label, and is useful for accessing the field via an interface.
func (v *User) GetLabel() string { return v.Label }

// These are the OPAL native types that can go into worksheet parameters.  Some
// of the native OPAL types aren't (currently?) exposed to the worksheet
// parameters, but it's likely we will expand this to the full roster over time.
// Also, there will be other places where we send "values" into the API. For
// example, we've dodged it so far in places like monitors, by saying "threshold
// is always float, and facet is always string," but a generic monitor
// specification should absolutely use ValueInput / ValueType.
type ValueType string

const (
	// be explicit about the "empty" value for the null/unknown case
	ValueTypeNone       ValueType = "NONE"
	ValueTypeBool       ValueType = "BOOL"
	ValueTypeFloat64    ValueType = "FLOAT64"
	ValueTypeInt64      ValueType = "INT64"
	ValueTypeString     ValueType = "STRING"
	ValueTypeTimestamp  ValueType = "TIMESTAMP"
	ValueTypeDuration   ValueType = "DURATION"
	ValueTypeArray      ValueType = "ARRAY"
	ValueTypeLink       ValueType = "LINK"
	ValueTypeDatasetref ValueType = "DATASETREF"
)

type ValueTypeSpecInput struct {
	Type            ValueType           `json:"type"`
	ArrayItemType   *ValueTypeSpecInput `json:"arrayItemType"`
	KeyForDatasetId *string             `json:"keyForDatasetId"`
}

// GetType returns ValueTypeSpecInput.Type, and is useful for accessing the field via an interface.
func (v *ValueTypeSpecInput) GetType() ValueType { return v.Type }

// GetArrayItemType returns ValueTypeSpecInput.ArrayItemType, and is useful for accessing the field via an interface.
func (v *ValueTypeSpecInput) GetArrayItemType() *ValueTypeSpecInput { return v.ArrayItemType }

// GetKeyForDatasetId returns ValueTypeSpecInput.KeyForDatasetId, and is useful for accessing the field via an interface.
func (v *ValueTypeSpecInput) GetKeyForDatasetId() *string { return v.KeyForDatasetId }

type VolumeStatsInput struct {
	// Number of buckets to compute the volume over time.
	// Set to 0 to disable volume over time stats.
	// Set to null to let the backend decide.
	BucketCount *types.Int64Scalar `json:"bucketCount"`
	// Whether to compute the total number of rows. null or false would disable it.
	NeedTotalCount *bool `json:"needTotalCount"`
}

// GetBucketCount returns VolumeStatsInput.BucketCount, and is useful for accessing the field via an interface.
func (v *VolumeStatsInput) GetBucketCount() *types.Int64Scalar { return v.BucketCount }

// GetNeedTotalCount returns VolumeStatsInput.NeedTotalCount, and is useful for accessing the field via an interface.
func (v *VolumeStatsInput) GetNeedTotalCount() *bool { return v.NeedTotalCount }

type WebhookActionInput struct {
	// If the templateName is not set, it will be set as an empty string.
	TemplateName *string              `json:"templateName"`
	UrlTemplate  *string              `json:"urlTemplate"`
	Method       *string              `json:"method"`
	Headers      []WebhookHeaderInput `json:"headers"`
	BodyTemplate *string              `json:"bodyTemplate"`
	// Fragments are fields that users can edit on simple mode.
	// For example,
	// fragments.title = {{notification.kind}} fired off at {{notification.startTime}}
	// is available in all other templates as {{fragments.title}}
	Fragments *types.JsonObject `json:"fragments"`
}

// GetTemplateName returns WebhookActionInput.TemplateName, and is useful for accessing the field via an interface.
func (v *WebhookActionInput) GetTemplateName() *string { return v.TemplateName }

// GetUrlTemplate returns WebhookActionInput.UrlTemplate, and is useful for accessing the field via an interface.
func (v *WebhookActionInput) GetUrlTemplate() *string { return v.UrlTemplate }

// GetMethod returns WebhookActionInput.Method, and is useful for accessing the field via an interface.
func (v *WebhookActionInput) GetMethod() *string { return v.Method }

// GetHeaders returns WebhookActionInput.Headers, and is useful for accessing the field via an interface.
func (v *WebhookActionInput) GetHeaders() []WebhookHeaderInput { return v.Headers }

// GetBodyTemplate returns WebhookActionInput.BodyTemplate, and is useful for accessing the field via an interface.
func (v *WebhookActionInput) GetBodyTemplate() *string { return v.BodyTemplate }

// GetFragments returns WebhookActionInput.Fragments, and is useful for accessing the field via an interface.
func (v *WebhookActionInput) GetFragments() *types.JsonObject { return v.Fragments }

type WebhookHeaderInput struct {
	Header        string `json:"header"`
	ValueTemplate string `json:"valueTemplate"`
}

// GetHeader returns WebhookHeaderInput.Header, and is useful for accessing the field via an interface.
func (v *WebhookHeaderInput) GetHeader() string { return v.Header }

// GetValueTemplate returns WebhookHeaderInput.ValueTemplate, and is useful for accessing the field via an interface.
func (v *WebhookHeaderInput) GetValueTemplate() string { return v.ValueTemplate }

// Worksheet includes the GraphQL fields of Worksheet requested by the fragment Worksheet.
type Worksheet struct {
	Id          string       `json:"id"`
	Label       string       `json:"label"`
	Icon        *string      `json:"icon"`
	ManagedById *string      `json:"managedById"`
	WorkspaceId string       `json:"workspaceId"`
	Stages      []StageQuery `json:"stages"`
}

// GetId returns Worksheet.Id, and is useful for accessing the field via an interface.
func (v *Worksheet) GetId() string { return v.Id }

// GetLabel returns Worksheet.Label, and is useful for accessing the field via an interface.
func (v *Worksheet) GetLabel() string { return v.Label }

// GetIcon returns Worksheet.Icon, and is useful for accessing the field via an interface.
func (v *Worksheet) GetIcon() *string { return v.Icon }

// GetManagedById returns Worksheet.ManagedById, and is useful for accessing the field via an interface.
func (v *Worksheet) GetManagedById() *string { return v.ManagedById }

// GetWorkspaceId returns Worksheet.WorkspaceId, and is useful for accessing the field via an interface.
func (v *Worksheet) GetWorkspaceId() string { return v.WorkspaceId }

// GetStages returns Worksheet.Stages, and is useful for accessing the field via an interface.
func (v *Worksheet) GetStages() []StageQuery { return v.Stages }

// WorksheetIdLabel includes the GraphQL fields of Worksheet requested by the fragment WorksheetIdLabel.
type WorksheetIdLabel struct {
	Id    string `json:"id"`
	Label string `json:"label"`
}

// GetId returns WorksheetIdLabel.Id, and is useful for accessing the field via an interface.
func (v *WorksheetIdLabel) GetId() string { return v.Id }

// GetLabel returns WorksheetIdLabel.Label, and is useful for accessing the field via an interface.
func (v *WorksheetIdLabel) GetLabel() string { return v.Label }

type WorksheetInput struct {
	// if id is not specified, a new worksheet is created
	Id              *string                 `json:"id"`
	Name            *string                 `json:"name"`
	WorkspaceId     string                  `json:"workspaceId"`
	ManagedById     *string                 `json:"managedById"`
	Layout          *types.JsonObject       `json:"layout"`
	IconUrl         *string                 `json:"iconUrl"`
	Stages          []StageQueryInput       `json:"stages"`
	Parameters      []ParameterSpecInput    `json:"parameters"`
	ParameterValues []ParameterBindingInput `json:"parameterValues"`
	Label           *string                 `json:"label"`
	Icon            *string                 `json:"icon"`
}

// GetId returns WorksheetInput.Id, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetId() *string { return v.Id }

// GetName returns WorksheetInput.Name, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetName() *string { return v.Name }

// GetWorkspaceId returns WorksheetInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetManagedById returns WorksheetInput.ManagedById, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetManagedById() *string { return v.ManagedById }

// GetLayout returns WorksheetInput.Layout, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetLayout() *types.JsonObject { return v.Layout }

// GetIconUrl returns WorksheetInput.IconUrl, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetIconUrl() *string { return v.IconUrl }

// GetStages returns WorksheetInput.Stages, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetStages() []StageQueryInput { return v.Stages }

// GetParameters returns WorksheetInput.Parameters, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetParameters() []ParameterSpecInput { return v.Parameters }

// GetParameterValues returns WorksheetInput.ParameterValues, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetParameterValues() []ParameterBindingInput { return v.ParameterValues }

// GetLabel returns WorksheetInput.Label, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetLabel() *string { return v.Label }

// GetIcon returns WorksheetInput.Icon, and is useful for accessing the field via an interface.
func (v *WorksheetInput) GetIcon() *string { return v.Icon }

// Workspace includes the GraphQL fields of Project requested by the fragment Workspace.
// The GraphQL type's documentation follows.
//
// Project and Workspace are the same thing We call it Workspace in the UI
// design now, so at some point, maybe update the API to match the updated
// design?
type Workspace struct {
	Id    string `json:"id"`
	Label string `json:"label"`
}

// GetId returns Workspace.Id, and is useful for accessing the field via an interface.
func (v *Workspace) GetId() string { return v.Id }

// GetLabel returns Workspace.Label, and is useful for accessing the field via an interface.
func (v *Workspace) GetLabel() string { return v.Label }

type WorkspaceInput struct {
	Label    *string           `json:"label"`
	Timezone *string           `json:"timezone"`
	Locale   *string           `json:"locale"`
	Layout   *types.JsonObject `json:"layout"`
}

// GetLabel returns WorkspaceInput.Label, and is useful for accessing the field via an interface.
func (v *WorkspaceInput) GetLabel() *string { return v.Label }

// GetTimezone returns WorkspaceInput.Timezone, and is useful for accessing the field via an interface.
func (v *WorkspaceInput) GetTimezone() *string { return v.Timezone }

// GetLocale returns WorkspaceInput.Locale, and is useful for accessing the field via an interface.
func (v *WorkspaceInput) GetLocale() *string { return v.Locale }

// GetLayout returns WorkspaceInput.Layout, and is useful for accessing the field via an interface.
func (v *WorkspaceInput) GetLayout() *types.JsonObject { return v.Layout }

// __addCorrelationTagInput is used internally by genqlient
type __addCorrelationTagInput struct {
	DatasetId string         `json:"datasetId"`
	Path      LinkFieldInput `json:"path"`
	Tag       string         `json:"tag"`
}

// GetDatasetId returns __addCorrelationTagInput.DatasetId, and is useful for accessing the field via an interface.
func (v *__addCorrelationTagInput) GetDatasetId() string { return v.DatasetId }

// GetPath returns __addCorrelationTagInput.Path, and is useful for accessing the field via an interface.
func (v *__addCorrelationTagInput) GetPath() LinkFieldInput { return v.Path }

// GetTag returns __addCorrelationTagInput.Tag, and is useful for accessing the field via an interface.
func (v *__addCorrelationTagInput) GetTag() string { return v.Tag }

// __clearDefaultDashboardInput is used internally by genqlient
type __clearDefaultDashboardInput struct {
	Dsid string `json:"dsid"`
}

// GetDsid returns __clearDefaultDashboardInput.Dsid, and is useful for accessing the field via an interface.
func (v *__clearDefaultDashboardInput) GetDsid() string { return v.Dsid }

// __createAppDataSourceInput is used internally by genqlient
type __createAppDataSourceInput struct {
	Config AppDataSourceInput `json:"config"`
}

// GetConfig returns __createAppDataSourceInput.Config, and is useful for accessing the field via an interface.
func (v *__createAppDataSourceInput) GetConfig() AppDataSourceInput { return v.Config }

// __createAppInput is used internally by genqlient
type __createAppInput struct {
	WorkspaceId string   `json:"workspaceId"`
	Config      AppInput `json:"config"`
}

// GetWorkspaceId returns __createAppInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createAppInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetConfig returns __createAppInput.Config, and is useful for accessing the field via an interface.
func (v *__createAppInput) GetConfig() AppInput { return v.Config }

// __createBoardInput is used internally by genqlient
type __createBoardInput struct {
	DatasetId string     `json:"datasetId"`
	BoardType BoardType  `json:"boardType"`
	Board     BoardInput `json:"board"`
}

// GetDatasetId returns __createBoardInput.DatasetId, and is useful for accessing the field via an interface.
func (v *__createBoardInput) GetDatasetId() string { return v.DatasetId }

// GetBoardType returns __createBoardInput.BoardType, and is useful for accessing the field via an interface.
func (v *__createBoardInput) GetBoardType() BoardType { return v.BoardType }

// GetBoard returns __createBoardInput.Board, and is useful for accessing the field via an interface.
func (v *__createBoardInput) GetBoard() BoardInput { return v.Board }

// __createChannelActionInput is used internally by genqlient
type __createChannelActionInput struct {
	WorkspaceId string      `json:"workspaceId"`
	Action      ActionInput `json:"action"`
}

// GetWorkspaceId returns __createChannelActionInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createChannelActionInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetAction returns __createChannelActionInput.Action, and is useful for accessing the field via an interface.
func (v *__createChannelActionInput) GetAction() ActionInput { return v.Action }

// __createChannelInput is used internally by genqlient
type __createChannelInput struct {
	WorkspaceId string       `json:"workspaceId"`
	Channel     ChannelInput `json:"channel"`
}

// GetWorkspaceId returns __createChannelInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createChannelInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetChannel returns __createChannelInput.Channel, and is useful for accessing the field via an interface.
func (v *__createChannelInput) GetChannel() ChannelInput { return v.Channel }

// __createDashboardLinkInput is used internally by genqlient
type __createDashboardLinkInput struct {
	Input DashboardLinkInput `json:"input"`
}

// GetInput returns __createDashboardLinkInput.Input, and is useful for accessing the field via an interface.
func (v *__createDashboardLinkInput) GetInput() DashboardLinkInput { return v.Input }

// __createDatasetOutboundShareInput is used internally by genqlient
type __createDatasetOutboundShareInput struct {
	WorkspaceId     string                    `json:"workspaceId"`
	DatasetID       string                    `json:"datasetID"`
	OutboundShareID string                    `json:"outboundShareID"`
	Input           DatasetOutboundShareInput `json:"input"`
}

// GetWorkspaceId returns __createDatasetOutboundShareInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createDatasetOutboundShareInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetDatasetID returns __createDatasetOutboundShareInput.DatasetID, and is useful for accessing the field via an interface.
func (v *__createDatasetOutboundShareInput) GetDatasetID() string { return v.DatasetID }

// GetOutboundShareID returns __createDatasetOutboundShareInput.OutboundShareID, and is useful for accessing the field via an interface.
func (v *__createDatasetOutboundShareInput) GetOutboundShareID() string { return v.OutboundShareID }

// GetInput returns __createDatasetOutboundShareInput.Input, and is useful for accessing the field via an interface.
func (v *__createDatasetOutboundShareInput) GetInput() DatasetOutboundShareInput { return v.Input }

// __createDatastreamInput is used internally by genqlient
type __createDatastreamInput struct {
	WorkspaceId string          `json:"workspaceId"`
	Datastream  DatastreamInput `json:"datastream"`
}

// GetWorkspaceId returns __createDatastreamInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createDatastreamInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetDatastream returns __createDatastreamInput.Datastream, and is useful for accessing the field via an interface.
func (v *__createDatastreamInput) GetDatastream() DatastreamInput { return v.Datastream }

// __createDatastreamTokenInput is used internally by genqlient
type __createDatastreamTokenInput struct {
	DatastreamId string               `json:"datastreamId"`
	Token        DatastreamTokenInput `json:"token"`
	Password     *string              `json:"password"`
}

// GetDatastreamId returns __createDatastreamTokenInput.DatastreamId, and is useful for accessing the field via an interface.
func (v *__createDatastreamTokenInput) GetDatastreamId() string { return v.DatastreamId }

// GetToken returns __createDatastreamTokenInput.Token, and is useful for accessing the field via an interface.
func (v *__createDatastreamTokenInput) GetToken() DatastreamTokenInput { return v.Token }

// GetPassword returns __createDatastreamTokenInput.Password, and is useful for accessing the field via an interface.
func (v *__createDatastreamTokenInput) GetPassword() *string { return v.Password }

// __createDeferredForeignKeyInput is used internally by genqlient
type __createDeferredForeignKeyInput struct {
	WorkspaceId string                  `json:"workspaceId"`
	KeyInput    DeferredForeignKeyInput `json:"keyInput"`
}

// GetWorkspaceId returns __createDeferredForeignKeyInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createDeferredForeignKeyInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetKeyInput returns __createDeferredForeignKeyInput.KeyInput, and is useful for accessing the field via an interface.
func (v *__createDeferredForeignKeyInput) GetKeyInput() DeferredForeignKeyInput { return v.KeyInput }

// __createFiledropInput is used internally by genqlient
type __createFiledropInput struct {
	WorkspaceID  string        `json:"workspaceID"`
	DatastreamID string        `json:"datastreamID"`
	Input        FiledropInput `json:"input"`
}

// GetWorkspaceID returns __createFiledropInput.WorkspaceID, and is useful for accessing the field via an interface.
func (v *__createFiledropInput) GetWorkspaceID() string { return v.WorkspaceID }

// GetDatastreamID returns __createFiledropInput.DatastreamID, and is useful for accessing the field via an interface.
func (v *__createFiledropInput) GetDatastreamID() string { return v.DatastreamID }

// GetInput returns __createFiledropInput.Input, and is useful for accessing the field via an interface.
func (v *__createFiledropInput) GetInput() FiledropInput { return v.Input }

// __createFolderInput is used internally by genqlient
type __createFolderInput struct {
	WorkspaceId string      `json:"workspaceId"`
	Config      FolderInput `json:"config"`
}

// GetWorkspaceId returns __createFolderInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createFolderInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetConfig returns __createFolderInput.Config, and is useful for accessing the field via an interface.
func (v *__createFolderInput) GetConfig() FolderInput { return v.Config }

// __createLayeredSettingRecordInput is used internally by genqlient
type __createLayeredSettingRecordInput struct {
	SettingRecord LayeredSettingRecordInput `json:"settingRecord"`
}

// GetSettingRecord returns __createLayeredSettingRecordInput.SettingRecord, and is useful for accessing the field via an interface.
func (v *__createLayeredSettingRecordInput) GetSettingRecord() LayeredSettingRecordInput {
	return v.SettingRecord
}

// __createMonitorActionAttachmentInput is used internally by genqlient
type __createMonitorActionAttachmentInput struct {
	MonitorActionAttachment MonitorActionAttachmentInput `json:"monitorActionAttachment"`
}

// GetMonitorActionAttachment returns __createMonitorActionAttachmentInput.MonitorActionAttachment, and is useful for accessing the field via an interface.
func (v *__createMonitorActionAttachmentInput) GetMonitorActionAttachment() MonitorActionAttachmentInput {
	return v.MonitorActionAttachment
}

// __createMonitorActionInput is used internally by genqlient
type __createMonitorActionInput struct {
	MonitorAction MonitorActionInput `json:"monitorAction"`
}

// GetMonitorAction returns __createMonitorActionInput.MonitorAction, and is useful for accessing the field via an interface.
func (v *__createMonitorActionInput) GetMonitorAction() MonitorActionInput { return v.MonitorAction }

// __createMonitorInput is used internally by genqlient
type __createMonitorInput struct {
	WorkspaceId string       `json:"workspaceId"`
	Monitor     MonitorInput `json:"monitor"`
}

// GetWorkspaceId returns __createMonitorInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createMonitorInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetMonitor returns __createMonitorInput.Monitor, and is useful for accessing the field via an interface.
func (v *__createMonitorInput) GetMonitor() MonitorInput { return v.Monitor }

// __createMonitorV2ActionInput is used internally by genqlient
type __createMonitorV2ActionInput struct {
	WorkspaceId string               `json:"workspaceId"`
	Input       MonitorV2ActionInput `json:"input"`
}

// GetWorkspaceId returns __createMonitorV2ActionInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createMonitorV2ActionInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetInput returns __createMonitorV2ActionInput.Input, and is useful for accessing the field via an interface.
func (v *__createMonitorV2ActionInput) GetInput() MonitorV2ActionInput { return v.Input }

// __createMonitorV2Input is used internally by genqlient
type __createMonitorV2Input struct {
	WorkspaceId string         `json:"workspaceId"`
	Input       MonitorV2Input `json:"input"`
}

// GetWorkspaceId returns __createMonitorV2Input.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createMonitorV2Input) GetWorkspaceId() string { return v.WorkspaceId }

// GetInput returns __createMonitorV2Input.Input, and is useful for accessing the field via an interface.
func (v *__createMonitorV2Input) GetInput() MonitorV2Input { return v.Input }

// __createOrUpdateBookmarkGroupInput is used internally by genqlient
type __createOrUpdateBookmarkGroupInput struct {
	Id    *string            `json:"id"`
	Group BookmarkGroupInput `json:"group"`
}

// GetId returns __createOrUpdateBookmarkGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__createOrUpdateBookmarkGroupInput) GetId() *string { return v.Id }

// GetGroup returns __createOrUpdateBookmarkGroupInput.Group, and is useful for accessing the field via an interface.
func (v *__createOrUpdateBookmarkGroupInput) GetGroup() BookmarkGroupInput { return v.Group }

// __createOrUpdateBookmarkInput is used internally by genqlient
type __createOrUpdateBookmarkInput struct {
	Id       *string       `json:"id"`
	Bookmark BookmarkInput `json:"bookmark"`
}

// GetId returns __createOrUpdateBookmarkInput.Id, and is useful for accessing the field via an interface.
func (v *__createOrUpdateBookmarkInput) GetId() *string { return v.Id }

// GetBookmark returns __createOrUpdateBookmarkInput.Bookmark, and is useful for accessing the field via an interface.
func (v *__createOrUpdateBookmarkInput) GetBookmark() BookmarkInput { return v.Bookmark }

// __createPollerInput is used internally by genqlient
type __createPollerInput struct {
	WorkspaceId string      `json:"workspaceId"`
	Poller      PollerInput `json:"poller"`
}

// GetWorkspaceId returns __createPollerInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createPollerInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetPoller returns __createPollerInput.Poller, and is useful for accessing the field via an interface.
func (v *__createPollerInput) GetPoller() PollerInput { return v.Poller }

// __createPreferredPathInput is used internally by genqlient
type __createPreferredPathInput struct {
	WorkspaceId string             `json:"workspaceId"`
	Config      PreferredPathInput `json:"config"`
}

// GetWorkspaceId returns __createPreferredPathInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createPreferredPathInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetConfig returns __createPreferredPathInput.Config, and is useful for accessing the field via an interface.
func (v *__createPreferredPathInput) GetConfig() PreferredPathInput { return v.Config }

// __createRbacGroupInput is used internally by genqlient
type __createRbacGroupInput struct {
	Config RbacGroupInput `json:"config"`
}

// GetConfig returns __createRbacGroupInput.Config, and is useful for accessing the field via an interface.
func (v *__createRbacGroupInput) GetConfig() RbacGroupInput { return v.Config }

// __createRbacGroupmemberInput is used internally by genqlient
type __createRbacGroupmemberInput struct {
	Config RbacGroupmemberInput `json:"config"`
}

// GetConfig returns __createRbacGroupmemberInput.Config, and is useful for accessing the field via an interface.
func (v *__createRbacGroupmemberInput) GetConfig() RbacGroupmemberInput { return v.Config }

// __createRbacStatementInput is used internally by genqlient
type __createRbacStatementInput struct {
	Config RbacStatementInput `json:"config"`
}

// GetConfig returns __createRbacStatementInput.Config, and is useful for accessing the field via an interface.
func (v *__createRbacStatementInput) GetConfig() RbacStatementInput { return v.Config }

// __createSnowflakeOutboundShareInput is used internally by genqlient
type __createSnowflakeOutboundShareInput struct {
	WorkspaceId string                      `json:"workspaceId"`
	Input       SnowflakeOutboundShareInput `json:"input"`
}

// GetWorkspaceId returns __createSnowflakeOutboundShareInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__createSnowflakeOutboundShareInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetInput returns __createSnowflakeOutboundShareInput.Input, and is useful for accessing the field via an interface.
func (v *__createSnowflakeOutboundShareInput) GetInput() SnowflakeOutboundShareInput { return v.Input }

// __createWorkspaceInput is used internally by genqlient
type __createWorkspaceInput struct {
	Config WorkspaceInput `json:"config"`
}

// GetConfig returns __createWorkspaceInput.Config, and is useful for accessing the field via an interface.
func (v *__createWorkspaceInput) GetConfig() WorkspaceInput { return v.Config }

// __deleteAppDataSourceInput is used internally by genqlient
type __deleteAppDataSourceInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteAppDataSourceInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteAppDataSourceInput) GetId() string { return v.Id }

// __deleteAppInput is used internally by genqlient
type __deleteAppInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteAppInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteAppInput) GetId() string { return v.Id }

// __deleteBoardInput is used internally by genqlient
type __deleteBoardInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteBoardInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteBoardInput) GetId() string { return v.Id }

// __deleteBookmarkGroupInput is used internally by genqlient
type __deleteBookmarkGroupInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteBookmarkGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteBookmarkGroupInput) GetId() string { return v.Id }

// __deleteBookmarkInput is used internally by genqlient
type __deleteBookmarkInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteBookmarkInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteBookmarkInput) GetId() string { return v.Id }

// __deleteChannelActionInput is used internally by genqlient
type __deleteChannelActionInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteChannelActionInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteChannelActionInput) GetId() string { return v.Id }

// __deleteChannelInput is used internally by genqlient
type __deleteChannelInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteChannelInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteChannelInput) GetId() string { return v.Id }

// __deleteDashboardInput is used internally by genqlient
type __deleteDashboardInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteDashboardInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteDashboardInput) GetId() string { return v.Id }

// __deleteDashboardLinkInput is used internally by genqlient
type __deleteDashboardLinkInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteDashboardLinkInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteDashboardLinkInput) GetId() string { return v.Id }

// __deleteDatasetInput is used internally by genqlient
type __deleteDatasetInput struct {
	Id  string                   `json:"id"`
	Dep *DependencyHandlingInput `json:"dep"`
}

// GetId returns __deleteDatasetInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteDatasetInput) GetId() string { return v.Id }

// GetDep returns __deleteDatasetInput.Dep, and is useful for accessing the field via an interface.
func (v *__deleteDatasetInput) GetDep() *DependencyHandlingInput { return v.Dep }

// __deleteDatasetOutboundShareInput is used internally by genqlient
type __deleteDatasetOutboundShareInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteDatasetOutboundShareInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteDatasetOutboundShareInput) GetId() string { return v.Id }

// __deleteDatastreamInput is used internally by genqlient
type __deleteDatastreamInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteDatastreamInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteDatastreamInput) GetId() string { return v.Id }

// __deleteDatastreamTokenInput is used internally by genqlient
type __deleteDatastreamTokenInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteDatastreamTokenInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteDatastreamTokenInput) GetId() string { return v.Id }

// __deleteDeferredForeignKeyInput is used internally by genqlient
type __deleteDeferredForeignKeyInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteDeferredForeignKeyInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteDeferredForeignKeyInput) GetId() string { return v.Id }

// __deleteFiledropInput is used internally by genqlient
type __deleteFiledropInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteFiledropInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteFiledropInput) GetId() string { return v.Id }

// __deleteFolderInput is used internally by genqlient
type __deleteFolderInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteFolderInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteFolderInput) GetId() string { return v.Id }

// __deleteLayeredSettingRecordInput is used internally by genqlient
type __deleteLayeredSettingRecordInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteLayeredSettingRecordInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteLayeredSettingRecordInput) GetId() string { return v.Id }

// __deleteMonitorActionAttachmentInput is used internally by genqlient
type __deleteMonitorActionAttachmentInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteMonitorActionAttachmentInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteMonitorActionAttachmentInput) GetId() string { return v.Id }

// __deleteMonitorActionInput is used internally by genqlient
type __deleteMonitorActionInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteMonitorActionInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteMonitorActionInput) GetId() string { return v.Id }

// __deleteMonitorInput is used internally by genqlient
type __deleteMonitorInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteMonitorInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteMonitorInput) GetId() string { return v.Id }

// __deleteMonitorV2ActionInput is used internally by genqlient
type __deleteMonitorV2ActionInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteMonitorV2ActionInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteMonitorV2ActionInput) GetId() string { return v.Id }

// __deleteMonitorV2Input is used internally by genqlient
type __deleteMonitorV2Input struct {
	Id string `json:"id"`
}

// GetId returns __deleteMonitorV2Input.Id, and is useful for accessing the field via an interface.
func (v *__deleteMonitorV2Input) GetId() string { return v.Id }

// __deletePollerInput is used internally by genqlient
type __deletePollerInput struct {
	Id string `json:"id"`
}

// GetId returns __deletePollerInput.Id, and is useful for accessing the field via an interface.
func (v *__deletePollerInput) GetId() string { return v.Id }

// __deletePreferredPathInput is used internally by genqlient
type __deletePreferredPathInput struct {
	Id string `json:"id"`
}

// GetId returns __deletePreferredPathInput.Id, and is useful for accessing the field via an interface.
func (v *__deletePreferredPathInput) GetId() string { return v.Id }

// __deleteRbacGroupInput is used internally by genqlient
type __deleteRbacGroupInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteRbacGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteRbacGroupInput) GetId() string { return v.Id }

// __deleteRbacGroupmemberInput is used internally by genqlient
type __deleteRbacGroupmemberInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteRbacGroupmemberInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteRbacGroupmemberInput) GetId() string { return v.Id }

// __deleteRbacStatementInput is used internally by genqlient
type __deleteRbacStatementInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteRbacStatementInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteRbacStatementInput) GetId() string { return v.Id }

// __deleteSnowflakeOutboundShareInput is used internally by genqlient
type __deleteSnowflakeOutboundShareInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteSnowflakeOutboundShareInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteSnowflakeOutboundShareInput) GetId() string { return v.Id }

// __deleteWorksheetInput is used internally by genqlient
type __deleteWorksheetInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteWorksheetInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteWorksheetInput) GetId() string { return v.Id }

// __deleteWorkspaceInput is used internally by genqlient
type __deleteWorkspaceInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteWorkspaceInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteWorkspaceInput) GetId() string { return v.Id }

// __getAppDataSourceInput is used internally by genqlient
type __getAppDataSourceInput struct {
	Id string `json:"id"`
}

// GetId returns __getAppDataSourceInput.Id, and is useful for accessing the field via an interface.
func (v *__getAppDataSourceInput) GetId() string { return v.Id }

// __getAppInput is used internally by genqlient
type __getAppInput struct {
	Id string `json:"id"`
}

// GetId returns __getAppInput.Id, and is useful for accessing the field via an interface.
func (v *__getAppInput) GetId() string { return v.Id }

// __getBoardInput is used internally by genqlient
type __getBoardInput struct {
	Id string `json:"id"`
}

// GetId returns __getBoardInput.Id, and is useful for accessing the field via an interface.
func (v *__getBoardInput) GetId() string { return v.Id }

// __getBookmarkGroupInput is used internally by genqlient
type __getBookmarkGroupInput struct {
	Id string `json:"id"`
}

// GetId returns __getBookmarkGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__getBookmarkGroupInput) GetId() string { return v.Id }

// __getBookmarkInput is used internally by genqlient
type __getBookmarkInput struct {
	Id string `json:"id"`
}

// GetId returns __getBookmarkInput.Id, and is useful for accessing the field via an interface.
func (v *__getBookmarkInput) GetId() string { return v.Id }

// __getChannelActionInput is used internally by genqlient
type __getChannelActionInput struct {
	Id string `json:"id"`
}

// GetId returns __getChannelActionInput.Id, and is useful for accessing the field via an interface.
func (v *__getChannelActionInput) GetId() string { return v.Id }

// __getChannelInput is used internally by genqlient
type __getChannelInput struct {
	Id string `json:"id"`
}

// GetId returns __getChannelInput.Id, and is useful for accessing the field via an interface.
func (v *__getChannelInput) GetId() string { return v.Id }

// __getDashboardInput is used internally by genqlient
type __getDashboardInput struct {
	Id string `json:"id"`
}

// GetId returns __getDashboardInput.Id, and is useful for accessing the field via an interface.
func (v *__getDashboardInput) GetId() string { return v.Id }

// __getDashboardLinkInput is used internally by genqlient
type __getDashboardLinkInput struct {
	Id string `json:"id"`
}

// GetId returns __getDashboardLinkInput.Id, and is useful for accessing the field via an interface.
func (v *__getDashboardLinkInput) GetId() string { return v.Id }

// __getDatasetCorrelationTagsInput is used internally by genqlient
type __getDatasetCorrelationTagsInput struct {
	DatasetId string `json:"datasetId"`
}

// GetDatasetId returns __getDatasetCorrelationTagsInput.DatasetId, and is useful for accessing the field via an interface.
func (v *__getDatasetCorrelationTagsInput) GetDatasetId() string { return v.DatasetId }

// __getDatasetInput is used internally by genqlient
type __getDatasetInput struct {
	Id string `json:"id"`
}

// GetId returns __getDatasetInput.Id, and is useful for accessing the field via an interface.
func (v *__getDatasetInput) GetId() string { return v.Id }

// __getDatasetOutboundShareInput is used internally by genqlient
type __getDatasetOutboundShareInput struct {
	Id string `json:"id"`
}

// GetId returns __getDatasetOutboundShareInput.Id, and is useful for accessing the field via an interface.
func (v *__getDatasetOutboundShareInput) GetId() string { return v.Id }

// __getDatasetQueryOutputInput is used internally by genqlient
type __getDatasetQueryOutputInput struct {
	Query  []*StageInput `json:"query"`
	Params QueryParams   `json:"params"`
}

// GetQuery returns __getDatasetQueryOutputInput.Query, and is useful for accessing the field via an interface.
func (v *__getDatasetQueryOutputInput) GetQuery() []*StageInput { return v.Query }

// GetParams returns __getDatasetQueryOutputInput.Params, and is useful for accessing the field via an interface.
func (v *__getDatasetQueryOutputInput) GetParams() QueryParams { return v.Params }

// __getDatastreamInput is used internally by genqlient
type __getDatastreamInput struct {
	Id string `json:"id"`
}

// GetId returns __getDatastreamInput.Id, and is useful for accessing the field via an interface.
func (v *__getDatastreamInput) GetId() string { return v.Id }

// __getDatastreamTokenInput is used internally by genqlient
type __getDatastreamTokenInput struct {
	Id string `json:"id"`
}

// GetId returns __getDatastreamTokenInput.Id, and is useful for accessing the field via an interface.
func (v *__getDatastreamTokenInput) GetId() string { return v.Id }

// __getDefaultDashboardInput is used internally by genqlient
type __getDefaultDashboardInput struct {
	Dsid string `json:"dsid"`
}

// GetDsid returns __getDefaultDashboardInput.Dsid, and is useful for accessing the field via an interface.
func (v *__getDefaultDashboardInput) GetDsid() string { return v.Dsid }

// __getDeferredForeignKeyInput is used internally by genqlient
type __getDeferredForeignKeyInput struct {
	Id string `json:"id"`
}

// GetId returns __getDeferredForeignKeyInput.Id, and is useful for accessing the field via an interface.
func (v *__getDeferredForeignKeyInput) GetId() string { return v.Id }

// __getFiledropInput is used internally by genqlient
type __getFiledropInput struct {
	Id string `json:"id"`
}

// GetId returns __getFiledropInput.Id, and is useful for accessing the field via an interface.
func (v *__getFiledropInput) GetId() string { return v.Id }

// __getFolderInput is used internally by genqlient
type __getFolderInput struct {
	Id string `json:"id"`
}

// GetId returns __getFolderInput.Id, and is useful for accessing the field via an interface.
func (v *__getFolderInput) GetId() string { return v.Id }

// __getLayeredSettingRecordInput is used internally by genqlient
type __getLayeredSettingRecordInput struct {
	Id string `json:"id"`
}

// GetId returns __getLayeredSettingRecordInput.Id, and is useful for accessing the field via an interface.
func (v *__getLayeredSettingRecordInput) GetId() string { return v.Id }

// __getMonitorActionAttachmentInput is used internally by genqlient
type __getMonitorActionAttachmentInput struct {
	Id string `json:"id"`
}

// GetId returns __getMonitorActionAttachmentInput.Id, and is useful for accessing the field via an interface.
func (v *__getMonitorActionAttachmentInput) GetId() string { return v.Id }

// __getMonitorActionInput is used internally by genqlient
type __getMonitorActionInput struct {
	Id string `json:"id"`
}

// GetId returns __getMonitorActionInput.Id, and is useful for accessing the field via an interface.
func (v *__getMonitorActionInput) GetId() string { return v.Id }

// __getMonitorInput is used internally by genqlient
type __getMonitorInput struct {
	Id string `json:"id"`
}

// GetId returns __getMonitorInput.Id, and is useful for accessing the field via an interface.
func (v *__getMonitorInput) GetId() string { return v.Id }

// __getMonitorV2ActionInput is used internally by genqlient
type __getMonitorV2ActionInput struct {
	Id string `json:"id"`
}

// GetId returns __getMonitorV2ActionInput.Id, and is useful for accessing the field via an interface.
func (v *__getMonitorV2ActionInput) GetId() string { return v.Id }

// __getMonitorV2Input is used internally by genqlient
type __getMonitorV2Input struct {
	Id string `json:"id"`
}

// GetId returns __getMonitorV2Input.Id, and is useful for accessing the field via an interface.
func (v *__getMonitorV2Input) GetId() string { return v.Id }

// __getPollerInput is used internally by genqlient
type __getPollerInput struct {
	Id string `json:"id"`
}

// GetId returns __getPollerInput.Id, and is useful for accessing the field via an interface.
func (v *__getPollerInput) GetId() string { return v.Id }

// __getPreferredPathInput is used internally by genqlient
type __getPreferredPathInput struct {
	Id string `json:"id"`
}

// GetId returns __getPreferredPathInput.Id, and is useful for accessing the field via an interface.
func (v *__getPreferredPathInput) GetId() string { return v.Id }

// __getRbacGroupInput is used internally by genqlient
type __getRbacGroupInput struct {
	Id string `json:"id"`
}

// GetId returns __getRbacGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__getRbacGroupInput) GetId() string { return v.Id }

// __getRbacGroupmemberInput is used internally by genqlient
type __getRbacGroupmemberInput struct {
	Id string `json:"id"`
}

// GetId returns __getRbacGroupmemberInput.Id, and is useful for accessing the field via an interface.
func (v *__getRbacGroupmemberInput) GetId() string { return v.Id }

// __getRbacStatementInput is used internally by genqlient
type __getRbacStatementInput struct {
	Id string `json:"id"`
}

// GetId returns __getRbacStatementInput.Id, and is useful for accessing the field via an interface.
func (v *__getRbacStatementInput) GetId() string { return v.Id }

// __getSnowflakeOutboundShareInput is used internally by genqlient
type __getSnowflakeOutboundShareInput struct {
	Id string `json:"id"`
}

// GetId returns __getSnowflakeOutboundShareInput.Id, and is useful for accessing the field via an interface.
func (v *__getSnowflakeOutboundShareInput) GetId() string { return v.Id }

// __getTerraformInput is used internally by genqlient
type __getTerraformInput struct {
	Id string              `json:"id"`
	Ty TerraformObjectType `json:"ty"`
}

// GetId returns __getTerraformInput.Id, and is useful for accessing the field via an interface.
func (v *__getTerraformInput) GetId() string { return v.Id }

// GetTy returns __getTerraformInput.Ty, and is useful for accessing the field via an interface.
func (v *__getTerraformInput) GetTy() TerraformObjectType { return v.Ty }

// __getUserInput is used internally by genqlient
type __getUserInput struct {
	Id types.UserIdScalar `json:"id"`
}

// GetId returns __getUserInput.Id, and is useful for accessing the field via an interface.
func (v *__getUserInput) GetId() types.UserIdScalar { return v.Id }

// __getWorksheetInput is used internally by genqlient
type __getWorksheetInput struct {
	Id string `json:"id"`
}

// GetId returns __getWorksheetInput.Id, and is useful for accessing the field via an interface.
func (v *__getWorksheetInput) GetId() string { return v.Id }

// __getWorkspaceInput is used internally by genqlient
type __getWorkspaceInput struct {
	Id string `json:"id"`
}

// GetId returns __getWorkspaceInput.Id, and is useful for accessing the field via an interface.
func (v *__getWorkspaceInput) GetId() string { return v.Id }

// __listWorksheetsIdLabelOnlyInput is used internally by genqlient
type __listWorksheetsIdLabelOnlyInput struct {
	WorkspaceId string `json:"workspaceId"`
}

// GetWorkspaceId returns __listWorksheetsIdLabelOnlyInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__listWorksheetsIdLabelOnlyInput) GetWorkspaceId() string { return v.WorkspaceId }

// __lookupAppInput is used internally by genqlient
type __lookupAppInput struct {
	WorkspaceId string `json:"workspaceId"`
	Name        string `json:"name"`
}

// GetWorkspaceId returns __lookupAppInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__lookupAppInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetName returns __lookupAppInput.Name, and is useful for accessing the field via an interface.
func (v *__lookupAppInput) GetName() string { return v.Name }

// __lookupDatasetInput is used internally by genqlient
type __lookupDatasetInput struct {
	WorkspaceId string `json:"workspaceId"`
	Name        string `json:"name"`
}

// GetWorkspaceId returns __lookupDatasetInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__lookupDatasetInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetName returns __lookupDatasetInput.Name, and is useful for accessing the field via an interface.
func (v *__lookupDatasetInput) GetName() string { return v.Name }

// __lookupDatastreamInput is used internally by genqlient
type __lookupDatastreamInput struct {
	WorkspaceId string `json:"workspaceId"`
	Name        string `json:"name"`
}

// GetWorkspaceId returns __lookupDatastreamInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__lookupDatastreamInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetName returns __lookupDatastreamInput.Name, and is useful for accessing the field via an interface.
func (v *__lookupDatastreamInput) GetName() string { return v.Name }

// __lookupFolderInput is used internally by genqlient
type __lookupFolderInput struct {
	WorkspaceId string `json:"workspaceId"`
	Name        string `json:"name"`
}

// GetWorkspaceId returns __lookupFolderInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__lookupFolderInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetName returns __lookupFolderInput.Name, and is useful for accessing the field via an interface.
func (v *__lookupFolderInput) GetName() string { return v.Name }

// __lookupModuleVersionsInput is used internally by genqlient
type __lookupModuleVersionsInput struct {
	Id string `json:"id"`
}

// GetId returns __lookupModuleVersionsInput.Id, and is useful for accessing the field via an interface.
func (v *__lookupModuleVersionsInput) GetId() string { return v.Id }

// __lookupMonitorInput is used internally by genqlient
type __lookupMonitorInput struct {
	WorkspaceId string `json:"workspaceId"`
	Name        string `json:"name"`
}

// GetWorkspaceId returns __lookupMonitorInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__lookupMonitorInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetName returns __lookupMonitorInput.Name, and is useful for accessing the field via an interface.
func (v *__lookupMonitorInput) GetName() string { return v.Name }

// __lookupMonitorV2Input is used internally by genqlient
type __lookupMonitorV2Input struct {
	WorkspaceId   *string `json:"workspaceId"`
	FolderId      *string `json:"folderId"`
	NameExact     *string `json:"nameExact"`
	NameSubstring *string `json:"nameSubstring"`
}

// GetWorkspaceId returns __lookupMonitorV2Input.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__lookupMonitorV2Input) GetWorkspaceId() *string { return v.WorkspaceId }

// GetFolderId returns __lookupMonitorV2Input.FolderId, and is useful for accessing the field via an interface.
func (v *__lookupMonitorV2Input) GetFolderId() *string { return v.FolderId }

// GetNameExact returns __lookupMonitorV2Input.NameExact, and is useful for accessing the field via an interface.
func (v *__lookupMonitorV2Input) GetNameExact() *string { return v.NameExact }

// GetNameSubstring returns __lookupMonitorV2Input.NameSubstring, and is useful for accessing the field via an interface.
func (v *__lookupMonitorV2Input) GetNameSubstring() *string { return v.NameSubstring }

// __lookupSnowflakeOutboundShareInput is used internally by genqlient
type __lookupSnowflakeOutboundShareInput struct {
	Name        string `json:"name"`
	WorkspaceId string `json:"workspaceId"`
}

// GetName returns __lookupSnowflakeOutboundShareInput.Name, and is useful for accessing the field via an interface.
func (v *__lookupSnowflakeOutboundShareInput) GetName() string { return v.Name }

// GetWorkspaceId returns __lookupSnowflakeOutboundShareInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__lookupSnowflakeOutboundShareInput) GetWorkspaceId() string { return v.WorkspaceId }

// __lookupWorkspaceInput is used internally by genqlient
type __lookupWorkspaceInput struct {
	Name string `json:"name"`
}

// GetName returns __lookupWorkspaceInput.Name, and is useful for accessing the field via an interface.
func (v *__lookupWorkspaceInput) GetName() string { return v.Name }

// __removeCorrelationTagInput is used internally by genqlient
type __removeCorrelationTagInput struct {
	DatasetId string         `json:"datasetId"`
	Path      LinkFieldInput `json:"path"`
	Tag       string         `json:"tag"`
}

// GetDatasetId returns __removeCorrelationTagInput.DatasetId, and is useful for accessing the field via an interface.
func (v *__removeCorrelationTagInput) GetDatasetId() string { return v.DatasetId }

// GetPath returns __removeCorrelationTagInput.Path, and is useful for accessing the field via an interface.
func (v *__removeCorrelationTagInput) GetPath() LinkFieldInput { return v.Path }

// GetTag returns __removeCorrelationTagInput.Tag, and is useful for accessing the field via an interface.
func (v *__removeCorrelationTagInput) GetTag() string { return v.Tag }

// __saveDashboardInput is used internally by genqlient
type __saveDashboardInput struct {
	DashboardInput DashboardInput `json:"dashboardInput"`
}

// GetDashboardInput returns __saveDashboardInput.DashboardInput, and is useful for accessing the field via an interface.
func (v *__saveDashboardInput) GetDashboardInput() DashboardInput { return v.DashboardInput }

// __saveDatasetInput is used internally by genqlient
type __saveDatasetInput struct {
	WorkspaceId string                   `json:"workspaceId"`
	Dataset     DatasetInput             `json:"dataset"`
	Query       MultiStageQueryInput     `json:"query"`
	Dep         *DependencyHandlingInput `json:"dep"`
}

// GetWorkspaceId returns __saveDatasetInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__saveDatasetInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetDataset returns __saveDatasetInput.Dataset, and is useful for accessing the field via an interface.
func (v *__saveDatasetInput) GetDataset() DatasetInput { return v.Dataset }

// GetQuery returns __saveDatasetInput.Query, and is useful for accessing the field via an interface.
func (v *__saveDatasetInput) GetQuery() MultiStageQueryInput { return v.Query }

// GetDep returns __saveDatasetInput.Dep, and is useful for accessing the field via an interface.
func (v *__saveDatasetInput) GetDep() *DependencyHandlingInput { return v.Dep }

// __saveMonitorV2RelationsInput is used internally by genqlient
type __saveMonitorV2RelationsInput struct {
	MonitorId       string                `json:"monitorId"`
	ActionRelations []ActionRelationInput `json:"actionRelations"`
}

// GetMonitorId returns __saveMonitorV2RelationsInput.MonitorId, and is useful for accessing the field via an interface.
func (v *__saveMonitorV2RelationsInput) GetMonitorId() string { return v.MonitorId }

// GetActionRelations returns __saveMonitorV2RelationsInput.ActionRelations, and is useful for accessing the field via an interface.
func (v *__saveMonitorV2RelationsInput) GetActionRelations() []ActionRelationInput {
	return v.ActionRelations
}

// __saveSourceDatasetInput is used internally by genqlient
type __saveSourceDatasetInput struct {
	WorkspaceId       string                     `json:"workspaceId"`
	DatasetDefinition DatasetDefinitionInput     `json:"datasetDefinition"`
	SourceTable       SourceTableDefinitionInput `json:"sourceTable"`
	Dep               *DependencyHandlingInput   `json:"dep"`
}

// GetWorkspaceId returns __saveSourceDatasetInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__saveSourceDatasetInput) GetWorkspaceId() string { return v.WorkspaceId }

// GetDatasetDefinition returns __saveSourceDatasetInput.DatasetDefinition, and is useful for accessing the field via an interface.
func (v *__saveSourceDatasetInput) GetDatasetDefinition() DatasetDefinitionInput {
	return v.DatasetDefinition
}

// GetSourceTable returns __saveSourceDatasetInput.SourceTable, and is useful for accessing the field via an interface.
func (v *__saveSourceDatasetInput) GetSourceTable() SourceTableDefinitionInput { return v.SourceTable }

// GetDep returns __saveSourceDatasetInput.Dep, and is useful for accessing the field via an interface.
func (v *__saveSourceDatasetInput) GetDep() *DependencyHandlingInput { return v.Dep }

// __saveWorksheetInput is used internally by genqlient
type __saveWorksheetInput struct {
	WorksheetInput WorksheetInput `json:"worksheetInput"`
}

// GetWorksheetInput returns __saveWorksheetInput.WorksheetInput, and is useful for accessing the field via an interface.
func (v *__saveWorksheetInput) GetWorksheetInput() WorksheetInput { return v.WorksheetInput }

// __searchMonitorActionsInput is used internally by genqlient
type __searchMonitorActionsInput struct {
	WorkspaceId *string `json:"workspaceId"`
	Name        *string `json:"name"`
}

// GetWorkspaceId returns __searchMonitorActionsInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__searchMonitorActionsInput) GetWorkspaceId() *string { return v.WorkspaceId }

// GetName returns __searchMonitorActionsInput.Name, and is useful for accessing the field via an interface.
func (v *__searchMonitorActionsInput) GetName() *string { return v.Name }

// __searchMonitorV2ActionInput is used internally by genqlient
type __searchMonitorV2ActionInput struct {
	WorkspaceId   *string `json:"workspaceId"`
	FolderId      *string `json:"folderId"`
	NameExact     *string `json:"nameExact"`
	NameSubstring *string `json:"nameSubstring"`
}

// GetWorkspaceId returns __searchMonitorV2ActionInput.WorkspaceId, and is useful for accessing the field via an interface.
func (v *__searchMonitorV2ActionInput) GetWorkspaceId() *string { return v.WorkspaceId }

// GetFolderId returns __searchMonitorV2ActionInput.FolderId, and is useful for accessing the field via an interface.
func (v *__searchMonitorV2ActionInput) GetFolderId() *string { return v.FolderId }

// GetNameExact returns __searchMonitorV2ActionInput.NameExact, and is useful for accessing the field via an interface.
func (v *__searchMonitorV2ActionInput) GetNameExact() *string { return v.NameExact }

// GetNameSubstring returns __searchMonitorV2ActionInput.NameSubstring, and is useful for accessing the field via an interface.
func (v *__searchMonitorV2ActionInput) GetNameSubstring() *string { return v.NameSubstring }

// __setChannelsForChannelActionInput is used internally by genqlient
type __setChannelsForChannelActionInput struct {
	ActionId   string   `json:"actionId"`
	ChannelIds []string `json:"channelIds"`
}

// GetActionId returns __setChannelsForChannelActionInput.ActionId, and is useful for accessing the field via an interface.
func (v *__setChannelsForChannelActionInput) GetActionId() string { return v.ActionId }

// GetChannelIds returns __setChannelsForChannelActionInput.ChannelIds, and is useful for accessing the field via an interface.
func (v *__setChannelsForChannelActionInput) GetChannelIds() []string { return v.ChannelIds }

// __setDefaultDashboardInput is used internally by genqlient
type __setDefaultDashboardInput struct {
	Dsid   string `json:"dsid"`
	Dashid string `json:"dashid"`
}

// GetDsid returns __setDefaultDashboardInput.Dsid, and is useful for accessing the field via an interface.
func (v *__setDefaultDashboardInput) GetDsid() string { return v.Dsid }

// GetDashid returns __setDefaultDashboardInput.Dashid, and is useful for accessing the field via an interface.
func (v *__setDefaultDashboardInput) GetDashid() string { return v.Dashid }

// __setMonitorsForChannelInput is used internally by genqlient
type __setMonitorsForChannelInput struct {
	ChannelId  string   `json:"channelId"`
	MonitorIds []string `json:"monitorIds"`
}

// GetChannelId returns __setMonitorsForChannelInput.ChannelId, and is useful for accessing the field via an interface.
func (v *__setMonitorsForChannelInput) GetChannelId() string { return v.ChannelId }

// GetMonitorIds returns __setMonitorsForChannelInput.MonitorIds, and is useful for accessing the field via an interface.
func (v *__setMonitorsForChannelInput) GetMonitorIds() []string { return v.MonitorIds }

// __setRbacDefaultGroupInput is used internally by genqlient
type __setRbacDefaultGroupInput struct {
	Id string `json:"id"`
}

// GetId returns __setRbacDefaultGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__setRbacDefaultGroupInput) GetId() string { return v.Id }

// __updateAppDataSourceInput is used internally by genqlient
type __updateAppDataSourceInput struct {
	Id     string             `json:"id"`
	Config AppDataSourceInput `json:"config"`
}

// GetId returns __updateAppDataSourceInput.Id, and is useful for accessing the field via an interface.
func (v *__updateAppDataSourceInput) GetId() string { return v.Id }

// GetConfig returns __updateAppDataSourceInput.Config, and is useful for accessing the field via an interface.
func (v *__updateAppDataSourceInput) GetConfig() AppDataSourceInput { return v.Config }

// __updateAppInput is used internally by genqlient
type __updateAppInput struct {
	Id     string   `json:"id"`
	Config AppInput `json:"config"`
}

// GetId returns __updateAppInput.Id, and is useful for accessing the field via an interface.
func (v *__updateAppInput) GetId() string { return v.Id }

// GetConfig returns __updateAppInput.Config, and is useful for accessing the field via an interface.
func (v *__updateAppInput) GetConfig() AppInput { return v.Config }

// __updateBoardInput is used internally by genqlient
type __updateBoardInput struct {
	Id    string     `json:"id"`
	Board BoardInput `json:"board"`
}

// GetId returns __updateBoardInput.Id, and is useful for accessing the field via an interface.
func (v *__updateBoardInput) GetId() string { return v.Id }

// GetBoard returns __updateBoardInput.Board, and is useful for accessing the field via an interface.
func (v *__updateBoardInput) GetBoard() BoardInput { return v.Board }

// __updateChannelActionInput is used internally by genqlient
type __updateChannelActionInput struct {
	Id     string      `json:"id"`
	Action ActionInput `json:"action"`
}

// GetId returns __updateChannelActionInput.Id, and is useful for accessing the field via an interface.
func (v *__updateChannelActionInput) GetId() string { return v.Id }

// GetAction returns __updateChannelActionInput.Action, and is useful for accessing the field via an interface.
func (v *__updateChannelActionInput) GetAction() ActionInput { return v.Action }

// __updateChannelInput is used internally by genqlient
type __updateChannelInput struct {
	Id      string       `json:"id"`
	Channel ChannelInput `json:"channel"`
}

// GetId returns __updateChannelInput.Id, and is useful for accessing the field via an interface.
func (v *__updateChannelInput) GetId() string { return v.Id }

// GetChannel returns __updateChannelInput.Channel, and is useful for accessing the field via an interface.
func (v *__updateChannelInput) GetChannel() ChannelInput { return v.Channel }

// __updateDashboardLinkInput is used internally by genqlient
type __updateDashboardLinkInput struct {
	Id    string             `json:"id"`
	Input DashboardLinkInput `json:"input"`
}

// GetId returns __updateDashboardLinkInput.Id, and is useful for accessing the field via an interface.
func (v *__updateDashboardLinkInput) GetId() string { return v.Id }

// GetInput returns __updateDashboardLinkInput.Input, and is useful for accessing the field via an interface.
func (v *__updateDashboardLinkInput) GetInput() DashboardLinkInput { return v.Input }

// __updateDatasetOutboundShareInput is used internally by genqlient
type __updateDatasetOutboundShareInput struct {
	Id    string                    `json:"id"`
	Input DatasetOutboundShareInput `json:"input"`
}

// GetId returns __updateDatasetOutboundShareInput.Id, and is useful for accessing the field via an interface.
func (v *__updateDatasetOutboundShareInput) GetId() string { return v.Id }

// GetInput returns __updateDatasetOutboundShareInput.Input, and is useful for accessing the field via an interface.
func (v *__updateDatasetOutboundShareInput) GetInput() DatasetOutboundShareInput { return v.Input }

// __updateDatastreamInput is used internally by genqlient
type __updateDatastreamInput struct {
	Id         string          `json:"id"`
	Datastream DatastreamInput `json:"datastream"`
}

// GetId returns __updateDatastreamInput.Id, and is useful for accessing the field via an interface.
func (v *__updateDatastreamInput) GetId() string { return v.Id }

// GetDatastream returns __updateDatastreamInput.Datastream, and is useful for accessing the field via an interface.
func (v *__updateDatastreamInput) GetDatastream() DatastreamInput { return v.Datastream }

// __updateDatastreamTokenInput is used internally by genqlient
type __updateDatastreamTokenInput struct {
	Id    string               `json:"id"`
	Token DatastreamTokenInput `json:"token"`
}

// GetId returns __updateDatastreamTokenInput.Id, and is useful for accessing the field via an interface.
func (v *__updateDatastreamTokenInput) GetId() string { return v.Id }

// GetToken returns __updateDatastreamTokenInput.Token, and is useful for accessing the field via an interface.
func (v *__updateDatastreamTokenInput) GetToken() DatastreamTokenInput { return v.Token }

// __updateDeferredForeignKeyInput is used internally by genqlient
type __updateDeferredForeignKeyInput struct {
	Id       string                  `json:"id"`
	KeyInput DeferredForeignKeyInput `json:"keyInput"`
}

// GetId returns __updateDeferredForeignKeyInput.Id, and is useful for accessing the field via an interface.
func (v *__updateDeferredForeignKeyInput) GetId() string { return v.Id }

// GetKeyInput returns __updateDeferredForeignKeyInput.KeyInput, and is useful for accessing the field via an interface.
func (v *__updateDeferredForeignKeyInput) GetKeyInput() DeferredForeignKeyInput { return v.KeyInput }

// __updateFiledropInput is used internally by genqlient
type __updateFiledropInput struct {
	Id    string        `json:"id"`
	Input FiledropInput `json:"input"`
}

// GetId returns __updateFiledropInput.Id, and is useful for accessing the field via an interface.
func (v *__updateFiledropInput) GetId() string { return v.Id }

// GetInput returns __updateFiledropInput.Input, and is useful for accessing the field via an interface.
func (v *__updateFiledropInput) GetInput() FiledropInput { return v.Input }

// __updateFolderInput is used internally by genqlient
type __updateFolderInput struct {
	Id     string      `json:"id"`
	Config FolderInput `json:"config"`
}

// GetId returns __updateFolderInput.Id, and is useful for accessing the field via an interface.
func (v *__updateFolderInput) GetId() string { return v.Id }

// GetConfig returns __updateFolderInput.Config, and is useful for accessing the field via an interface.
func (v *__updateFolderInput) GetConfig() FolderInput { return v.Config }

// __updateLayeredSettingRecordInput is used internally by genqlient
type __updateLayeredSettingRecordInput struct {
	SettingRecord LayeredSettingRecordInput `json:"settingRecord"`
}

// GetSettingRecord returns __updateLayeredSettingRecordInput.SettingRecord, and is useful for accessing the field via an interface.
func (v *__updateLayeredSettingRecordInput) GetSettingRecord() LayeredSettingRecordInput {
	return v.SettingRecord
}

// __updateMonitorActionAttachmentInput is used internally by genqlient
type __updateMonitorActionAttachmentInput struct {
	Id                      string                       `json:"id"`
	MonitorActionAttachment MonitorActionAttachmentInput `json:"monitorActionAttachment"`
}

// GetId returns __updateMonitorActionAttachmentInput.Id, and is useful for accessing the field via an interface.
func (v *__updateMonitorActionAttachmentInput) GetId() string { return v.Id }

// GetMonitorActionAttachment returns __updateMonitorActionAttachmentInput.MonitorActionAttachment, and is useful for accessing the field via an interface.
func (v *__updateMonitorActionAttachmentInput) GetMonitorActionAttachment() MonitorActionAttachmentInput {
	return v.MonitorActionAttachment
}

// __updateMonitorActionInput is used internally by genqlient
type __updateMonitorActionInput struct {
	Id            string             `json:"id"`
	MonitorAction MonitorActionInput `json:"monitorAction"`
}

// GetId returns __updateMonitorActionInput.Id, and is useful for accessing the field via an interface.
func (v *__updateMonitorActionInput) GetId() string { return v.Id }

// GetMonitorAction returns __updateMonitorActionInput.MonitorAction, and is useful for accessing the field via an interface.
func (v *__updateMonitorActionInput) GetMonitorAction() MonitorActionInput { return v.MonitorAction }

// __updateMonitorInput is used internally by genqlient
type __updateMonitorInput struct {
	Id      string       `json:"id"`
	Monitor MonitorInput `json:"monitor"`
}

// GetId returns __updateMonitorInput.Id, and is useful for accessing the field via an interface.
func (v *__updateMonitorInput) GetId() string { return v.Id }

// GetMonitor returns __updateMonitorInput.Monitor, and is useful for accessing the field via an interface.
func (v *__updateMonitorInput) GetMonitor() MonitorInput { return v.Monitor }

// __updateMonitorV2ActionInput is used internally by genqlient
type __updateMonitorV2ActionInput struct {
	Id    string               `json:"id"`
	Input MonitorV2ActionInput `json:"input"`
}

// GetId returns __updateMonitorV2ActionInput.Id, and is useful for accessing the field via an interface.
func (v *__updateMonitorV2ActionInput) GetId() string { return v.Id }

// GetInput returns __updateMonitorV2ActionInput.Input, and is useful for accessing the field via an interface.
func (v *__updateMonitorV2ActionInput) GetInput() MonitorV2ActionInput { return v.Input }

// __updateMonitorV2Input is used internally by genqlient
type __updateMonitorV2Input struct {
	Id    string         `json:"id"`
	Input MonitorV2Input `json:"input"`
}

// GetId returns __updateMonitorV2Input.Id, and is useful for accessing the field via an interface.
func (v *__updateMonitorV2Input) GetId() string { return v.Id }

// GetInput returns __updateMonitorV2Input.Input, and is useful for accessing the field via an interface.
func (v *__updateMonitorV2Input) GetInput() MonitorV2Input { return v.Input }

// __updatePollerInput is used internally by genqlient
type __updatePollerInput struct {
	Id     string      `json:"id"`
	Poller PollerInput `json:"poller"`
}

// GetId returns __updatePollerInput.Id, and is useful for accessing the field via an interface.
func (v *__updatePollerInput) GetId() string { return v.Id }

// GetPoller returns __updatePollerInput.Poller, and is useful for accessing the field via an interface.
func (v *__updatePollerInput) GetPoller() PollerInput { return v.Poller }

// __updatePreferredPathInput is used internally by genqlient
type __updatePreferredPathInput struct {
	Id     string             `json:"id"`
	Config PreferredPathInput `json:"config"`
}

// GetId returns __updatePreferredPathInput.Id, and is useful for accessing the field via an interface.
func (v *__updatePreferredPathInput) GetId() string { return v.Id }

// GetConfig returns __updatePreferredPathInput.Config, and is useful for accessing the field via an interface.
func (v *__updatePreferredPathInput) GetConfig() PreferredPathInput { return v.Config }

// __updateRbacGroupInput is used internally by genqlient
type __updateRbacGroupInput struct {
	Id     string         `json:"id"`
	Config RbacGroupInput `json:"config"`
}

// GetId returns __updateRbacGroupInput.Id, and is useful for accessing the field via an interface.
func (v *__updateRbacGroupInput) GetId() string { return v.Id }

// GetConfig returns __updateRbacGroupInput.Config, and is useful for accessing the field via an interface.
func (v *__updateRbacGroupInput) GetConfig() RbacGroupInput { return v.Config }

// __updateRbacGroupmemberInput is used internally by genqlient
type __updateRbacGroupmemberInput struct {
	Id     string               `json:"id"`
	Config RbacGroupmemberInput `json:"config"`
}

// GetId returns __updateRbacGroupmemberInput.Id, and is useful for accessing the field via an interface.
func (v *__updateRbacGroupmemberInput) GetId() string { return v.Id }

// GetConfig returns __updateRbacGroupmemberInput.Config, and is useful for accessing the field via an interface.
func (v *__updateRbacGroupmemberInput) GetConfig() RbacGroupmemberInput { return v.Config }

// __updateRbacStatementInput is used internally by genqlient
type __updateRbacStatementInput struct {
	Id     string             `json:"id"`
	Config RbacStatementInput `json:"config"`
}

// GetId returns __updateRbacStatementInput.Id, and is useful for accessing the field via an interface.
func (v *__updateRbacStatementInput) GetId() string { return v.Id }

// GetConfig returns __updateRbacStatementInput.Config, and is useful for accessing the field via an interface.
func (v *__updateRbacStatementInput) GetConfig() RbacStatementInput { return v.Config }

// __updateSnowflakeOutboundShareInput is used internally by genqlient
type __updateSnowflakeOutboundShareInput struct {
	Id    string                      `json:"id"`
	Input SnowflakeOutboundShareInput `json:"input"`
}

// GetId returns __updateSnowflakeOutboundShareInput.Id, and is useful for accessing the field via an interface.
func (v *__updateSnowflakeOutboundShareInput) GetId() string { return v.Id }

// GetInput returns __updateSnowflakeOutboundShareInput.Input, and is useful for accessing the field via an interface.
func (v *__updateSnowflakeOutboundShareInput) GetInput() SnowflakeOutboundShareInput { return v.Input }

// __updateWorkspaceInput is used internally by genqlient
type __updateWorkspaceInput struct {
	Id     string         `json:"id"`
	Config WorkspaceInput `json:"config"`
}

// GetId returns __updateWorkspaceInput.Id, and is useful for accessing the field via an interface.
func (v *__updateWorkspaceInput) GetId() string { return v.Id }

// GetConfig returns __updateWorkspaceInput.Config, and is useful for accessing the field via an interface.
func (v *__updateWorkspaceInput) GetConfig() WorkspaceInput { return v.Config }

// addCorrelationTagResponse is returned by addCorrelationTag on success.
type addCorrelationTagResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns addCorrelationTagResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *addCorrelationTagResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// clearDefaultDashboardResponse is returned by clearDefaultDashboard on success.
type clearDefaultDashboardResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns clearDefaultDashboardResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *clearDefaultDashboardResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// createAppDataSourceResponse is returned by createAppDataSource on success.
type createAppDataSourceResponse struct {
	Appdatasource AppDataSource `json:"appdatasource"`
}

// GetAppdatasource returns createAppDataSourceResponse.Appdatasource, and is useful for accessing the field via an interface.
func (v *createAppDataSourceResponse) GetAppdatasource() AppDataSource { return v.Appdatasource }

// createAppResponse is returned by createApp on success.
type createAppResponse struct {
	App App `json:"app"`
}

// GetApp returns createAppResponse.App, and is useful for accessing the field via an interface.
func (v *createAppResponse) GetApp() App { return v.App }

// createBoardResponse is returned by createBoard on success.
type createBoardResponse struct {
	Board Board `json:"board"`
}

// GetBoard returns createBoardResponse.Board, and is useful for accessing the field via an interface.
func (v *createBoardResponse) GetBoard() Board { return v.Board }

// createChannelActionResponse is returned by createChannelAction on success.
type createChannelActionResponse struct {
	ChannelAction *ChannelAction `json:"-"`
}

// GetChannelAction returns createChannelActionResponse.ChannelAction, and is useful for accessing the field via an interface.
func (v *createChannelActionResponse) GetChannelAction() *ChannelAction { return v.ChannelAction }

func (v *createChannelActionResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createChannelActionResponse
		ChannelAction json.RawMessage `json:"channelAction"`
		graphql.NoUnmarshalJSON
	}
	firstPass.createChannelActionResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ChannelAction
		src := firstPass.ChannelAction
		if len(src) != 0 && string(src) != "null" {
			*dst = new(ChannelAction)
			err = __unmarshalChannelAction(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal createChannelActionResponse.ChannelAction: %w", err)
			}
		}
	}
	return nil
}

type __premarshalcreateChannelActionResponse struct {
	ChannelAction json.RawMessage `json:"channelAction"`
}

func (v *createChannelActionResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createChannelActionResponse) __premarshalJSON() (*__premarshalcreateChannelActionResponse, error) {
	var retval __premarshalcreateChannelActionResponse

	{

		dst := &retval.ChannelAction
		src := v.ChannelAction
		if src != nil {
			var err error
			*dst, err = __marshalChannelAction(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal createChannelActionResponse.ChannelAction: %w", err)
			}
		}
	}
	return &retval, nil
}

// createChannelResponse is returned by createChannel on success.
type createChannelResponse struct {
	Channel *Channel `json:"channel"`
}

// GetChannel returns createChannelResponse.Channel, and is useful for accessing the field via an interface.
func (v *createChannelResponse) GetChannel() *Channel { return v.Channel }

// createDashboardLinkResponse is returned by createDashboardLink on success.
type createDashboardLinkResponse struct {
	// A dashboard link goes from one dashboard (and possibly card within that dashboard)
	// to another. The link must be in the same workspace as the dashboards it references.
	DashboardLink DashboardLink `json:"dashboardLink"`
}

// GetDashboardLink returns createDashboardLinkResponse.DashboardLink, and is useful for accessing the field via an interface.
func (v *createDashboardLinkResponse) GetDashboardLink() DashboardLink { return v.DashboardLink }

// createDatasetOutboundShareResponse is returned by createDatasetOutboundShare on success.
type createDatasetOutboundShareResponse struct {
	DatasetOutboundShare DatasetOutboundShare `json:"datasetOutboundShare"`
}

// GetDatasetOutboundShare returns createDatasetOutboundShareResponse.DatasetOutboundShare, and is useful for accessing the field via an interface.
func (v *createDatasetOutboundShareResponse) GetDatasetOutboundShare() DatasetOutboundShare {
	return v.DatasetOutboundShare
}

// createDatastreamResponse is returned by createDatastream on success.
type createDatastreamResponse struct {
	Datastream Datastream `json:"datastream"`
}

// GetDatastream returns createDatastreamResponse.Datastream, and is useful for accessing the field via an interface.
func (v *createDatastreamResponse) GetDatastream() Datastream { return v.Datastream }

// createDatastreamTokenResponse is returned by createDatastreamToken on success.
type createDatastreamTokenResponse struct {
	DatastreamToken DatastreamToken `json:"datastreamToken"`
}

// GetDatastreamToken returns createDatastreamTokenResponse.DatastreamToken, and is useful for accessing the field via an interface.
func (v *createDatastreamTokenResponse) GetDatastreamToken() DatastreamToken {
	return v.DatastreamToken
}

// createDeferredForeignKeyResponse is returned by createDeferredForeignKey on success.
type createDeferredForeignKeyResponse struct {
	DeferredForeignKey *DeferredForeignKey `json:"deferredForeignKey"`
}

// GetDeferredForeignKey returns createDeferredForeignKeyResponse.DeferredForeignKey, and is useful for accessing the field via an interface.
func (v *createDeferredForeignKeyResponse) GetDeferredForeignKey() *DeferredForeignKey {
	return v.DeferredForeignKey
}

// createFiledropResponse is returned by createFiledrop on success.
type createFiledropResponse struct {
	Filedrop *Filedrop `json:"filedrop"`
}

// GetFiledrop returns createFiledropResponse.Filedrop, and is useful for accessing the field via an interface.
func (v *createFiledropResponse) GetFiledrop() *Filedrop { return v.Filedrop }

// createFolderResponse is returned by createFolder on success.
type createFolderResponse struct {
	Folder Folder `json:"folder"`
}

// GetFolder returns createFolderResponse.Folder, and is useful for accessing the field via an interface.
func (v *createFolderResponse) GetFolder() Folder { return v.Folder }

// createLayeredSettingRecordResponse is returned by createLayeredSettingRecord on success.
type createLayeredSettingRecordResponse struct {
	LayeredSettingRecord LayeredSettingRecord `json:"layeredSettingRecord"`
}

// GetLayeredSettingRecord returns createLayeredSettingRecordResponse.LayeredSettingRecord, and is useful for accessing the field via an interface.
func (v *createLayeredSettingRecordResponse) GetLayeredSettingRecord() LayeredSettingRecord {
	return v.LayeredSettingRecord
}

// createMonitorActionAttachmentResponse is returned by createMonitorActionAttachment on success.
type createMonitorActionAttachmentResponse struct {
	MonitorActionAttachment *MonitorActionAttachment `json:"monitorActionAttachment"`
}

// GetMonitorActionAttachment returns createMonitorActionAttachmentResponse.MonitorActionAttachment, and is useful for accessing the field via an interface.
func (v *createMonitorActionAttachmentResponse) GetMonitorActionAttachment() *MonitorActionAttachment {
	return v.MonitorActionAttachment
}

// createMonitorActionResponse is returned by createMonitorAction on success.
type createMonitorActionResponse struct {
	MonitorAction *MonitorAction `json:"-"`
}

// GetMonitorAction returns createMonitorActionResponse.MonitorAction, and is useful for accessing the field via an interface.
func (v *createMonitorActionResponse) GetMonitorAction() *MonitorAction { return v.MonitorAction }

func (v *createMonitorActionResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createMonitorActionResponse
		MonitorAction json.RawMessage `json:"monitorAction"`
		graphql.NoUnmarshalJSON
	}
	firstPass.createMonitorActionResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.MonitorAction
		src := firstPass.MonitorAction
		if len(src) != 0 && string(src) != "null" {
			*dst = new(MonitorAction)
			err = __unmarshalMonitorAction(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal createMonitorActionResponse.MonitorAction: %w", err)
			}
		}
	}
	return nil
}

type __premarshalcreateMonitorActionResponse struct {
	MonitorAction json.RawMessage `json:"monitorAction"`
}

func (v *createMonitorActionResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createMonitorActionResponse) __premarshalJSON() (*__premarshalcreateMonitorActionResponse, error) {
	var retval __premarshalcreateMonitorActionResponse

	{

		dst := &retval.MonitorAction
		src := v.MonitorAction
		if src != nil {
			var err error
			*dst, err = __marshalMonitorAction(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal createMonitorActionResponse.MonitorAction: %w", err)
			}
		}
	}
	return &retval, nil
}

// createMonitorMonitorMonitorUpdateResult includes the requested fields of the GraphQL type MonitorUpdateResult.
type createMonitorMonitorMonitorUpdateResult struct {
	Monitor Monitor `json:"monitor"`
}

// GetMonitor returns createMonitorMonitorMonitorUpdateResult.Monitor, and is useful for accessing the field via an interface.
func (v *createMonitorMonitorMonitorUpdateResult) GetMonitor() Monitor { return v.Monitor }

// createMonitorResponse is returned by createMonitor on success.
type createMonitorResponse struct {
	Monitor *createMonitorMonitorMonitorUpdateResult `json:"monitor"`
}

// GetMonitor returns createMonitorResponse.Monitor, and is useful for accessing the field via an interface.
func (v *createMonitorResponse) GetMonitor() *createMonitorMonitorMonitorUpdateResult {
	return v.Monitor
}

// createMonitorV2ActionResponse is returned by createMonitorV2Action on success.
type createMonitorV2ActionResponse struct {
	MonitorV2Action MonitorV2Action `json:"monitorV2Action"`
}

// GetMonitorV2Action returns createMonitorV2ActionResponse.MonitorV2Action, and is useful for accessing the field via an interface.
func (v *createMonitorV2ActionResponse) GetMonitorV2Action() MonitorV2Action {
	return v.MonitorV2Action
}

// createMonitorV2Response is returned by createMonitorV2 on success.
type createMonitorV2Response struct {
	MonitorV2 MonitorV2 `json:"monitorV2"`
}

// GetMonitorV2 returns createMonitorV2Response.MonitorV2, and is useful for accessing the field via an interface.
func (v *createMonitorV2Response) GetMonitorV2() MonitorV2 { return v.MonitorV2 }

// createOrUpdateBookmarkGroupResponse is returned by createOrUpdateBookmarkGroup on success.
type createOrUpdateBookmarkGroupResponse struct {
	BookmarkGroup BookmarkGroup `json:"bookmarkGroup"`
}

// GetBookmarkGroup returns createOrUpdateBookmarkGroupResponse.BookmarkGroup, and is useful for accessing the field via an interface.
func (v *createOrUpdateBookmarkGroupResponse) GetBookmarkGroup() BookmarkGroup {
	return v.BookmarkGroup
}

// createOrUpdateBookmarkResponse is returned by createOrUpdateBookmark on success.
type createOrUpdateBookmarkResponse struct {
	Bookmark Bookmark `json:"bookmark"`
}

// GetBookmark returns createOrUpdateBookmarkResponse.Bookmark, and is useful for accessing the field via an interface.
func (v *createOrUpdateBookmarkResponse) GetBookmark() Bookmark { return v.Bookmark }

// createPollerResponse is returned by createPoller on success.
type createPollerResponse struct {
	Poller Poller `json:"poller"`
}

// GetPoller returns createPollerResponse.Poller, and is useful for accessing the field via an interface.
func (v *createPollerResponse) GetPoller() Poller { return v.Poller }

// createPreferredPathResponse is returned by createPreferredPath on success.
type createPreferredPathResponse struct {
	// Create a preferred path. The name must be unique in the containing folder.
	// When 'acceptInErrorState" is true, the API will accept a save/update for a
	// path, even if it means that the path will be left in error state, else
	// an error will be returned.
	PreferredPathWithStatus PreferredPathWithStatus `json:"preferredPathWithStatus"`
}

// GetPreferredPathWithStatus returns createPreferredPathResponse.PreferredPathWithStatus, and is useful for accessing the field via an interface.
func (v *createPreferredPathResponse) GetPreferredPathWithStatus() PreferredPathWithStatus {
	return v.PreferredPathWithStatus
}

// createRbacGroupResponse is returned by createRbacGroup on success.
type createRbacGroupResponse struct {
	RbacGroup RbacGroup `json:"rbacGroup"`
}

// GetRbacGroup returns createRbacGroupResponse.RbacGroup, and is useful for accessing the field via an interface.
func (v *createRbacGroupResponse) GetRbacGroup() RbacGroup { return v.RbacGroup }

// createRbacGroupmemberResponse is returned by createRbacGroupmember on success.
type createRbacGroupmemberResponse struct {
	RbacGroupmember RbacGroupmember `json:"rbacGroupmember"`
}

// GetRbacGroupmember returns createRbacGroupmemberResponse.RbacGroupmember, and is useful for accessing the field via an interface.
func (v *createRbacGroupmemberResponse) GetRbacGroupmember() RbacGroupmember {
	return v.RbacGroupmember
}

// createRbacStatementResponse is returned by createRbacStatement on success.
type createRbacStatementResponse struct {
	RbacStatement RbacStatement `json:"rbacStatement"`
}

// GetRbacStatement returns createRbacStatementResponse.RbacStatement, and is useful for accessing the field via an interface.
func (v *createRbacStatementResponse) GetRbacStatement() RbacStatement { return v.RbacStatement }

// createSnowflakeOutboundShareResponse is returned by createSnowflakeOutboundShare on success.
type createSnowflakeOutboundShareResponse struct {
	Share SnowflakeOutboundShare `json:"share"`
}

// GetShare returns createSnowflakeOutboundShareResponse.Share, and is useful for accessing the field via an interface.
func (v *createSnowflakeOutboundShareResponse) GetShare() SnowflakeOutboundShare { return v.Share }

// createWorkspaceResponse is returned by createWorkspace on success.
type createWorkspaceResponse struct {
	// When creating a workspace, all users for the customer will be granted
	// access to it through the ACL system. This is because we don't yet have
	// a UI to deal with selective access.
	Workspace *Workspace `json:"workspace"`
}

// GetWorkspace returns createWorkspaceResponse.Workspace, and is useful for accessing the field via an interface.
func (v *createWorkspaceResponse) GetWorkspace() *Workspace { return v.Workspace }

// deleteAppDataSourceResponse is returned by deleteAppDataSource on success.
type deleteAppDataSourceResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteAppDataSourceResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteAppDataSourceResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteAppResponse is returned by deleteApp on success.
type deleteAppResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteAppResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteAppResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteBoardResponse is returned by deleteBoard on success.
type deleteBoardResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteBoardResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteBoardResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteBookmarkGroupResponse is returned by deleteBookmarkGroup on success.
type deleteBookmarkGroupResponse struct {
	// Deleting a bookmark group will also delete the bookmarks. This is not undo-able;
	// we really wipe them from the database!
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteBookmarkGroupResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteBookmarkGroupResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteBookmarkResponse is returned by deleteBookmark on success.
type deleteBookmarkResponse struct {
	// Deleting a bookmark is not undoable; we really wipe it from the database!
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteBookmarkResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteBookmarkResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteChannelActionResponse is returned by deleteChannelAction on success.
type deleteChannelActionResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteChannelActionResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteChannelActionResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteChannelResponse is returned by deleteChannel on success.
type deleteChannelResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteChannelResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteChannelResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteDashboardLinkResponse is returned by deleteDashboardLink on success.
type deleteDashboardLinkResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteDashboardLinkResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteDashboardLinkResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteDashboardResponse is returned by deleteDashboard on success.
type deleteDashboardResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteDashboardResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteDashboardResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteDatasetOutboundShareResponse is returned by deleteDatasetOutboundShare on success.
type deleteDatasetOutboundShareResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteDatasetOutboundShareResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteDatasetOutboundShareResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteDatasetResponse is returned by deleteDataset on success.
type deleteDatasetResponse struct {
	ResultStatus *ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteDatasetResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteDatasetResponse) GetResultStatus() *ResultStatus { return v.ResultStatus }

// deleteDatastreamResponse is returned by deleteDatastream on success.
type deleteDatastreamResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteDatastreamResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteDatastreamResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteDatastreamTokenResponse is returned by deleteDatastreamToken on success.
type deleteDatastreamTokenResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteDatastreamTokenResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteDatastreamTokenResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteDeferredForeignKeyResponse is returned by deleteDeferredForeignKey on success.
type deleteDeferredForeignKeyResponse struct {
	ResultStatus *ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteDeferredForeignKeyResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteDeferredForeignKeyResponse) GetResultStatus() *ResultStatus { return v.ResultStatus }

// deleteFiledropResponse is returned by deleteFiledrop on success.
type deleteFiledropResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteFiledropResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteFiledropResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteFolderResponse is returned by deleteFolder on success.
type deleteFolderResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteFolderResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteFolderResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteLayeredSettingRecordDeleteLayeredSettingRecordDeletedLayeredSettingRecordsResult includes the requested fields of the GraphQL type DeletedLayeredSettingRecordsResult.
type deleteLayeredSettingRecordDeleteLayeredSettingRecordDeletedLayeredSettingRecordsResult struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteLayeredSettingRecordDeleteLayeredSettingRecordDeletedLayeredSettingRecordsResult.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteLayeredSettingRecordDeleteLayeredSettingRecordDeletedLayeredSettingRecordsResult) GetResultStatus() ResultStatus {
	return v.ResultStatus
}

// deleteLayeredSettingRecordResponse is returned by deleteLayeredSettingRecord on success.
type deleteLayeredSettingRecordResponse struct {
	DeleteLayeredSettingRecord deleteLayeredSettingRecordDeleteLayeredSettingRecordDeletedLayeredSettingRecordsResult `json:"deleteLayeredSettingRecord"`
}

// GetDeleteLayeredSettingRecord returns deleteLayeredSettingRecordResponse.DeleteLayeredSettingRecord, and is useful for accessing the field via an interface.
func (v *deleteLayeredSettingRecordResponse) GetDeleteLayeredSettingRecord() deleteLayeredSettingRecordDeleteLayeredSettingRecordDeletedLayeredSettingRecordsResult {
	return v.DeleteLayeredSettingRecord
}

// deleteMonitorActionAttachmentResponse is returned by deleteMonitorActionAttachment on success.
type deleteMonitorActionAttachmentResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteMonitorActionAttachmentResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteMonitorActionAttachmentResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteMonitorActionResponse is returned by deleteMonitorAction on success.
type deleteMonitorActionResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteMonitorActionResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteMonitorActionResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteMonitorResponse is returned by deleteMonitor on success.
type deleteMonitorResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteMonitorResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteMonitorResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteMonitorV2ActionResponse is returned by deleteMonitorV2Action on success.
type deleteMonitorV2ActionResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteMonitorV2ActionResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteMonitorV2ActionResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteMonitorV2Response is returned by deleteMonitorV2 on success.
type deleteMonitorV2Response struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteMonitorV2Response.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteMonitorV2Response) GetResultStatus() ResultStatus { return v.ResultStatus }

// deletePollerResponse is returned by deletePoller on success.
type deletePollerResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deletePollerResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deletePollerResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deletePreferredPathResponse is returned by deletePreferredPath on success.
type deletePreferredPathResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deletePreferredPathResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deletePreferredPathResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteRbacGroupResponse is returned by deleteRbacGroup on success.
type deleteRbacGroupResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteRbacGroupResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteRbacGroupResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteRbacGroupmemberResponse is returned by deleteRbacGroupmember on success.
type deleteRbacGroupmemberResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteRbacGroupmemberResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteRbacGroupmemberResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteRbacStatementResponse is returned by deleteRbacStatement on success.
type deleteRbacStatementResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteRbacStatementResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteRbacStatementResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteSnowflakeOutboundShareResponse is returned by deleteSnowflakeOutboundShare on success.
type deleteSnowflakeOutboundShareResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteSnowflakeOutboundShareResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteSnowflakeOutboundShareResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// deleteWorksheetResponse is returned by deleteWorksheet on success.
type deleteWorksheetResponse struct {
	ResultStatus *ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteWorksheetResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteWorksheetResponse) GetResultStatus() *ResultStatus { return v.ResultStatus }

// deleteWorkspaceResponse is returned by deleteWorkspace on success.
type deleteWorkspaceResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns deleteWorkspaceResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *deleteWorkspaceResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// getAppDataSourceResponse is returned by getAppDataSource on success.
type getAppDataSourceResponse struct {
	Appdatasource AppDataSource `json:"appdatasource"`
}

// GetAppdatasource returns getAppDataSourceResponse.Appdatasource, and is useful for accessing the field via an interface.
func (v *getAppDataSourceResponse) GetAppdatasource() AppDataSource { return v.Appdatasource }

// getAppResponse is returned by getApp on success.
type getAppResponse struct {
	App App `json:"app"`
}

// GetApp returns getAppResponse.App, and is useful for accessing the field via an interface.
func (v *getAppResponse) GetApp() App { return v.App }

// getBoardResponse is returned by getBoard on success.
type getBoardResponse struct {
	Board Board `json:"board"`
}

// GetBoard returns getBoardResponse.Board, and is useful for accessing the field via an interface.
func (v *getBoardResponse) GetBoard() Board { return v.Board }

// getBookmarkGroupResponse is returned by getBookmarkGroup on success.
type getBookmarkGroupResponse struct {
	BookmarkGroup BookmarkGroup `json:"bookmarkGroup"`
}

// GetBookmarkGroup returns getBookmarkGroupResponse.BookmarkGroup, and is useful for accessing the field via an interface.
func (v *getBookmarkGroupResponse) GetBookmarkGroup() BookmarkGroup { return v.BookmarkGroup }

// getBookmarkResponse is returned by getBookmark on success.
type getBookmarkResponse struct {
	Bookmark Bookmark `json:"bookmark"`
}

// GetBookmark returns getBookmarkResponse.Bookmark, and is useful for accessing the field via an interface.
func (v *getBookmarkResponse) GetBookmark() Bookmark { return v.Bookmark }

// getChannelActionResponse is returned by getChannelAction on success.
type getChannelActionResponse struct {
	ChannelAction *ChannelAction `json:"-"`
}

// GetChannelAction returns getChannelActionResponse.ChannelAction, and is useful for accessing the field via an interface.
func (v *getChannelActionResponse) GetChannelAction() *ChannelAction { return v.ChannelAction }

func (v *getChannelActionResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getChannelActionResponse
		ChannelAction json.RawMessage `json:"channelAction"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getChannelActionResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ChannelAction
		src := firstPass.ChannelAction
		if len(src) != 0 && string(src) != "null" {
			*dst = new(ChannelAction)
			err = __unmarshalChannelAction(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getChannelActionResponse.ChannelAction: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetChannelActionResponse struct {
	ChannelAction json.RawMessage `json:"channelAction"`
}

func (v *getChannelActionResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getChannelActionResponse) __premarshalJSON() (*__premarshalgetChannelActionResponse, error) {
	var retval __premarshalgetChannelActionResponse

	{

		dst := &retval.ChannelAction
		src := v.ChannelAction
		if src != nil {
			var err error
			*dst, err = __marshalChannelAction(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal getChannelActionResponse.ChannelAction: %w", err)
			}
		}
	}
	return &retval, nil
}

// getChannelResponse is returned by getChannel on success.
type getChannelResponse struct {
	Channel *Channel `json:"channel"`
}

// GetChannel returns getChannelResponse.Channel, and is useful for accessing the field via an interface.
func (v *getChannelResponse) GetChannel() *Channel { return v.Channel }

// getCloudInfoCloudCustomer includes the requested fields of the GraphQL type Customer.
type getCloudInfoCloudCustomer struct {
	CloudInfo CloudInfo `json:"cloudInfo"`
}

// GetCloudInfo returns getCloudInfoCloudCustomer.CloudInfo, and is useful for accessing the field via an interface.
func (v *getCloudInfoCloudCustomer) GetCloudInfo() CloudInfo { return v.CloudInfo }

// getCloudInfoResponse is returned by getCloudInfo on success.
type getCloudInfoResponse struct {
	Cloud *getCloudInfoCloudCustomer `json:"cloud"`
}

// GetCloud returns getCloudInfoResponse.Cloud, and is useful for accessing the field via an interface.
func (v *getCloudInfoResponse) GetCloud() *getCloudInfoCloudCustomer { return v.Cloud }

// getCurrentCustomerCustomer includes the requested fields of the GraphQL type Customer.
type getCurrentCustomerCustomer struct {
	Users []User `json:"users"`
}

// GetUsers returns getCurrentCustomerCustomer.Users, and is useful for accessing the field via an interface.
func (v *getCurrentCustomerCustomer) GetUsers() []User { return v.Users }

// getCurrentCustomerResponse is returned by getCurrentCustomer on success.
type getCurrentCustomerResponse struct {
	Customer *getCurrentCustomerCustomer `json:"customer"`
}

// GetCustomer returns getCurrentCustomerResponse.Customer, and is useful for accessing the field via an interface.
func (v *getCurrentCustomerResponse) GetCustomer() *getCurrentCustomerCustomer { return v.Customer }

// getDashboardLinkResponse is returned by getDashboardLink on success.
type getDashboardLinkResponse struct {
	DashboardLink DashboardLink `json:"dashboardLink"`
}

// GetDashboardLink returns getDashboardLinkResponse.DashboardLink, and is useful for accessing the field via an interface.
func (v *getDashboardLinkResponse) GetDashboardLink() DashboardLink { return v.DashboardLink }

// getDashboardResponse is returned by getDashboard on success.
type getDashboardResponse struct {
	Dashboard Dashboard `json:"dashboard"`
}

// GetDashboard returns getDashboardResponse.Dashboard, and is useful for accessing the field via an interface.
func (v *getDashboardResponse) GetDashboard() Dashboard { return v.Dashboard }

// getDatasetCorrelationTagsCorrelationTagsDataset includes the requested fields of the GraphQL type Dataset.
type getDatasetCorrelationTagsCorrelationTagsDataset struct {
	CorrelationTagMappings []getDatasetCorrelationTagsCorrelationTagsDatasetCorrelationTagMappingsCorrelationTagMapping `json:"correlationTagMappings"`
}

// GetCorrelationTagMappings returns getDatasetCorrelationTagsCorrelationTagsDataset.CorrelationTagMappings, and is useful for accessing the field via an interface.
func (v *getDatasetCorrelationTagsCorrelationTagsDataset) GetCorrelationTagMappings() []getDatasetCorrelationTagsCorrelationTagsDatasetCorrelationTagMappingsCorrelationTagMapping {
	return v.CorrelationTagMappings
}

// getDatasetCorrelationTagsCorrelationTagsDatasetCorrelationTagMappingsCorrelationTagMapping includes the requested fields of the GraphQL type CorrelationTagMapping.
type getDatasetCorrelationTagsCorrelationTagsDatasetCorrelationTagMappingsCorrelationTagMapping struct {
	Tag  string                                                                                                  `json:"tag"`
	Path getDatasetCorrelationTagsCorrelationTagsDatasetCorrelationTagMappingsCorrelationTagMappingPathLinkField `json:"path"`
}

// GetTag returns getDatasetCorrelationTagsCorrelationTagsDatasetCorrelationTagMappingsCorrelationTagMapping.Tag, and is useful for accessing the field via an interface.
func (v *getDatasetCorrelationTagsCorrelationTagsDatasetCorrelationTagMappingsCorrelationTagMapping) GetTag() string {
	return v.Tag
}

// GetPath returns getDatasetCorrelationTagsCorrelationTagsDatasetCorrelationTagMappingsCorrelationTagMapping.Path, and is useful for accessing the field via an interface.
func (v *getDatasetCorrelationTagsCorrelationTagsDatasetCorrelationTagMappingsCorrelationTagMapping) GetPath() getDatasetCorrelationTagsCorrelationTagsDatasetCorrelationTagMappingsCorrelationTagMappingPathLinkField {
	return v.Path
}

// getDatasetCorrelationTagsCorrelationTagsDatasetCorrelationTagMappingsCorrelationTagMappingPathLinkField includes the requested fields of the GraphQL type LinkField.
type getDatasetCorrelationTagsCorrelationTagsDatasetCorrelationTagMappingsCorrelationTagMappingPathLinkField struct {
	Column string  `json:"column"`
	Path   *string `json:"path"`
}

// GetColumn returns getDatasetCorrelationTagsCorrelationTagsDatasetCorrelationTagMappingsCorrelationTagMappingPathLinkField.Column, and is useful for accessing the field via an interface.
func (v *getDatasetCorrelationTagsCorrelationTagsDatasetCorrelationTagMappingsCorrelationTagMappingPathLinkField) GetColumn() string {
	return v.Column
}

// GetPath returns getDatasetCorrelationTagsCorrelationTagsDatasetCorrelationTagMappingsCorrelationTagMappingPathLinkField.Path, and is useful for accessing the field via an interface.
func (v *getDatasetCorrelationTagsCorrelationTagsDatasetCorrelationTagMappingsCorrelationTagMappingPathLinkField) GetPath() *string {
	return v.Path
}

// getDatasetCorrelationTagsResponse is returned by getDatasetCorrelationTags on success.
type getDatasetCorrelationTagsResponse struct {
	CorrelationTags *getDatasetCorrelationTagsCorrelationTagsDataset `json:"correlationTags"`
}

// GetCorrelationTags returns getDatasetCorrelationTagsResponse.CorrelationTags, and is useful for accessing the field via an interface.
func (v *getDatasetCorrelationTagsResponse) GetCorrelationTags() *getDatasetCorrelationTagsCorrelationTagsDataset {
	return v.CorrelationTags
}

// getDatasetOutboundShareResponse is returned by getDatasetOutboundShare on success.
type getDatasetOutboundShareResponse struct {
	DatasetOutboundShare DatasetOutboundShare `json:"datasetOutboundShare"`
}

// GetDatasetOutboundShare returns getDatasetOutboundShareResponse.DatasetOutboundShare, and is useful for accessing the field via an interface.
func (v *getDatasetOutboundShareResponse) GetDatasetOutboundShare() DatasetOutboundShare {
	return v.DatasetOutboundShare
}

// getDatasetQueryOutputResponse is returned by getDatasetQueryOutput on success.
type getDatasetQueryOutputResponse struct {
	// Given some datasets and pipeline expressions, run the query and extract the
	// query results.  Errors in input specification come back as GQL/HTTP errors,
	// but syntax errors in the parsed query come back in the parsedPipeline result
	// set for each query.
	//
	// Times out after 2 minutes.
	TaskResult []*TaskResult `json:"taskResult"`
}

// GetTaskResult returns getDatasetQueryOutputResponse.TaskResult, and is useful for accessing the field via an interface.
func (v *getDatasetQueryOutputResponse) GetTaskResult() []*TaskResult { return v.TaskResult }

// getDatasetResponse is returned by getDataset on success.
type getDatasetResponse struct {
	Dataset *Dataset `json:"dataset"`
}

// GetDataset returns getDatasetResponse.Dataset, and is useful for accessing the field via an interface.
func (v *getDatasetResponse) GetDataset() *Dataset { return v.Dataset }

// getDatastreamResponse is returned by getDatastream on success.
type getDatastreamResponse struct {
	Datastream Datastream `json:"datastream"`
}

// GetDatastream returns getDatastreamResponse.Datastream, and is useful for accessing the field via an interface.
func (v *getDatastreamResponse) GetDatastream() Datastream { return v.Datastream }

// getDatastreamTokenResponse is returned by getDatastreamToken on success.
type getDatastreamTokenResponse struct {
	DatastreamToken DatastreamToken `json:"datastreamToken"`
}

// GetDatastreamToken returns getDatastreamTokenResponse.DatastreamToken, and is useful for accessing the field via an interface.
func (v *getDatastreamTokenResponse) GetDatastreamToken() DatastreamToken { return v.DatastreamToken }

// getDefaultDashboardResponse is returned by getDefaultDashboard on success.
type getDefaultDashboardResponse struct {
	// Default dashboard ID for a given dataset ID. May be null.
	DefaultDashboard *string `json:"defaultDashboard"`
}

// GetDefaultDashboard returns getDefaultDashboardResponse.DefaultDashboard, and is useful for accessing the field via an interface.
func (v *getDefaultDashboardResponse) GetDefaultDashboard() *string { return v.DefaultDashboard }

// getDeferredForeignKeyResponse is returned by getDeferredForeignKey on success.
type getDeferredForeignKeyResponse struct {
	DeferredForeignKey *DeferredForeignKey `json:"deferredForeignKey"`
}

// GetDeferredForeignKey returns getDeferredForeignKeyResponse.DeferredForeignKey, and is useful for accessing the field via an interface.
func (v *getDeferredForeignKeyResponse) GetDeferredForeignKey() *DeferredForeignKey {
	return v.DeferredForeignKey
}

// getFiledropResponse is returned by getFiledrop on success.
type getFiledropResponse struct {
	Filedrop *Filedrop `json:"filedrop"`
}

// GetFiledrop returns getFiledropResponse.Filedrop, and is useful for accessing the field via an interface.
func (v *getFiledropResponse) GetFiledrop() *Filedrop { return v.Filedrop }

// getFolderResponse is returned by getFolder on success.
type getFolderResponse struct {
	Folder Folder `json:"folder"`
}

// GetFolder returns getFolderResponse.Folder, and is useful for accessing the field via an interface.
func (v *getFolderResponse) GetFolder() Folder { return v.Folder }

// getIngestInfoIngestCustomer includes the requested fields of the GraphQL type Customer.
type getIngestInfoIngestCustomer struct {
	IngestInfo IngestInfo `json:"ingestInfo"`
}

// GetIngestInfo returns getIngestInfoIngestCustomer.IngestInfo, and is useful for accessing the field via an interface.
func (v *getIngestInfoIngestCustomer) GetIngestInfo() IngestInfo { return v.IngestInfo }

// getIngestInfoResponse is returned by getIngestInfo on success.
type getIngestInfoResponse struct {
	Ingest *getIngestInfoIngestCustomer `json:"ingest"`
}

// GetIngest returns getIngestInfoResponse.Ingest, and is useful for accessing the field via an interface.
func (v *getIngestInfoResponse) GetIngest() *getIngestInfoIngestCustomer { return v.Ingest }

// getLayeredSettingRecordResponse is returned by getLayeredSettingRecord on success.
type getLayeredSettingRecordResponse struct {
	LayeredSettingRecord LayeredSettingRecord `json:"layeredSettingRecord"`
}

// GetLayeredSettingRecord returns getLayeredSettingRecordResponse.LayeredSettingRecord, and is useful for accessing the field via an interface.
func (v *getLayeredSettingRecordResponse) GetLayeredSettingRecord() LayeredSettingRecord {
	return v.LayeredSettingRecord
}

// getMonitorActionAttachmentResponse is returned by getMonitorActionAttachment on success.
type getMonitorActionAttachmentResponse struct {
	MonitorActionAttachment *MonitorActionAttachment `json:"monitorActionAttachment"`
}

// GetMonitorActionAttachment returns getMonitorActionAttachmentResponse.MonitorActionAttachment, and is useful for accessing the field via an interface.
func (v *getMonitorActionAttachmentResponse) GetMonitorActionAttachment() *MonitorActionAttachment {
	return v.MonitorActionAttachment
}

// getMonitorActionResponse is returned by getMonitorAction on success.
type getMonitorActionResponse struct {
	MonitorAction *MonitorAction `json:"-"`
}

// GetMonitorAction returns getMonitorActionResponse.MonitorAction, and is useful for accessing the field via an interface.
func (v *getMonitorActionResponse) GetMonitorAction() *MonitorAction { return v.MonitorAction }

func (v *getMonitorActionResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getMonitorActionResponse
		MonitorAction json.RawMessage `json:"monitorAction"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getMonitorActionResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.MonitorAction
		src := firstPass.MonitorAction
		if len(src) != 0 && string(src) != "null" {
			*dst = new(MonitorAction)
			err = __unmarshalMonitorAction(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getMonitorActionResponse.MonitorAction: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetMonitorActionResponse struct {
	MonitorAction json.RawMessage `json:"monitorAction"`
}

func (v *getMonitorActionResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getMonitorActionResponse) __premarshalJSON() (*__premarshalgetMonitorActionResponse, error) {
	var retval __premarshalgetMonitorActionResponse

	{

		dst := &retval.MonitorAction
		src := v.MonitorAction
		if src != nil {
			var err error
			*dst, err = __marshalMonitorAction(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal getMonitorActionResponse.MonitorAction: %w", err)
			}
		}
	}
	return &retval, nil
}

// getMonitorResponse is returned by getMonitor on success.
type getMonitorResponse struct {
	Monitor Monitor `json:"monitor"`
}

// GetMonitor returns getMonitorResponse.Monitor, and is useful for accessing the field via an interface.
func (v *getMonitorResponse) GetMonitor() Monitor { return v.Monitor }

// getMonitorV2ActionResponse is returned by getMonitorV2Action on success.
type getMonitorV2ActionResponse struct {
	MonitorV2Action MonitorV2Action `json:"monitorV2Action"`
}

// GetMonitorV2Action returns getMonitorV2ActionResponse.MonitorV2Action, and is useful for accessing the field via an interface.
func (v *getMonitorV2ActionResponse) GetMonitorV2Action() MonitorV2Action { return v.MonitorV2Action }

// getMonitorV2Response is returned by getMonitorV2 on success.
type getMonitorV2Response struct {
	MonitorV2 MonitorV2 `json:"monitorV2"`
}

// GetMonitorV2 returns getMonitorV2Response.MonitorV2, and is useful for accessing the field via an interface.
func (v *getMonitorV2Response) GetMonitorV2() MonitorV2 { return v.MonitorV2 }

// getPollerResponse is returned by getPoller on success.
type getPollerResponse struct {
	Poller Poller `json:"poller"`
}

// GetPoller returns getPollerResponse.Poller, and is useful for accessing the field via an interface.
func (v *getPollerResponse) GetPoller() Poller { return v.Poller }

// getPreferredPathResponse is returned by getPreferredPath on success.
type getPreferredPathResponse struct {
	PreferredPathWithStatus PreferredPathWithStatus `json:"preferredPathWithStatus"`
}

// GetPreferredPathWithStatus returns getPreferredPathResponse.PreferredPathWithStatus, and is useful for accessing the field via an interface.
func (v *getPreferredPathResponse) GetPreferredPathWithStatus() PreferredPathWithStatus {
	return v.PreferredPathWithStatus
}

// getRbacDefaultGroupResponse is returned by getRbacDefaultGroup on success.
type getRbacDefaultGroupResponse struct {
	// Get the group users will be assigned to by default
	RbacDefaultGroup RbacGroup `json:"rbacDefaultGroup"`
}

// GetRbacDefaultGroup returns getRbacDefaultGroupResponse.RbacDefaultGroup, and is useful for accessing the field via an interface.
func (v *getRbacDefaultGroupResponse) GetRbacDefaultGroup() RbacGroup { return v.RbacDefaultGroup }

// getRbacGroupResponse is returned by getRbacGroup on success.
type getRbacGroupResponse struct {
	// Read an individual group
	RbacGroup RbacGroup `json:"rbacGroup"`
}

// GetRbacGroup returns getRbacGroupResponse.RbacGroup, and is useful for accessing the field via an interface.
func (v *getRbacGroupResponse) GetRbacGroup() RbacGroup { return v.RbacGroup }

// getRbacGroupmemberResponse is returned by getRbacGroupmember on success.
type getRbacGroupmemberResponse struct {
	// Read an individual group member
	RbacGroupmember RbacGroupmember `json:"rbacGroupmember"`
}

// GetRbacGroupmember returns getRbacGroupmemberResponse.RbacGroupmember, and is useful for accessing the field via an interface.
func (v *getRbacGroupmemberResponse) GetRbacGroupmember() RbacGroupmember { return v.RbacGroupmember }

// getRbacGroupsResponse is returned by getRbacGroups on success.
type getRbacGroupsResponse struct {
	// All groups defined.
	RbacGroups []RbacGroup `json:"rbacGroups"`
}

// GetRbacGroups returns getRbacGroupsResponse.RbacGroups, and is useful for accessing the field via an interface.
func (v *getRbacGroupsResponse) GetRbacGroups() []RbacGroup { return v.RbacGroups }

// getRbacStatementResponse is returned by getRbacStatement on success.
type getRbacStatementResponse struct {
	// Read an individual statement
	RbacStatement RbacStatement `json:"rbacStatement"`
}

// GetRbacStatement returns getRbacStatementResponse.RbacStatement, and is useful for accessing the field via an interface.
func (v *getRbacStatementResponse) GetRbacStatement() RbacStatement { return v.RbacStatement }

// getSnowflakeOutboundShareResponse is returned by getSnowflakeOutboundShare on success.
type getSnowflakeOutboundShareResponse struct {
	Share SnowflakeOutboundShare `json:"share"`
}

// GetShare returns getSnowflakeOutboundShareResponse.Share, and is useful for accessing the field via an interface.
func (v *getSnowflakeOutboundShareResponse) GetShare() SnowflakeOutboundShare { return v.Share }

// getTerraformResponse is returned by getTerraform on success.
type getTerraformResponse struct {
	Terraform TerraformDefinition `json:"terraform"`
}

// GetTerraform returns getTerraformResponse.Terraform, and is useful for accessing the field via an interface.
func (v *getTerraformResponse) GetTerraform() TerraformDefinition { return v.Terraform }

// getUserResponse is returned by getUser on success.
type getUserResponse struct {
	User *User `json:"user"`
}

// GetUser returns getUserResponse.User, and is useful for accessing the field via an interface.
func (v *getUserResponse) GetUser() *User { return v.User }

// getWorksheetResponse is returned by getWorksheet on success.
type getWorksheetResponse struct {
	Worksheet *Worksheet `json:"worksheet"`
}

// GetWorksheet returns getWorksheetResponse.Worksheet, and is useful for accessing the field via an interface.
func (v *getWorksheetResponse) GetWorksheet() *Worksheet { return v.Worksheet }

// getWorkspaceResponse is returned by getWorkspace on success.
type getWorkspaceResponse struct {
	Workspace *Workspace `json:"workspace"`
}

// GetWorkspace returns getWorkspaceResponse.Workspace, and is useful for accessing the field via an interface.
func (v *getWorkspaceResponse) GetWorkspace() *Workspace { return v.Workspace }

// listDatasetsDatasetsProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// Project and Workspace are the same thing We call it Workspace in the UI
// design now, so at some point, maybe update the API to match the updated
// design?
type listDatasetsDatasetsProject struct {
	Datasets []Dataset `json:"datasets"`
}

// GetDatasets returns listDatasetsDatasetsProject.Datasets, and is useful for accessing the field via an interface.
func (v *listDatasetsDatasetsProject) GetDatasets() []Dataset { return v.Datasets }

// listDatasetsIdNameOnlyDatasetsDatasetMatch includes the requested fields of the GraphQL type DatasetMatch.
type listDatasetsIdNameOnlyDatasetsDatasetMatch struct {
	Dataset DatasetIdName `json:"dataset"`
}

// GetDataset returns listDatasetsIdNameOnlyDatasetsDatasetMatch.Dataset, and is useful for accessing the field via an interface.
func (v *listDatasetsIdNameOnlyDatasetsDatasetMatch) GetDataset() DatasetIdName { return v.Dataset }

// listDatasetsIdNameOnlyResponse is returned by listDatasetsIdNameOnly on success.
type listDatasetsIdNameOnlyResponse struct {
	// searchMode defaults to InclusiveMode, which means "any matches, counts" sorted by better-scoring.
	// If you pass in ExclusiveMode, then you get "must match each thing" behavior, which may end up
	// returning no datasets at all quite easily.
	Datasets []listDatasetsIdNameOnlyDatasetsDatasetMatch `json:"datasets"`
}

// GetDatasets returns listDatasetsIdNameOnlyResponse.Datasets, and is useful for accessing the field via an interface.
func (v *listDatasetsIdNameOnlyResponse) GetDatasets() []listDatasetsIdNameOnlyDatasetsDatasetMatch {
	return v.Datasets
}

// listDatasetsResponse is returned by listDatasets on success.
type listDatasetsResponse struct {
	Datasets []listDatasetsDatasetsProject `json:"datasets"`
}

// GetDatasets returns listDatasetsResponse.Datasets, and is useful for accessing the field via an interface.
func (v *listDatasetsResponse) GetDatasets() []listDatasetsDatasetsProject { return v.Datasets }

// listUsersResponse is returned by listUsers on success.
type listUsersResponse struct {
	Users *listUsersUsersCustomer `json:"users"`
}

// GetUsers returns listUsersResponse.Users, and is useful for accessing the field via an interface.
func (v *listUsersResponse) GetUsers() *listUsersUsersCustomer { return v.Users }

// listUsersUsersCustomer includes the requested fields of the GraphQL type Customer.
type listUsersUsersCustomer struct {
	Users []User `json:"users"`
}

// GetUsers returns listUsersUsersCustomer.Users, and is useful for accessing the field via an interface.
func (v *listUsersUsersCustomer) GetUsers() []User { return v.Users }

// listWorksheetsIdLabelOnlyResponse is returned by listWorksheetsIdLabelOnly on success.
type listWorksheetsIdLabelOnlyResponse struct {
	WorksheetSearch listWorksheetsIdLabelOnlyWorksheetSearchWorksheetSearchResultWrapper `json:"worksheetSearch"`
}

// GetWorksheetSearch returns listWorksheetsIdLabelOnlyResponse.WorksheetSearch, and is useful for accessing the field via an interface.
func (v *listWorksheetsIdLabelOnlyResponse) GetWorksheetSearch() listWorksheetsIdLabelOnlyWorksheetSearchWorksheetSearchResultWrapper {
	return v.WorksheetSearch
}

// listWorksheetsIdLabelOnlyWorksheetSearchWorksheetSearchResultWrapper includes the requested fields of the GraphQL type WorksheetSearchResultWrapper.
type listWorksheetsIdLabelOnlyWorksheetSearchWorksheetSearchResultWrapper struct {
	Worksheets []listWorksheetsIdLabelOnlyWorksheetSearchWorksheetSearchResultWrapperWorksheetsWorksheetSearchResult `json:"worksheets"`
}

// GetWorksheets returns listWorksheetsIdLabelOnlyWorksheetSearchWorksheetSearchResultWrapper.Worksheets, and is useful for accessing the field via an interface.
func (v *listWorksheetsIdLabelOnlyWorksheetSearchWorksheetSearchResultWrapper) GetWorksheets() []listWorksheetsIdLabelOnlyWorksheetSearchWorksheetSearchResultWrapperWorksheetsWorksheetSearchResult {
	return v.Worksheets
}

// listWorksheetsIdLabelOnlyWorksheetSearchWorksheetSearchResultWrapperWorksheetsWorksheetSearchResult includes the requested fields of the GraphQL type WorksheetSearchResult.
type listWorksheetsIdLabelOnlyWorksheetSearchWorksheetSearchResultWrapperWorksheetsWorksheetSearchResult struct {
	Worksheet WorksheetIdLabel `json:"worksheet"`
}

// GetWorksheet returns listWorksheetsIdLabelOnlyWorksheetSearchWorksheetSearchResultWrapperWorksheetsWorksheetSearchResult.Worksheet, and is useful for accessing the field via an interface.
func (v *listWorksheetsIdLabelOnlyWorksheetSearchWorksheetSearchResultWrapperWorksheetsWorksheetSearchResult) GetWorksheet() WorksheetIdLabel {
	return v.Worksheet
}

// listWorkspacesResponse is returned by listWorkspaces on success.
type listWorkspacesResponse struct {
	Workspaces []Workspace `json:"workspaces"`
}

// GetWorkspaces returns listWorkspacesResponse.Workspaces, and is useful for accessing the field via an interface.
func (v *listWorkspacesResponse) GetWorkspaces() []Workspace { return v.Workspaces }

// lookupAppResponse is returned by lookupApp on success.
type lookupAppResponse struct {
	Apps []App `json:"apps"`
}

// GetApps returns lookupAppResponse.Apps, and is useful for accessing the field via an interface.
func (v *lookupAppResponse) GetApps() []App { return v.Apps }

// lookupDatasetDatasetProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// Project and Workspace are the same thing We call it Workspace in the UI
// design now, so at some point, maybe update the API to match the updated
// design?
type lookupDatasetDatasetProject struct {
	Dataset *Dataset `json:"dataset"`
}

// GetDataset returns lookupDatasetDatasetProject.Dataset, and is useful for accessing the field via an interface.
func (v *lookupDatasetDatasetProject) GetDataset() *Dataset { return v.Dataset }

// lookupDatasetResponse is returned by lookupDataset on success.
type lookupDatasetResponse struct {
	Dataset *lookupDatasetDatasetProject `json:"dataset"`
}

// GetDataset returns lookupDatasetResponse.Dataset, and is useful for accessing the field via an interface.
func (v *lookupDatasetResponse) GetDataset() *lookupDatasetDatasetProject { return v.Dataset }

// lookupDatastreamDatastreamProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// Project and Workspace are the same thing We call it Workspace in the UI
// design now, so at some point, maybe update the API to match the updated
// design?
type lookupDatastreamDatastreamProject struct {
	Datastream Datastream `json:"datastream"`
}

// GetDatastream returns lookupDatastreamDatastreamProject.Datastream, and is useful for accessing the field via an interface.
func (v *lookupDatastreamDatastreamProject) GetDatastream() Datastream { return v.Datastream }

// lookupDatastreamResponse is returned by lookupDatastream on success.
type lookupDatastreamResponse struct {
	Datastream *lookupDatastreamDatastreamProject `json:"datastream"`
}

// GetDatastream returns lookupDatastreamResponse.Datastream, and is useful for accessing the field via an interface.
func (v *lookupDatastreamResponse) GetDatastream() *lookupDatastreamDatastreamProject {
	return v.Datastream
}

// lookupFolderFolderProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// Project and Workspace are the same thing We call it Workspace in the UI
// design now, so at some point, maybe update the API to match the updated
// design?
type lookupFolderFolderProject struct {
	Folder Folder `json:"folder"`
}

// GetFolder returns lookupFolderFolderProject.Folder, and is useful for accessing the field via an interface.
func (v *lookupFolderFolderProject) GetFolder() Folder { return v.Folder }

// lookupFolderResponse is returned by lookupFolder on success.
type lookupFolderResponse struct {
	Folder *lookupFolderFolderProject `json:"folder"`
}

// GetFolder returns lookupFolderResponse.Folder, and is useful for accessing the field via an interface.
func (v *lookupFolderResponse) GetFolder() *lookupFolderFolderProject { return v.Folder }

// lookupModuleVersionsResponse is returned by lookupModuleVersions on success.
type lookupModuleVersionsResponse struct {
	ModuleVersions []*ModuleVersion `json:"moduleVersions"`
}

// GetModuleVersions returns lookupModuleVersionsResponse.ModuleVersions, and is useful for accessing the field via an interface.
func (v *lookupModuleVersionsResponse) GetModuleVersions() []*ModuleVersion { return v.ModuleVersions }

// lookupMonitorMonitorProject includes the requested fields of the GraphQL type Project.
// The GraphQL type's documentation follows.
//
// Project and Workspace are the same thing We call it Workspace in the UI
// design now, so at some point, maybe update the API to match the updated
// design?
type lookupMonitorMonitorProject struct {
	Monitor Monitor `json:"monitor"`
}

// GetMonitor returns lookupMonitorMonitorProject.Monitor, and is useful for accessing the field via an interface.
func (v *lookupMonitorMonitorProject) GetMonitor() Monitor { return v.Monitor }

// lookupMonitorResponse is returned by lookupMonitor on success.
type lookupMonitorResponse struct {
	Monitor *lookupMonitorMonitorProject `json:"monitor"`
}

// GetMonitor returns lookupMonitorResponse.Monitor, and is useful for accessing the field via an interface.
func (v *lookupMonitorResponse) GetMonitor() *lookupMonitorMonitorProject { return v.Monitor }

// lookupMonitorV2Response is returned by lookupMonitorV2 on success.
type lookupMonitorV2Response struct {
	MonitorV2s MonitorV2SearchResult `json:"monitorV2s"`
}

// GetMonitorV2s returns lookupMonitorV2Response.MonitorV2s, and is useful for accessing the field via an interface.
func (v *lookupMonitorV2Response) GetMonitorV2s() MonitorV2SearchResult { return v.MonitorV2s }

// lookupSnowflakeOutboundShareResponse is returned by lookupSnowflakeOutboundShare on success.
type lookupSnowflakeOutboundShareResponse struct {
	Shares lookupSnowflakeOutboundShareSharesSnowflakeOutboundShareSearchResult `json:"shares"`
}

// GetShares returns lookupSnowflakeOutboundShareResponse.Shares, and is useful for accessing the field via an interface.
func (v *lookupSnowflakeOutboundShareResponse) GetShares() lookupSnowflakeOutboundShareSharesSnowflakeOutboundShareSearchResult {
	return v.Shares
}

// lookupSnowflakeOutboundShareSharesSnowflakeOutboundShareSearchResult includes the requested fields of the GraphQL type SnowflakeOutboundShareSearchResult.
type lookupSnowflakeOutboundShareSharesSnowflakeOutboundShareSearchResult struct {
	Results []SnowflakeOutboundShare `json:"results"`
}

// GetResults returns lookupSnowflakeOutboundShareSharesSnowflakeOutboundShareSearchResult.Results, and is useful for accessing the field via an interface.
func (v *lookupSnowflakeOutboundShareSharesSnowflakeOutboundShareSearchResult) GetResults() []SnowflakeOutboundShare {
	return v.Results
}

// lookupWorkspaceResponse is returned by lookupWorkspace on success.
type lookupWorkspaceResponse struct {
	Workspace *Workspace `json:"workspace"`
}

// GetWorkspace returns lookupWorkspaceResponse.Workspace, and is useful for accessing the field via an interface.
func (v *lookupWorkspaceResponse) GetWorkspace() *Workspace { return v.Workspace }

// removeCorrelationTagResponse is returned by removeCorrelationTag on success.
type removeCorrelationTagResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns removeCorrelationTagResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *removeCorrelationTagResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// saveDashboardResponse is returned by saveDashboard on success.
type saveDashboardResponse struct {
	Dashboard Dashboard `json:"dashboard"`
}

// GetDashboard returns saveDashboardResponse.Dashboard, and is useful for accessing the field via an interface.
func (v *saveDashboardResponse) GetDashboard() Dashboard { return v.Dashboard }

// saveDatasetDatasetDatasetSaveResult includes the requested fields of the GraphQL type DatasetSaveResult.
type saveDatasetDatasetDatasetSaveResult struct {
	// this is what you got out when saving
	Dataset *Dataset `json:"dataset"`
}

// GetDataset returns saveDatasetDatasetDatasetSaveResult.Dataset, and is useful for accessing the field via an interface.
func (v *saveDatasetDatasetDatasetSaveResult) GetDataset() *Dataset { return v.Dataset }

// saveDatasetResponse is returned by saveDataset on success.
type saveDatasetResponse struct {
	// saveDataset will create a dataset if you don't provide an input id.
	// It will also make sure that the provided transform is published with
	// that dataset. This is the general "update the things" function to use.
	// If dependencyHandling is not specified, then the default is to apply
	// changes but ignore downstream datasets or errors therein.
	Dataset *saveDatasetDatasetDatasetSaveResult `json:"dataset"`
}

// GetDataset returns saveDatasetResponse.Dataset, and is useful for accessing the field via an interface.
func (v *saveDatasetResponse) GetDataset() *saveDatasetDatasetDatasetSaveResult { return v.Dataset }

// saveMonitorV2RelationsResponse is returned by saveMonitorV2Relations on success.
type saveMonitorV2RelationsResponse struct {
	// saveMonitorV2Relations replaces all monitor relations (MonitorV2ActionRule, ActionDestinationLink)
	// for the provided monitor with the provided list of actionRules and destinationLinks.
	// Shared Actions can't be mutated through this call other than attaching it to the monitor, so you will need to used
	// saveActionWithDestinationLinks to mutate sharedAction's links to the destinations.
	// It does not allow you to mutate any shared actions' relationships with the destinations. Only the inlined actions'
	// relationships with the destinations are mutateable.Hence, this API will error out if you provide destinationLinks
	// where the action is shared.
	MonitorV2 MonitorV2 `json:"monitorV2"`
}

// GetMonitorV2 returns saveMonitorV2RelationsResponse.MonitorV2, and is useful for accessing the field via an interface.
func (v *saveMonitorV2RelationsResponse) GetMonitorV2() MonitorV2 { return v.MonitorV2 }

// saveSourceDatasetDatasetDatasetSaveResult includes the requested fields of the GraphQL type DatasetSaveResult.
type saveSourceDatasetDatasetDatasetSaveResult struct {
	// this is what you got out when saving
	Dataset *Dataset `json:"dataset"`
}

// GetDataset returns saveSourceDatasetDatasetDatasetSaveResult.Dataset, and is useful for accessing the field via an interface.
func (v *saveSourceDatasetDatasetDatasetSaveResult) GetDataset() *Dataset { return v.Dataset }

// saveSourceDatasetResponse is returned by saveSourceDataset on success.
type saveSourceDatasetResponse struct {
	Dataset *saveSourceDatasetDatasetDatasetSaveResult `json:"dataset"`
}

// GetDataset returns saveSourceDatasetResponse.Dataset, and is useful for accessing the field via an interface.
func (v *saveSourceDatasetResponse) GetDataset() *saveSourceDatasetDatasetDatasetSaveResult {
	return v.Dataset
}

// saveWorksheetResponse is returned by saveWorksheet on success.
type saveWorksheetResponse struct {
	Worksheet Worksheet `json:"worksheet"`
}

// GetWorksheet returns saveWorksheetResponse.Worksheet, and is useful for accessing the field via an interface.
func (v *saveWorksheetResponse) GetWorksheet() Worksheet { return v.Worksheet }

// searchMonitorActionsResponse is returned by searchMonitorActions on success.
type searchMonitorActionsResponse struct {
	MonitorActions []MonitorAction `json:"-"`
}

// GetMonitorActions returns searchMonitorActionsResponse.MonitorActions, and is useful for accessing the field via an interface.
func (v *searchMonitorActionsResponse) GetMonitorActions() []MonitorAction { return v.MonitorActions }

func (v *searchMonitorActionsResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*searchMonitorActionsResponse
		MonitorActions []json.RawMessage `json:"monitorActions"`
		graphql.NoUnmarshalJSON
	}
	firstPass.searchMonitorActionsResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.MonitorActions
		src := firstPass.MonitorActions
		*dst = make(
			[]MonitorAction,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			if len(src) != 0 && string(src) != "null" {
				err = __unmarshalMonitorAction(
					src, dst)
				if err != nil {
					return fmt.Errorf(
						"unable to unmarshal searchMonitorActionsResponse.MonitorActions: %w", err)
				}
			}
		}
	}
	return nil
}

type __premarshalsearchMonitorActionsResponse struct {
	MonitorActions []json.RawMessage `json:"monitorActions"`
}

func (v *searchMonitorActionsResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *searchMonitorActionsResponse) __premarshalJSON() (*__premarshalsearchMonitorActionsResponse, error) {
	var retval __premarshalsearchMonitorActionsResponse

	{

		dst := &retval.MonitorActions
		src := v.MonitorActions
		*dst = make(
			[]json.RawMessage,
			len(src))
		for i, src := range src {
			dst := &(*dst)[i]
			var err error
			*dst, err = __marshalMonitorAction(
				&src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal searchMonitorActionsResponse.MonitorActions: %w", err)
			}
		}
	}
	return &retval, nil
}

// searchMonitorV2ActionResponse is returned by searchMonitorV2Action on success.
type searchMonitorV2ActionResponse struct {
	MonitorV2Actions MonitorV2ActionSearchResult `json:"monitorV2Actions"`
}

// GetMonitorV2Actions returns searchMonitorV2ActionResponse.MonitorV2Actions, and is useful for accessing the field via an interface.
func (v *searchMonitorV2ActionResponse) GetMonitorV2Actions() MonitorV2ActionSearchResult {
	return v.MonitorV2Actions
}

// setChannelsForChannelActionResponse is returned by setChannelsForChannelAction on success.
type setChannelsForChannelActionResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns setChannelsForChannelActionResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *setChannelsForChannelActionResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// setDefaultDashboardResponse is returned by setDefaultDashboard on success.
type setDefaultDashboardResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns setDefaultDashboardResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *setDefaultDashboardResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// setMonitorsForChannelResponse is returned by setMonitorsForChannel on success.
type setMonitorsForChannelResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns setMonitorsForChannelResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *setMonitorsForChannelResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// setRbacDefaultGroupResponse is returned by setRbacDefaultGroup on success.
type setRbacDefaultGroupResponse struct {
	// Set the default group that users will be assigned to. Must currently be one
	// of the pre-defined "reader", "writer", or "admin" groups!
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns setRbacDefaultGroupResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *setRbacDefaultGroupResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// unsetRbacDefaultGroupResponse is returned by unsetRbacDefaultGroup on success.
type unsetRbacDefaultGroupResponse struct {
	ResultStatus ResultStatus `json:"resultStatus"`
}

// GetResultStatus returns unsetRbacDefaultGroupResponse.ResultStatus, and is useful for accessing the field via an interface.
func (v *unsetRbacDefaultGroupResponse) GetResultStatus() ResultStatus { return v.ResultStatus }

// updateAppDataSourceResponse is returned by updateAppDataSource on success.
type updateAppDataSourceResponse struct {
	Appdatasource AppDataSource `json:"appdatasource"`
}

// GetAppdatasource returns updateAppDataSourceResponse.Appdatasource, and is useful for accessing the field via an interface.
func (v *updateAppDataSourceResponse) GetAppdatasource() AppDataSource { return v.Appdatasource }

// updateAppResponse is returned by updateApp on success.
type updateAppResponse struct {
	App App `json:"app"`
}

// GetApp returns updateAppResponse.App, and is useful for accessing the field via an interface.
func (v *updateAppResponse) GetApp() App { return v.App }

// updateBoardResponse is returned by updateBoard on success.
type updateBoardResponse struct {
	Board Board `json:"board"`
}

// GetBoard returns updateBoardResponse.Board, and is useful for accessing the field via an interface.
func (v *updateBoardResponse) GetBoard() Board { return v.Board }

// updateChannelActionResponse is returned by updateChannelAction on success.
type updateChannelActionResponse struct {
	ChannelAction *ChannelAction `json:"-"`
}

// GetChannelAction returns updateChannelActionResponse.ChannelAction, and is useful for accessing the field via an interface.
func (v *updateChannelActionResponse) GetChannelAction() *ChannelAction { return v.ChannelAction }

func (v *updateChannelActionResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateChannelActionResponse
		ChannelAction json.RawMessage `json:"channelAction"`
		graphql.NoUnmarshalJSON
	}
	firstPass.updateChannelActionResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ChannelAction
		src := firstPass.ChannelAction
		if len(src) != 0 && string(src) != "null" {
			*dst = new(ChannelAction)
			err = __unmarshalChannelAction(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal updateChannelActionResponse.ChannelAction: %w", err)
			}
		}
	}
	return nil
}

type __premarshalupdateChannelActionResponse struct {
	ChannelAction json.RawMessage `json:"channelAction"`
}

func (v *updateChannelActionResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateChannelActionResponse) __premarshalJSON() (*__premarshalupdateChannelActionResponse, error) {
	var retval __premarshalupdateChannelActionResponse

	{

		dst := &retval.ChannelAction
		src := v.ChannelAction
		if src != nil {
			var err error
			*dst, err = __marshalChannelAction(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal updateChannelActionResponse.ChannelAction: %w", err)
			}
		}
	}
	return &retval, nil
}

// updateChannelResponse is returned by updateChannel on success.
type updateChannelResponse struct {
	Channel *Channel `json:"channel"`
}

// GetChannel returns updateChannelResponse.Channel, and is useful for accessing the field via an interface.
func (v *updateChannelResponse) GetChannel() *Channel { return v.Channel }

// updateDashboardLinkResponse is returned by updateDashboardLink on success.
type updateDashboardLinkResponse struct {
	DashboardLink DashboardLink `json:"dashboardLink"`
}

// GetDashboardLink returns updateDashboardLinkResponse.DashboardLink, and is useful for accessing the field via an interface.
func (v *updateDashboardLinkResponse) GetDashboardLink() DashboardLink { return v.DashboardLink }

// updateDatasetOutboundShareResponse is returned by updateDatasetOutboundShare on success.
type updateDatasetOutboundShareResponse struct {
	DatasetOutboundShare DatasetOutboundShare `json:"datasetOutboundShare"`
}

// GetDatasetOutboundShare returns updateDatasetOutboundShareResponse.DatasetOutboundShare, and is useful for accessing the field via an interface.
func (v *updateDatasetOutboundShareResponse) GetDatasetOutboundShare() DatasetOutboundShare {
	return v.DatasetOutboundShare
}

// updateDatastreamResponse is returned by updateDatastream on success.
type updateDatastreamResponse struct {
	Datastream Datastream `json:"datastream"`
}

// GetDatastream returns updateDatastreamResponse.Datastream, and is useful for accessing the field via an interface.
func (v *updateDatastreamResponse) GetDatastream() Datastream { return v.Datastream }

// updateDatastreamTokenResponse is returned by updateDatastreamToken on success.
type updateDatastreamTokenResponse struct {
	DatastreamToken DatastreamToken `json:"datastreamToken"`
}

// GetDatastreamToken returns updateDatastreamTokenResponse.DatastreamToken, and is useful for accessing the field via an interface.
func (v *updateDatastreamTokenResponse) GetDatastreamToken() DatastreamToken {
	return v.DatastreamToken
}

// updateDeferredForeignKeyResponse is returned by updateDeferredForeignKey on success.
type updateDeferredForeignKeyResponse struct {
	DeferredForeignKey *DeferredForeignKey `json:"deferredForeignKey"`
}

// GetDeferredForeignKey returns updateDeferredForeignKeyResponse.DeferredForeignKey, and is useful for accessing the field via an interface.
func (v *updateDeferredForeignKeyResponse) GetDeferredForeignKey() *DeferredForeignKey {
	return v.DeferredForeignKey
}

// updateFiledropResponse is returned by updateFiledrop on success.
type updateFiledropResponse struct {
	Filedrop *Filedrop `json:"filedrop"`
}

// GetFiledrop returns updateFiledropResponse.Filedrop, and is useful for accessing the field via an interface.
func (v *updateFiledropResponse) GetFiledrop() *Filedrop { return v.Filedrop }

// updateFolderResponse is returned by updateFolder on success.
type updateFolderResponse struct {
	Folder Folder `json:"folder"`
}

// GetFolder returns updateFolderResponse.Folder, and is useful for accessing the field via an interface.
func (v *updateFolderResponse) GetFolder() Folder { return v.Folder }

// updateLayeredSettingRecordResponse is returned by updateLayeredSettingRecord on success.
type updateLayeredSettingRecordResponse struct {
	LayeredSettingRecord LayeredSettingRecord `json:"layeredSettingRecord"`
}

// GetLayeredSettingRecord returns updateLayeredSettingRecordResponse.LayeredSettingRecord, and is useful for accessing the field via an interface.
func (v *updateLayeredSettingRecordResponse) GetLayeredSettingRecord() LayeredSettingRecord {
	return v.LayeredSettingRecord
}

// updateMonitorActionAttachmentResponse is returned by updateMonitorActionAttachment on success.
type updateMonitorActionAttachmentResponse struct {
	MonitorActionAttachment *MonitorActionAttachment `json:"monitorActionAttachment"`
}

// GetMonitorActionAttachment returns updateMonitorActionAttachmentResponse.MonitorActionAttachment, and is useful for accessing the field via an interface.
func (v *updateMonitorActionAttachmentResponse) GetMonitorActionAttachment() *MonitorActionAttachment {
	return v.MonitorActionAttachment
}

// updateMonitorActionResponse is returned by updateMonitorAction on success.
type updateMonitorActionResponse struct {
	MonitorAction *MonitorAction `json:"-"`
}

// GetMonitorAction returns updateMonitorActionResponse.MonitorAction, and is useful for accessing the field via an interface.
func (v *updateMonitorActionResponse) GetMonitorAction() *MonitorAction { return v.MonitorAction }

func (v *updateMonitorActionResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateMonitorActionResponse
		MonitorAction json.RawMessage `json:"monitorAction"`
		graphql.NoUnmarshalJSON
	}
	firstPass.updateMonitorActionResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.MonitorAction
		src := firstPass.MonitorAction
		if len(src) != 0 && string(src) != "null" {
			*dst = new(MonitorAction)
			err = __unmarshalMonitorAction(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal updateMonitorActionResponse.MonitorAction: %w", err)
			}
		}
	}
	return nil
}

type __premarshalupdateMonitorActionResponse struct {
	MonitorAction json.RawMessage `json:"monitorAction"`
}

func (v *updateMonitorActionResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateMonitorActionResponse) __premarshalJSON() (*__premarshalupdateMonitorActionResponse, error) {
	var retval __premarshalupdateMonitorActionResponse

	{

		dst := &retval.MonitorAction
		src := v.MonitorAction
		if src != nil {
			var err error
			*dst, err = __marshalMonitorAction(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal updateMonitorActionResponse.MonitorAction: %w", err)
			}
		}
	}
	return &retval, nil
}

// updateMonitorMonitorMonitorUpdateResult includes the requested fields of the GraphQL type MonitorUpdateResult.
type updateMonitorMonitorMonitorUpdateResult struct {
	Monitor Monitor `json:"monitor"`
}

// GetMonitor returns updateMonitorMonitorMonitorUpdateResult.Monitor, and is useful for accessing the field via an interface.
func (v *updateMonitorMonitorMonitorUpdateResult) GetMonitor() Monitor { return v.Monitor }

// updateMonitorResponse is returned by updateMonitor on success.
type updateMonitorResponse struct {
	Monitor *updateMonitorMonitorMonitorUpdateResult `json:"monitor"`
}

// GetMonitor returns updateMonitorResponse.Monitor, and is useful for accessing the field via an interface.
func (v *updateMonitorResponse) GetMonitor() *updateMonitorMonitorMonitorUpdateResult {
	return v.Monitor
}

// updateMonitorV2ActionResponse is returned by updateMonitorV2Action on success.
type updateMonitorV2ActionResponse struct {
	MonitorV2Action MonitorV2Action `json:"monitorV2Action"`
}

// GetMonitorV2Action returns updateMonitorV2ActionResponse.MonitorV2Action, and is useful for accessing the field via an interface.
func (v *updateMonitorV2ActionResponse) GetMonitorV2Action() MonitorV2Action {
	return v.MonitorV2Action
}

// updateMonitorV2Response is returned by updateMonitorV2 on success.
type updateMonitorV2Response struct {
	MonitorV2 MonitorV2 `json:"monitorV2"`
}

// GetMonitorV2 returns updateMonitorV2Response.MonitorV2, and is useful for accessing the field via an interface.
func (v *updateMonitorV2Response) GetMonitorV2() MonitorV2 { return v.MonitorV2 }

// updatePollerResponse is returned by updatePoller on success.
type updatePollerResponse struct {
	Poller Poller `json:"poller"`
}

// GetPoller returns updatePollerResponse.Poller, and is useful for accessing the field via an interface.
func (v *updatePollerResponse) GetPoller() Poller { return v.Poller }

// updatePreferredPathResponse is returned by updatePreferredPath on success.
type updatePreferredPathResponse struct {
	// Update a preferred path. When 'acceptInErrorState" is true, the API will accept
	// a save/update for a path, even if it means that the path will be left in error
	// state, else an error will be returned.
	PreferredPathWithStatus PreferredPathWithStatus `json:"preferredPathWithStatus"`
}

// GetPreferredPathWithStatus returns updatePreferredPathResponse.PreferredPathWithStatus, and is useful for accessing the field via an interface.
func (v *updatePreferredPathResponse) GetPreferredPathWithStatus() PreferredPathWithStatus {
	return v.PreferredPathWithStatus
}

// updateRbacGroupResponse is returned by updateRbacGroup on success.
type updateRbacGroupResponse struct {
	RbacGroup RbacGroup `json:"rbacGroup"`
}

// GetRbacGroup returns updateRbacGroupResponse.RbacGroup, and is useful for accessing the field via an interface.
func (v *updateRbacGroupResponse) GetRbacGroup() RbacGroup { return v.RbacGroup }

// updateRbacGroupmemberResponse is returned by updateRbacGroupmember on success.
type updateRbacGroupmemberResponse struct {
	RbacGroupmember RbacGroupmember `json:"rbacGroupmember"`
}

// GetRbacGroupmember returns updateRbacGroupmemberResponse.RbacGroupmember, and is useful for accessing the field via an interface.
func (v *updateRbacGroupmemberResponse) GetRbacGroupmember() RbacGroupmember {
	return v.RbacGroupmember
}

// updateRbacStatementResponse is returned by updateRbacStatement on success.
type updateRbacStatementResponse struct {
	RbacStatement RbacStatement `json:"rbacStatement"`
}

// GetRbacStatement returns updateRbacStatementResponse.RbacStatement, and is useful for accessing the field via an interface.
func (v *updateRbacStatementResponse) GetRbacStatement() RbacStatement { return v.RbacStatement }

// updateSnowflakeOutboundShareResponse is returned by updateSnowflakeOutboundShare on success.
type updateSnowflakeOutboundShareResponse struct {
	Share SnowflakeOutboundShare `json:"share"`
}

// GetShare returns updateSnowflakeOutboundShareResponse.Share, and is useful for accessing the field via an interface.
func (v *updateSnowflakeOutboundShareResponse) GetShare() SnowflakeOutboundShare { return v.Share }

// updateWorkspaceResponse is returned by updateWorkspace on success.
type updateWorkspaceResponse struct {
	Workspace *Workspace `json:"workspace"`
}

// GetWorkspace returns updateWorkspaceResponse.Workspace, and is useful for accessing the field via an interface.
func (v *updateWorkspaceResponse) GetWorkspace() *Workspace { return v.Workspace }

// The query or mutation executed by addCorrelationTag.
const addCorrelationTag_Operation = `
mutation addCorrelationTag ($datasetId: ObjectId!, $path: LinkFieldInput!, $tag: String!) {
	resultStatus: addCorrelationTag(datasetId: $datasetId, path: $path, tag: $tag) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func addCorrelationTag(
	ctx context.Context,
	client graphql.Client,
	datasetId string,
	path LinkFieldInput,
	tag string,
) (*addCorrelationTagResponse, error) {
	req := &graphql.Request{
		OpName: "addCorrelationTag",
		Query:  addCorrelationTag_Operation,
		Variables: &__addCorrelationTagInput{
			DatasetId: datasetId,
			Path:      path,
			Tag:       tag,
		},
	}
	var err error

	var data addCorrelationTagResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by clearDefaultDashboard.
const clearDefaultDashboard_Operation = `
mutation clearDefaultDashboard ($dsid: ObjectId!) {
	resultStatus: clearDefaultDashboard(dsid: $dsid) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func clearDefaultDashboard(
	ctx context.Context,
	client graphql.Client,
	dsid string,
) (*clearDefaultDashboardResponse, error) {
	req := &graphql.Request{
		OpName: "clearDefaultDashboard",
		Query:  clearDefaultDashboard_Operation,
		Variables: &__clearDefaultDashboardInput{
			Dsid: dsid,
		},
	}
	var err error

	var data clearDefaultDashboardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createApp.
const createApp_Operation = `
mutation createApp ($workspaceId: ObjectId!, $config: AppInput!) {
	app: createApp(workspaceId: $workspaceId, app: $config) {
		... App
	}
}
fragment App on App {
	id
	name
	iconUrl
	description
	workspaceId
	folderId
	config {
		moduleId
		version
	}
	status {
		state
		internalError
	}
	outputs
}
`

func createApp(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	config AppInput,
) (*createAppResponse, error) {
	req := &graphql.Request{
		OpName: "createApp",
		Query:  createApp_Operation,
		Variables: &__createAppInput{
			WorkspaceId: workspaceId,
			Config:      config,
		},
	}
	var err error

	var data createAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createAppDataSource.
const createAppDataSource_Operation = `
mutation createAppDataSource ($config: AppDataSourceInput!) {
	appdatasource: createAppDataSource(source: $config) {
		... AppDataSource
	}
}
fragment AppDataSource on AppDataSource {
	id
	name
	iconUrl
	description
	workspaceId
	managedById
	sourceUrl
	instructions
}
`

func createAppDataSource(
	ctx context.Context,
	client graphql.Client,
	config AppDataSourceInput,
) (*createAppDataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "createAppDataSource",
		Query:  createAppDataSource_Operation,
		Variables: &__createAppDataSourceInput{
			Config: config,
		},
	}
	var err error

	var data createAppDataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createBoard.
const createBoard_Operation = `
mutation createBoard ($datasetId: ObjectId!, $boardType: BoardType!, $board: BoardInput!) {
	board: createBoard(datasetId: $datasetId, type: $boardType, board: $board) {
		... Board
	}
}
fragment Board on Board {
	id
	datasetId
	name
	type
	boardJson: board
	source
}
`

func createBoard(
	ctx context.Context,
	client graphql.Client,
	datasetId string,
	boardType BoardType,
	board BoardInput,
) (*createBoardResponse, error) {
	req := &graphql.Request{
		OpName: "createBoard",
		Query:  createBoard_Operation,
		Variables: &__createBoardInput{
			DatasetId: datasetId,
			BoardType: boardType,
			Board:     board,
		},
	}
	var err error

	var data createBoardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createChannel.
const createChannel_Operation = `
mutation createChannel ($workspaceId: ObjectId!, $channel: ChannelInput!) {
	channel: createChannel(workspaceId: $workspaceId, channel: $channel) {
		... Channel
	}
}
fragment Channel on Channel {
	id
	name
	iconUrl
	description
	workspaceId
	monitors {
		id
	}
}
`

func createChannel(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	channel ChannelInput,
) (*createChannelResponse, error) {
	req := &graphql.Request{
		OpName: "createChannel",
		Query:  createChannel_Operation,
		Variables: &__createChannelInput{
			WorkspaceId: workspaceId,
			Channel:     channel,
		},
	}
	var err error

	var data createChannelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createChannelAction.
const createChannelAction_Operation = `
mutation createChannelAction ($workspaceId: ObjectId!, $action: ActionInput!) {
	channelAction: createChannelAction(workspaceId: $workspaceId, action: $action) {
		__typename
		... ChannelAction
	}
}
fragment ChannelAction on ChannelAction {
	id
	name
	iconUrl
	description
	notifyOnClose
	workspaceId
	channels {
		id
	}
	rateLimit
	__typename
	... on WebhookAction {
		urlTemplate
		bodyTemplate
		method
		headers {
			header
			valueTemplate
		}
	}
	... on EmailAction {
		targetAddresses
		subjectTemplate
		bodyTemplate
		isHtml
	}
}
`

func createChannelAction(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	action ActionInput,
) (*createChannelActionResponse, error) {
	req := &graphql.Request{
		OpName: "createChannelAction",
		Query:  createChannelAction_Operation,
		Variables: &__createChannelActionInput{
			WorkspaceId: workspaceId,
			Action:      action,
		},
	}
	var err error

	var data createChannelActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createDashboardLink.
const createDashboardLink_Operation = `
mutation createDashboardLink ($input: DashboardLinkInput!) {
	dashboardLink: createDashboardLink(link: $input) {
		... DashboardLink
	}
}
fragment DashboardLink on DashboardLink {
	id
	name
	workspaceId
	folderId
	managedById
	description
	fromDashboard: fromDashboardId
	toDashboard: toDashboardId
	fromCard
	linkLabel
}
`

func createDashboardLink(
	ctx context.Context,
	client graphql.Client,
	input DashboardLinkInput,
) (*createDashboardLinkResponse, error) {
	req := &graphql.Request{
		OpName: "createDashboardLink",
		Query:  createDashboardLink_Operation,
		Variables: &__createDashboardLinkInput{
			Input: input,
		},
	}
	var err error

	var data createDashboardLinkResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createDatasetOutboundShare.
const createDatasetOutboundShare_Operation = `
mutation createDatasetOutboundShare ($workspaceId: ObjectId!, $datasetID: ObjectId!, $outboundShareID: ObjectId!, $input: DatasetOutboundShareInput!) {
	datasetOutboundShare: createDatasetOutboundShare(workspaceId: $workspaceId, datasetID: $datasetID, outboundShareID: $outboundShareID, input: $input) {
		... DatasetOutboundShare
	}
}
fragment DatasetOutboundShare on DatasetOutboundShare {
	id
	name
	description
	workspaceId
	folderId
	datasetID
	outboundShareID
	schemaName
	viewName
	freshnessGoal
	status {
		state
		error
	}
}
`

func createDatasetOutboundShare(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	datasetID string,
	outboundShareID string,
	input DatasetOutboundShareInput,
) (*createDatasetOutboundShareResponse, error) {
	req := &graphql.Request{
		OpName: "createDatasetOutboundShare",
		Query:  createDatasetOutboundShare_Operation,
		Variables: &__createDatasetOutboundShareInput{
			WorkspaceId:     workspaceId,
			DatasetID:       datasetID,
			OutboundShareID: outboundShareID,
			Input:           input,
		},
	}
	var err error

	var data createDatasetOutboundShareResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createDatastream.
const createDatastream_Operation = `
mutation createDatastream ($workspaceId: ObjectId!, $datastream: DatastreamInput!) {
	datastream: createDatastream(workspaceId: $workspaceId, datastream: $datastream) {
		... Datastream
	}
}
fragment Datastream on Datastream {
	id
	name
	iconUrl
	description
	workspaceId
	datasetId
}
`

func createDatastream(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	datastream DatastreamInput,
) (*createDatastreamResponse, error) {
	req := &graphql.Request{
		OpName: "createDatastream",
		Query:  createDatastream_Operation,
		Variables: &__createDatastreamInput{
			WorkspaceId: workspaceId,
			Datastream:  datastream,
		},
	}
	var err error

	var data createDatastreamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createDatastreamToken.
const createDatastreamToken_Operation = `
mutation createDatastreamToken ($datastreamId: ObjectId!, $token: DatastreamTokenInput!, $password: String) {
	datastreamToken: createDatastreamToken(datastreamId: $datastreamId, token: $token, password: $password) {
		... DatastreamToken
	}
}
fragment DatastreamToken on DatastreamToken {
	id
	name
	description
	disabled
	datastreamId
	secret
}
`

func createDatastreamToken(
	ctx context.Context,
	client graphql.Client,
	datastreamId string,
	token DatastreamTokenInput,
	password *string,
) (*createDatastreamTokenResponse, error) {
	req := &graphql.Request{
		OpName: "createDatastreamToken",
		Query:  createDatastreamToken_Operation,
		Variables: &__createDatastreamTokenInput{
			DatastreamId: datastreamId,
			Token:        token,
			Password:     password,
		},
	}
	var err error

	var data createDatastreamTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createDeferredForeignKey.
const createDeferredForeignKey_Operation = `
mutation createDeferredForeignKey ($workspaceId: ObjectId!, $keyInput: DeferredForeignKeyInput!) {
	deferredForeignKey: createDeferredForeignKey(workspaceId: $workspaceId, data: $keyInput) {
		... DeferredForeignKey
	}
}
fragment DeferredForeignKey on DeferredForeignKey {
	id
	workspaceId
	sourceDataset {
		datasetId
	}
	targetDataset {
		datasetId
	}
	srcFields
	dstFields
	label
	resolution {
		sourceId
		targetId
	}
	status {
		errorText
	}
}
`

func createDeferredForeignKey(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	keyInput DeferredForeignKeyInput,
) (*createDeferredForeignKeyResponse, error) {
	req := &graphql.Request{
		OpName: "createDeferredForeignKey",
		Query:  createDeferredForeignKey_Operation,
		Variables: &__createDeferredForeignKeyInput{
			WorkspaceId: workspaceId,
			KeyInput:    keyInput,
		},
	}
	var err error

	var data createDeferredForeignKeyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createFiledrop.
const createFiledrop_Operation = `
mutation createFiledrop ($workspaceID: ObjectId!, $datastreamID: ObjectId!, $input: FiledropInput!) {
	filedrop: createFiledrop(workspaceId: $workspaceID, datastreamID: $datastreamID, input: $input) {
		... Filedrop
	}
}
fragment Filedrop on Filedrop {
	id
	name
	iconUrl
	description
	workspaceId
	status
	datastreamID
	config {
		provider {
			__typename
			... on FiledropProviderAwsConfig {
				region
				roleArn
			}
		}
	}
	endpoint {
		__typename
		... on FiledropS3Endpoint {
			arn
			bucket
			prefix
		}
	}
}
`

func createFiledrop(
	ctx context.Context,
	client graphql.Client,
	workspaceID string,
	datastreamID string,
	input FiledropInput,
) (*createFiledropResponse, error) {
	req := &graphql.Request{
		OpName: "createFiledrop",
		Query:  createFiledrop_Operation,
		Variables: &__createFiledropInput{
			WorkspaceID:  workspaceID,
			DatastreamID: datastreamID,
			Input:        input,
		},
	}
	var err error

	var data createFiledropResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createFolder.
const createFolder_Operation = `
mutation createFolder ($workspaceId: ObjectId!, $config: FolderInput!) {
	folder: createFolder(workspaceId: $workspaceId, folder: $config) {
		... Folder
	}
}
fragment Folder on Folder {
	id
	name
	iconUrl
	description
	workspaceId
}
`

func createFolder(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	config FolderInput,
) (*createFolderResponse, error) {
	req := &graphql.Request{
		OpName: "createFolder",
		Query:  createFolder_Operation,
		Variables: &__createFolderInput{
			WorkspaceId: workspaceId,
			Config:      config,
		},
	}
	var err error

	var data createFolderResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createLayeredSettingRecord.
const createLayeredSettingRecord_Operation = `
mutation createLayeredSettingRecord ($settingRecord: LayeredSettingRecordInput!) {
	layeredSettingRecord: createLayeredSettingRecord(settingRecord: $settingRecord) {
		... LayeredSettingRecord
	}
}
fragment LayeredSettingRecord on LayeredSettingRecord {
	settingAndTargetScope {
		... SettingAndTargetScope
	}
	value {
		... PrimitiveValue
	}
	id
	name
	description
	iconUrl
	workspaceId
	managedById
	folderId
}
fragment SettingAndTargetScope on SettingAndTargetScope {
	setting
	target {
		... LayeredSettingRecordTarget
	}
}
fragment PrimitiveValue on PrimitiveValue {
	bool
	float64
	int64
	string
	timestamp
	duration
}
fragment LayeredSettingRecordTarget on LayeredSettingRecordTarget {
	customerId
	workspaceId
	folderId
	appId
	monitorId
	worksheetId
	dashboardId
	datasetId
	datastreamId
	userId
}
`

func createLayeredSettingRecord(
	ctx context.Context,
	client graphql.Client,
	settingRecord LayeredSettingRecordInput,
) (*createLayeredSettingRecordResponse, error) {
	req := &graphql.Request{
		OpName: "createLayeredSettingRecord",
		Query:  createLayeredSettingRecord_Operation,
		Variables: &__createLayeredSettingRecordInput{
			SettingRecord: settingRecord,
		},
	}
	var err error

	var data createLayeredSettingRecordResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createMonitor.
const createMonitor_Operation = `
mutation createMonitor ($workspaceId: ObjectId!, $monitor: MonitorInput!) {
	monitor: createMonitor(workspaceId: $workspaceId, monitor: $monitor) {
		monitor {
			... Monitor
		}
	}
}
fragment Monitor on Monitor {
	workspaceId
	id
	name
	description
	comment
	iconUrl
	isTemplate
	disabled
	freshnessGoal
	useDefaultFreshness
	source
	definition
	managedById
	query {
		outputStage
		stages {
			... StageQuery
		}
	}
	rule {
		__typename
		sourceColumn
		groupByGroups {
			groupName
			columns
		}
		... on MonitorRuleCount {
			compareFunction
			compareValues
			lookbackTime
		}
		... on MonitorRuleChange {
			changeType
			compareFunction
			compareValues
			aggregateFunction
			lookbackTime
			baselineTime
		}
		... on MonitorRuleFacet {
			facetFunction
			facetValues
			timeFunction
			timeValue
			lookbackTime
		}
		... on MonitorRuleThreshold {
			compareFunction
			compareValues
			lookbackTime
			thresholdAggFunction
		}
		... on MonitorRulePromote {
			kindField
			descriptionField
			primaryKey
		}
		... on MonitorRuleLog {
			compareFunction
			compareValues
			lookbackTime
			expressionSummary
			logStageId
			sourceLogDatasetId
		}
	}
	notificationSpec {
		merge
		importance
		notifyOnReminder
		reminderFrequency
		notifyOnClose
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`

// More workarounds for server-side struggles
func createMonitor(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	monitor MonitorInput,
) (*createMonitorResponse, error) {
	req := &graphql.Request{
		OpName: "createMonitor",
		Query:  createMonitor_Operation,
		Variables: &__createMonitorInput{
			WorkspaceId: workspaceId,
			Monitor:     monitor,
		},
	}
	var err error

	var data createMonitorResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createMonitorAction.
const createMonitorAction_Operation = `
mutation createMonitorAction ($monitorAction: MonitorActionInput!) {
	monitorAction: createMonitorAction(input: $monitorAction) {
		__typename
		... MonitorAction
	}
}
fragment MonitorAction on MonitorAction {
	id
	name
	iconUrl
	description
	workspaceId
	rateLimit
	notifyOnClose
	isPrivate
	__typename
	... on EmailAction {
		targetAddresses
		subjectTemplate
		bodyTemplate
		isHtml
	}
	... on WebhookAction {
		urlTemplate
		method
		headers {
			header
			valueTemplate
		}
		bodyTemplate
	}
}
`

func createMonitorAction(
	ctx context.Context,
	client graphql.Client,
	monitorAction MonitorActionInput,
) (*createMonitorActionResponse, error) {
	req := &graphql.Request{
		OpName: "createMonitorAction",
		Query:  createMonitorAction_Operation,
		Variables: &__createMonitorActionInput{
			MonitorAction: monitorAction,
		},
	}
	var err error

	var data createMonitorActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createMonitorActionAttachment.
const createMonitorActionAttachment_Operation = `
mutation createMonitorActionAttachment ($monitorActionAttachment: MonitorActionAttachmentInput!) {
	monitorActionAttachment: createMonitorActionAttachment(input: $monitorActionAttachment) {
		... MonitorActionAttachment
	}
}
fragment MonitorActionAttachment on MonitorActionAttachment {
	monitorID
	actionID
	id
	workspaceId
	name
	iconUrl
	description
}
`

func createMonitorActionAttachment(
	ctx context.Context,
	client graphql.Client,
	monitorActionAttachment MonitorActionAttachmentInput,
) (*createMonitorActionAttachmentResponse, error) {
	req := &graphql.Request{
		OpName: "createMonitorActionAttachment",
		Query:  createMonitorActionAttachment_Operation,
		Variables: &__createMonitorActionAttachmentInput{
			MonitorActionAttachment: monitorActionAttachment,
		},
	}
	var err error

	var data createMonitorActionAttachmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createMonitorV2.
const createMonitorV2_Operation = `
mutation createMonitorV2 ($workspaceId: ObjectId!, $input: MonitorV2Input!) {
	monitorV2: createMonitorV2(workspaceId: $workspaceId, input: $input) {
		... MonitorV2
	}
}
fragment MonitorV2 on MonitorV2 {
	id
	workspaceId
	createdBy
	createdDate
	name
	iconUrl
	description
	managedById
	folderId
	rollupStatus
	ruleKind
	definition {
		... MonitorV2Definition
	}
	actionRules {
		... MonitorV2ActionRule
	}
}
fragment MonitorV2Definition on MonitorV2Definition {
	inputQuery {
		outputStage
		stages {
			... StageQuery
		}
	}
	rules {
		... MonitorV2Rule
	}
	lookbackTime
	dataStabilizationDelay
	groupings {
		... MonitorV2Column
	}
	scheduling {
		... MonitorV2Scheduling
	}
}
fragment MonitorV2ActionRule on MonitorV2ActionRule {
	actionID
	levels
	sendEndNotifications
	sendRemindersInterval
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
fragment MonitorV2Rule on MonitorV2Rule {
	level
	count {
		... MonitorV2CountRule
	}
	threshold {
		... MonitorV2ThresholdRule
	}
	promote {
		... MonitorV2PromoteRule
	}
}
fragment MonitorV2Column on MonitorV2Column {
	linkColumn {
		... MonitorV2LinkColumn
	}
	columnPath {
		... MonitorV2ColumnPath
	}
}
fragment MonitorV2Scheduling on MonitorV2Scheduling {
	interval {
		... MonitorV2IntervalSchedule
	}
	transform {
		... MonitorV2TransformSchedule
	}
}
fragment MonitorV2CountRule on MonitorV2CountRule {
	compareValues {
		... MonitorV2Comparison
	}
	compareGroups {
		... MonitorV2ColumnComparison
	}
}
fragment MonitorV2ThresholdRule on MonitorV2ThresholdRule {
	compareValues {
		... MonitorV2Comparison
	}
	valueColumnName
	aggregation
	compareGroups {
		... MonitorV2ColumnComparison
	}
}
fragment MonitorV2PromoteRule on MonitorV2PromoteRule {
	compareColumns {
		... MonitorV2ColumnComparison
	}
}
fragment MonitorV2LinkColumn on MonitorV2LinkColumn {
	name
	meta {
		... MonitorV2LinkColumnMeta
	}
}
fragment MonitorV2ColumnPath on MonitorV2ColumnPath {
	name
	path
}
fragment MonitorV2IntervalSchedule on MonitorV2IntervalSchedule {
	interval
	randomize
}
fragment MonitorV2TransformSchedule on MonitorV2TransformSchedule {
	freshnessGoal
}
fragment MonitorV2Comparison on MonitorV2Comparison {
	compareFn
	compareValue {
		... PrimitiveValue
	}
}
fragment MonitorV2ColumnComparison on MonitorV2ColumnComparison {
	column {
		... MonitorV2Column
	}
	compareValues {
		... MonitorV2Comparison
	}
}
fragment MonitorV2LinkColumnMeta on MonitorV2LinkColumnMeta {
	srcFields {
		... MonitorV2ColumnPath
	}
	dstFields
	targetDataset
}
fragment PrimitiveValue on PrimitiveValue {
	bool
	float64
	int64
	string
	timestamp
	duration
}
`

func createMonitorV2(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	input MonitorV2Input,
) (*createMonitorV2Response, error) {
	req := &graphql.Request{
		OpName: "createMonitorV2",
		Query:  createMonitorV2_Operation,
		Variables: &__createMonitorV2Input{
			WorkspaceId: workspaceId,
			Input:       input,
		},
	}
	var err error

	var data createMonitorV2Response
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createMonitorV2Action.
const createMonitorV2Action_Operation = `
mutation createMonitorV2Action ($workspaceId: ObjectId!, $input: MonitorV2ActionInput!) {
	monitorV2Action: createMonitorV2Action(workspaceId: $workspaceId, input: $input) {
		... MonitorV2Action
	}
}
fragment MonitorV2Action on MonitorV2Action {
	inline
	type
	email {
		... MonitorV2EmailAction
	}
	webhook {
		... MonitorV2WebhookAction
	}
	id
	workspaceId
	name
	iconUrl
	description
	createdBy
	createdDate
}
fragment MonitorV2EmailAction on MonitorV2EmailAction {
	users
	addresses
	subject
	body
	fragments
}
fragment MonitorV2WebhookAction on MonitorV2WebhookAction {
	headers {
		... MonitorV2WebhookHeader
	}
	body
	fragments
	url
	method
}
fragment MonitorV2WebhookHeader on MonitorV2WebhookHeader {
	header
	value
}
`

func createMonitorV2Action(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	input MonitorV2ActionInput,
) (*createMonitorV2ActionResponse, error) {
	req := &graphql.Request{
		OpName: "createMonitorV2Action",
		Query:  createMonitorV2Action_Operation,
		Variables: &__createMonitorV2ActionInput{
			WorkspaceId: workspaceId,
			Input:       input,
		},
	}
	var err error

	var data createMonitorV2ActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createOrUpdateBookmark.
const createOrUpdateBookmark_Operation = `
mutation createOrUpdateBookmark ($id: ObjectId, $bookmark: BookmarkInput!) {
	bookmark: createOrUpdateBookmark(id: $id, bookmark: $bookmark) {
		... Bookmark
	}
}
fragment Bookmark on Bookmark {
	id
	name
	iconUrl
	targetId
	targetIdKind
	groupId
	bookmarkKind
}
`

func createOrUpdateBookmark(
	ctx context.Context,
	client graphql.Client,
	id *string,
	bookmark BookmarkInput,
) (*createOrUpdateBookmarkResponse, error) {
	req := &graphql.Request{
		OpName: "createOrUpdateBookmark",
		Query:  createOrUpdateBookmark_Operation,
		Variables: &__createOrUpdateBookmarkInput{
			Id:       id,
			Bookmark: bookmark,
		},
	}
	var err error

	var data createOrUpdateBookmarkResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createOrUpdateBookmarkGroup.
const createOrUpdateBookmarkGroup_Operation = `
mutation createOrUpdateBookmarkGroup ($id: ObjectId, $group: BookmarkGroupInput!) {
	bookmarkGroup: createOrUpdateBookmarkGroup(id: $id, group: $group) {
		... BookmarkGroup
	}
}
fragment BookmarkGroup on BookmarkGroup {
	id
	name
	description
	iconUrl
	workspaceId
	isHome
}
`

func createOrUpdateBookmarkGroup(
	ctx context.Context,
	client graphql.Client,
	id *string,
	group BookmarkGroupInput,
) (*createOrUpdateBookmarkGroupResponse, error) {
	req := &graphql.Request{
		OpName: "createOrUpdateBookmarkGroup",
		Query:  createOrUpdateBookmarkGroup_Operation,
		Variables: &__createOrUpdateBookmarkGroupInput{
			Id:    id,
			Group: group,
		},
	}
	var err error

	var data createOrUpdateBookmarkGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createPoller.
const createPoller_Operation = `
mutation createPoller ($workspaceId: ObjectId!, $poller: PollerInput!) {
	poller: createPoller(workspaceId: $workspaceId, poller: $poller) {
		... Poller
	}
}
fragment Poller on Poller {
	id
	workspaceId
	customerId
	datastreamId
	disabled
	kind
	config {
		__typename
		name
		retries
		interval
		tags
		chunk {
			enabled
			size
		}
		... on PollerPubSubConfig {
			projectId
			jsonKey
			subscriptionId
		}
		... on PollerHTTPConfig {
			method
			body
			endpoint
			contentType
			headers
			template {
				... HttpRequestConfig
			}
			requests {
				... HttpRequestConfig
			}
			rules {
				match {
					... HttpRequestConfig
				}
				follow
				decoder {
					type
				}
			}
			timestamps {
				name
				source
				format
				offset
				truncate
			}
		}
		... on PollerGCPMonitoringConfig {
			projectId
			jsonKey
			includeMetricTypePrefixes
			excludeMetricTypePrefixes
			rateLimit
			totalLimit
		}
		... on PollerMongoDBAtlasConfig {
			publicKey
			privateKey
			includeGroups
			excludeGroups
		}
		... on PollerCloudWatchMetricsConfig {
			period
			delay
			region
			assumeRoleArn
			queries {
				namespace
				metricNames
				dimensions {
					name
					value
				}
				resourceFilter {
					resourceType
					pattern
					dimensionName
					tagFilters {
						key
						values
					}
				}
			}
		}
		... on PollerAWSSnapshotConfig {
			region
			assumeRoleArn
			includeActions
		}
	}
}
fragment HttpRequestConfig on PollerHTTPRequestConfig {
	url
	method
	username
	password
	authScheme
	body
	headers
	params
}
`

func createPoller(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	poller PollerInput,
) (*createPollerResponse, error) {
	req := &graphql.Request{
		OpName: "createPoller",
		Query:  createPoller_Operation,
		Variables: &__createPollerInput{
			WorkspaceId: workspaceId,
			Poller:      poller,
		},
	}
	var err error

	var data createPollerResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createPreferredPath.
const createPreferredPath_Operation = `
mutation createPreferredPath ($workspaceId: ObjectId!, $config: PreferredPathInput!) {
	preferredPathWithStatus: createPreferredPath(workspaceId: $workspaceId, path: $config) {
		... PreferredPathWithStatus
	}
}
fragment PreferredPathWithStatus on PreferredPathWithStatus {
	path {
		... PreferredPath
	}
	error
}
fragment PreferredPath on PreferredPath {
	id
	name
	iconUrl
	description
	workspaceId
	folderId
	sourceDataset
	path {
		linkId
		reverse
		linkName
		reverseFromDataset
	}
}
`

// More workarounds for server-side struggles
func createPreferredPath(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	config PreferredPathInput,
) (*createPreferredPathResponse, error) {
	req := &graphql.Request{
		OpName: "createPreferredPath",
		Query:  createPreferredPath_Operation,
		Variables: &__createPreferredPathInput{
			WorkspaceId: workspaceId,
			Config:      config,
		},
	}
	var err error

	var data createPreferredPathResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createRbacGroup.
const createRbacGroup_Operation = `
mutation createRbacGroup ($config: RbacGroupInput!) {
	rbacGroup: createRbacGroup(input: $config) {
		... RbacGroup
	}
}
fragment RbacGroup on RbacGroup {
	id
	name
	description
}
`

func createRbacGroup(
	ctx context.Context,
	client graphql.Client,
	config RbacGroupInput,
) (*createRbacGroupResponse, error) {
	req := &graphql.Request{
		OpName: "createRbacGroup",
		Query:  createRbacGroup_Operation,
		Variables: &__createRbacGroupInput{
			Config: config,
		},
	}
	var err error

	var data createRbacGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createRbacGroupmember.
const createRbacGroupmember_Operation = `
mutation createRbacGroupmember ($config: RbacGroupmemberInput!) {
	rbacGroupmember: createRbacGroupmember(input: $config) {
		... RbacGroupmember
	}
}
fragment RbacGroupmember on RbacGroupmember {
	id
	description
	groupId
	memberUserId
	memberGroupId
}
`

func createRbacGroupmember(
	ctx context.Context,
	client graphql.Client,
	config RbacGroupmemberInput,
) (*createRbacGroupmemberResponse, error) {
	req := &graphql.Request{
		OpName: "createRbacGroupmember",
		Query:  createRbacGroupmember_Operation,
		Variables: &__createRbacGroupmemberInput{
			Config: config,
		},
	}
	var err error

	var data createRbacGroupmemberResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createRbacStatement.
const createRbacStatement_Operation = `
mutation createRbacStatement ($config: RbacStatementInput!) {
	rbacStatement: createRbacStatement(input: $config) {
		... RbacStatement
	}
}
fragment RbacStatement on RbacStatement {
	id
	description
	subject {
		userId
		groupId
		all
	}
	object {
		objectId
		folderId
		workspaceId
		type
		name
		owner
		all
	}
	role
	version
}
`

func createRbacStatement(
	ctx context.Context,
	client graphql.Client,
	config RbacStatementInput,
) (*createRbacStatementResponse, error) {
	req := &graphql.Request{
		OpName: "createRbacStatement",
		Query:  createRbacStatement_Operation,
		Variables: &__createRbacStatementInput{
			Config: config,
		},
	}
	var err error

	var data createRbacStatementResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createSnowflakeOutboundShare.
const createSnowflakeOutboundShare_Operation = `
mutation createSnowflakeOutboundShare ($workspaceId: ObjectId!, $input: SnowflakeOutboundShareInput!) {
	share: createSnowflakeOutboundShare(workspaceId: $workspaceId, input: $input) {
		... SnowflakeOutboundShare
	}
}
fragment SnowflakeOutboundShare on SnowflakeOutboundShare {
	id
	name
	description
	workspaceId
	shareName
	accounts {
		... SnowflakeAccount
	}
}
fragment SnowflakeAccount on SnowflakeAccount {
	organization
	account
}
`

func createSnowflakeOutboundShare(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	input SnowflakeOutboundShareInput,
) (*createSnowflakeOutboundShareResponse, error) {
	req := &graphql.Request{
		OpName: "createSnowflakeOutboundShare",
		Query:  createSnowflakeOutboundShare_Operation,
		Variables: &__createSnowflakeOutboundShareInput{
			WorkspaceId: workspaceId,
			Input:       input,
		},
	}
	var err error

	var data createSnowflakeOutboundShareResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createWorkspace.
const createWorkspace_Operation = `
mutation createWorkspace ($config: WorkspaceInput!) {
	workspace: createWorkspace(definition: $config) {
		... Workspace
	}
}
fragment Workspace on Project {
	id
	label
}
`

func createWorkspace(
	ctx context.Context,
	client graphql.Client,
	config WorkspaceInput,
) (*createWorkspaceResponse, error) {
	req := &graphql.Request{
		OpName: "createWorkspace",
		Query:  createWorkspace_Operation,
		Variables: &__createWorkspaceInput{
			Config: config,
		},
	}
	var err error

	var data createWorkspaceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteApp.
const deleteApp_Operation = `
mutation deleteApp ($id: ObjectId!) {
	resultStatus: deleteApp(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteApp(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteAppResponse, error) {
	req := &graphql.Request{
		OpName: "deleteApp",
		Query:  deleteApp_Operation,
		Variables: &__deleteAppInput{
			Id: id,
		},
	}
	var err error

	var data deleteAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteAppDataSource.
const deleteAppDataSource_Operation = `
mutation deleteAppDataSource ($id: ObjectId!) {
	resultStatus: deleteAppDataSource(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteAppDataSource(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteAppDataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "deleteAppDataSource",
		Query:  deleteAppDataSource_Operation,
		Variables: &__deleteAppDataSourceInput{
			Id: id,
		},
	}
	var err error

	var data deleteAppDataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteBoard.
const deleteBoard_Operation = `
mutation deleteBoard ($id: ObjectId!) {
	resultStatus: deleteBoard(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteBoard(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteBoardResponse, error) {
	req := &graphql.Request{
		OpName: "deleteBoard",
		Query:  deleteBoard_Operation,
		Variables: &__deleteBoardInput{
			Id: id,
		},
	}
	var err error

	var data deleteBoardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteBookmark.
const deleteBookmark_Operation = `
mutation deleteBookmark ($id: ObjectId!) {
	resultStatus: deleteBookmark(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteBookmark(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteBookmarkResponse, error) {
	req := &graphql.Request{
		OpName: "deleteBookmark",
		Query:  deleteBookmark_Operation,
		Variables: &__deleteBookmarkInput{
			Id: id,
		},
	}
	var err error

	var data deleteBookmarkResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteBookmarkGroup.
const deleteBookmarkGroup_Operation = `
mutation deleteBookmarkGroup ($id: ObjectId!) {
	resultStatus: deleteBookmarkGroup(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteBookmarkGroup(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteBookmarkGroupResponse, error) {
	req := &graphql.Request{
		OpName: "deleteBookmarkGroup",
		Query:  deleteBookmarkGroup_Operation,
		Variables: &__deleteBookmarkGroupInput{
			Id: id,
		},
	}
	var err error

	var data deleteBookmarkGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteChannel.
const deleteChannel_Operation = `
mutation deleteChannel ($id: ObjectId!) {
	resultStatus: deleteChannel(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteChannel(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteChannelResponse, error) {
	req := &graphql.Request{
		OpName: "deleteChannel",
		Query:  deleteChannel_Operation,
		Variables: &__deleteChannelInput{
			Id: id,
		},
	}
	var err error

	var data deleteChannelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteChannelAction.
const deleteChannelAction_Operation = `
mutation deleteChannelAction ($id: ObjectId!) {
	resultStatus: deleteChannelAction(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteChannelAction(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteChannelActionResponse, error) {
	req := &graphql.Request{
		OpName: "deleteChannelAction",
		Query:  deleteChannelAction_Operation,
		Variables: &__deleteChannelActionInput{
			Id: id,
		},
	}
	var err error

	var data deleteChannelActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteDashboard.
const deleteDashboard_Operation = `
mutation deleteDashboard ($id: ObjectId!) {
	resultStatus: deleteDashboard(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteDashboard(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteDashboardResponse, error) {
	req := &graphql.Request{
		OpName: "deleteDashboard",
		Query:  deleteDashboard_Operation,
		Variables: &__deleteDashboardInput{
			Id: id,
		},
	}
	var err error

	var data deleteDashboardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteDashboardLink.
const deleteDashboardLink_Operation = `
mutation deleteDashboardLink ($id: ObjectId!) {
	resultStatus: deleteDashboardLink(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteDashboardLink(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteDashboardLinkResponse, error) {
	req := &graphql.Request{
		OpName: "deleteDashboardLink",
		Query:  deleteDashboardLink_Operation,
		Variables: &__deleteDashboardLinkInput{
			Id: id,
		},
	}
	var err error

	var data deleteDashboardLinkResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteDataset.
const deleteDataset_Operation = `
mutation deleteDataset ($id: ObjectId!, $dep: DependencyHandlingInput) {
	resultStatus: deleteDataset(dsid: $id, dependencyHandling: $dep) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteDataset(
	ctx context.Context,
	client graphql.Client,
	id string,
	dep *DependencyHandlingInput,
) (*deleteDatasetResponse, error) {
	req := &graphql.Request{
		OpName: "deleteDataset",
		Query:  deleteDataset_Operation,
		Variables: &__deleteDatasetInput{
			Id:  id,
			Dep: dep,
		},
	}
	var err error

	var data deleteDatasetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteDatasetOutboundShare.
const deleteDatasetOutboundShare_Operation = `
mutation deleteDatasetOutboundShare ($id: ObjectId!) {
	resultStatus: deleteDatasetOutboundShare(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteDatasetOutboundShare(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteDatasetOutboundShareResponse, error) {
	req := &graphql.Request{
		OpName: "deleteDatasetOutboundShare",
		Query:  deleteDatasetOutboundShare_Operation,
		Variables: &__deleteDatasetOutboundShareInput{
			Id: id,
		},
	}
	var err error

	var data deleteDatasetOutboundShareResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteDatastream.
const deleteDatastream_Operation = `
mutation deleteDatastream ($id: ObjectId!) {
	resultStatus: deleteDatastream(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteDatastream(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteDatastreamResponse, error) {
	req := &graphql.Request{
		OpName: "deleteDatastream",
		Query:  deleteDatastream_Operation,
		Variables: &__deleteDatastreamInput{
			Id: id,
		},
	}
	var err error

	var data deleteDatastreamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteDatastreamToken.
const deleteDatastreamToken_Operation = `
mutation deleteDatastreamToken ($id: String!) {
	resultStatus: deleteDatastreamToken(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteDatastreamToken(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteDatastreamTokenResponse, error) {
	req := &graphql.Request{
		OpName: "deleteDatastreamToken",
		Query:  deleteDatastreamToken_Operation,
		Variables: &__deleteDatastreamTokenInput{
			Id: id,
		},
	}
	var err error

	var data deleteDatastreamTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteDeferredForeignKey.
const deleteDeferredForeignKey_Operation = `
mutation deleteDeferredForeignKey ($id: ObjectId!) {
	resultStatus: deleteDeferredForeignKey(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteDeferredForeignKey(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteDeferredForeignKeyResponse, error) {
	req := &graphql.Request{
		OpName: "deleteDeferredForeignKey",
		Query:  deleteDeferredForeignKey_Operation,
		Variables: &__deleteDeferredForeignKeyInput{
			Id: id,
		},
	}
	var err error

	var data deleteDeferredForeignKeyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteFiledrop.
const deleteFiledrop_Operation = `
mutation deleteFiledrop ($id: ObjectId!) {
	resultStatus: deleteFiledrop(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteFiledrop(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteFiledropResponse, error) {
	req := &graphql.Request{
		OpName: "deleteFiledrop",
		Query:  deleteFiledrop_Operation,
		Variables: &__deleteFiledropInput{
			Id: id,
		},
	}
	var err error

	var data deleteFiledropResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteFolder.
const deleteFolder_Operation = `
mutation deleteFolder ($id: ObjectId!) {
	resultStatus: deleteFolder(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteFolder(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteFolderResponse, error) {
	req := &graphql.Request{
		OpName: "deleteFolder",
		Query:  deleteFolder_Operation,
		Variables: &__deleteFolderInput{
			Id: id,
		},
	}
	var err error

	var data deleteFolderResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteLayeredSettingRecord.
const deleteLayeredSettingRecord_Operation = `
mutation deleteLayeredSettingRecord ($id: ObjectId!) {
	deleteLayeredSettingRecord(id: $id) {
		resultStatus: result {
			... ResultStatus
		}
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteLayeredSettingRecord(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteLayeredSettingRecordResponse, error) {
	req := &graphql.Request{
		OpName: "deleteLayeredSettingRecord",
		Query:  deleteLayeredSettingRecord_Operation,
		Variables: &__deleteLayeredSettingRecordInput{
			Id: id,
		},
	}
	var err error

	var data deleteLayeredSettingRecordResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteMonitor.
const deleteMonitor_Operation = `
mutation deleteMonitor ($id: ObjectId!) {
	resultStatus: deleteMonitor(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteMonitor(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteMonitorResponse, error) {
	req := &graphql.Request{
		OpName: "deleteMonitor",
		Query:  deleteMonitor_Operation,
		Variables: &__deleteMonitorInput{
			Id: id,
		},
	}
	var err error

	var data deleteMonitorResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteMonitorAction.
const deleteMonitorAction_Operation = `
mutation deleteMonitorAction ($id: ObjectId!) {
	resultStatus: deleteMonitorAction(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteMonitorAction(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteMonitorActionResponse, error) {
	req := &graphql.Request{
		OpName: "deleteMonitorAction",
		Query:  deleteMonitorAction_Operation,
		Variables: &__deleteMonitorActionInput{
			Id: id,
		},
	}
	var err error

	var data deleteMonitorActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteMonitorActionAttachment.
const deleteMonitorActionAttachment_Operation = `
mutation deleteMonitorActionAttachment ($id: ObjectId!) {
	resultStatus: deleteMonitorActionAttachment(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteMonitorActionAttachment(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteMonitorActionAttachmentResponse, error) {
	req := &graphql.Request{
		OpName: "deleteMonitorActionAttachment",
		Query:  deleteMonitorActionAttachment_Operation,
		Variables: &__deleteMonitorActionAttachmentInput{
			Id: id,
		},
	}
	var err error

	var data deleteMonitorActionAttachmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteMonitorV2.
const deleteMonitorV2_Operation = `
mutation deleteMonitorV2 ($id: ObjectId!) {
	resultStatus: deleteMonitorV2(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteMonitorV2(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteMonitorV2Response, error) {
	req := &graphql.Request{
		OpName: "deleteMonitorV2",
		Query:  deleteMonitorV2_Operation,
		Variables: &__deleteMonitorV2Input{
			Id: id,
		},
	}
	var err error

	var data deleteMonitorV2Response
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteMonitorV2Action.
const deleteMonitorV2Action_Operation = `
mutation deleteMonitorV2Action ($id: ObjectId!) {
	resultStatus: deleteMonitorV2Action(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteMonitorV2Action(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteMonitorV2ActionResponse, error) {
	req := &graphql.Request{
		OpName: "deleteMonitorV2Action",
		Query:  deleteMonitorV2Action_Operation,
		Variables: &__deleteMonitorV2ActionInput{
			Id: id,
		},
	}
	var err error

	var data deleteMonitorV2ActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deletePoller.
const deletePoller_Operation = `
mutation deletePoller ($id: ObjectId!) {
	resultStatus: deletePoller(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deletePoller(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deletePollerResponse, error) {
	req := &graphql.Request{
		OpName: "deletePoller",
		Query:  deletePoller_Operation,
		Variables: &__deletePollerInput{
			Id: id,
		},
	}
	var err error

	var data deletePollerResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deletePreferredPath.
const deletePreferredPath_Operation = `
mutation deletePreferredPath ($id: ObjectId!) {
	resultStatus: deletePreferredPath(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deletePreferredPath(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deletePreferredPathResponse, error) {
	req := &graphql.Request{
		OpName: "deletePreferredPath",
		Query:  deletePreferredPath_Operation,
		Variables: &__deletePreferredPathInput{
			Id: id,
		},
	}
	var err error

	var data deletePreferredPathResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteRbacGroup.
const deleteRbacGroup_Operation = `
mutation deleteRbacGroup ($id: ORN!) {
	resultStatus: deleteRbacGroup(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteRbacGroup(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteRbacGroupResponse, error) {
	req := &graphql.Request{
		OpName: "deleteRbacGroup",
		Query:  deleteRbacGroup_Operation,
		Variables: &__deleteRbacGroupInput{
			Id: id,
		},
	}
	var err error

	var data deleteRbacGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteRbacGroupmember.
const deleteRbacGroupmember_Operation = `
mutation deleteRbacGroupmember ($id: ORN!) {
	resultStatus: deleteRbacGroupmember(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteRbacGroupmember(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteRbacGroupmemberResponse, error) {
	req := &graphql.Request{
		OpName: "deleteRbacGroupmember",
		Query:  deleteRbacGroupmember_Operation,
		Variables: &__deleteRbacGroupmemberInput{
			Id: id,
		},
	}
	var err error

	var data deleteRbacGroupmemberResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteRbacStatement.
const deleteRbacStatement_Operation = `
mutation deleteRbacStatement ($id: ORN!) {
	resultStatus: deleteRbacStatement(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteRbacStatement(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteRbacStatementResponse, error) {
	req := &graphql.Request{
		OpName: "deleteRbacStatement",
		Query:  deleteRbacStatement_Operation,
		Variables: &__deleteRbacStatementInput{
			Id: id,
		},
	}
	var err error

	var data deleteRbacStatementResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteSnowflakeOutboundShare.
const deleteSnowflakeOutboundShare_Operation = `
mutation deleteSnowflakeOutboundShare ($id: ObjectId!) {
	resultStatus: deleteSnowflakeOutboundShare(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteSnowflakeOutboundShare(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteSnowflakeOutboundShareResponse, error) {
	req := &graphql.Request{
		OpName: "deleteSnowflakeOutboundShare",
		Query:  deleteSnowflakeOutboundShare_Operation,
		Variables: &__deleteSnowflakeOutboundShareInput{
			Id: id,
		},
	}
	var err error

	var data deleteSnowflakeOutboundShareResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteWorksheet.
const deleteWorksheet_Operation = `
mutation deleteWorksheet ($id: ObjectId!) {
	resultStatus: deleteWorksheet(wks: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteWorksheet(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteWorksheetResponse, error) {
	req := &graphql.Request{
		OpName: "deleteWorksheet",
		Query:  deleteWorksheet_Operation,
		Variables: &__deleteWorksheetInput{
			Id: id,
		},
	}
	var err error

	var data deleteWorksheetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by deleteWorkspace.
const deleteWorkspace_Operation = `
mutation deleteWorkspace ($id: ObjectId!) {
	resultStatus: deleteWorkspace(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func deleteWorkspace(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteWorkspaceResponse, error) {
	req := &graphql.Request{
		OpName: "deleteWorkspace",
		Query:  deleteWorkspace_Operation,
		Variables: &__deleteWorkspaceInput{
			Id: id,
		},
	}
	var err error

	var data deleteWorkspaceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getApp.
const getApp_Operation = `
query getApp ($id: ObjectId!) {
	app(id: $id) {
		... App
	}
}
fragment App on App {
	id
	name
	iconUrl
	description
	workspaceId
	folderId
	config {
		moduleId
		version
	}
	status {
		state
		internalError
	}
	outputs
}
`

func getApp(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getAppResponse, error) {
	req := &graphql.Request{
		OpName: "getApp",
		Query:  getApp_Operation,
		Variables: &__getAppInput{
			Id: id,
		},
	}
	var err error

	var data getAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getAppDataSource.
const getAppDataSource_Operation = `
query getAppDataSource ($id: ObjectId!) {
	appdatasource: appDataSource(id: $id) {
		... AppDataSource
	}
}
fragment AppDataSource on AppDataSource {
	id
	name
	iconUrl
	description
	workspaceId
	managedById
	sourceUrl
	instructions
}
`

func getAppDataSource(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getAppDataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "getAppDataSource",
		Query:  getAppDataSource_Operation,
		Variables: &__getAppDataSourceInput{
			Id: id,
		},
	}
	var err error

	var data getAppDataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getBoard.
const getBoard_Operation = `
query getBoard ($id: ObjectId!) {
	board: getBoard(id: $id) {
		... Board
	}
}
fragment Board on Board {
	id
	datasetId
	name
	type
	boardJson: board
	source
}
`

func getBoard(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getBoardResponse, error) {
	req := &graphql.Request{
		OpName: "getBoard",
		Query:  getBoard_Operation,
		Variables: &__getBoardInput{
			Id: id,
		},
	}
	var err error

	var data getBoardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getBookmark.
const getBookmark_Operation = `
query getBookmark ($id: ObjectId!) {
	bookmark(id: $id) {
		... Bookmark
	}
}
fragment Bookmark on Bookmark {
	id
	name
	iconUrl
	targetId
	targetIdKind
	groupId
	bookmarkKind
}
`

func getBookmark(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getBookmarkResponse, error) {
	req := &graphql.Request{
		OpName: "getBookmark",
		Query:  getBookmark_Operation,
		Variables: &__getBookmarkInput{
			Id: id,
		},
	}
	var err error

	var data getBookmarkResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getBookmarkGroup.
const getBookmarkGroup_Operation = `
query getBookmarkGroup ($id: ObjectId!) {
	bookmarkGroup(id: $id) {
		... BookmarkGroup
	}
}
fragment BookmarkGroup on BookmarkGroup {
	id
	name
	description
	iconUrl
	workspaceId
	isHome
}
`

func getBookmarkGroup(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getBookmarkGroupResponse, error) {
	req := &graphql.Request{
		OpName: "getBookmarkGroup",
		Query:  getBookmarkGroup_Operation,
		Variables: &__getBookmarkGroupInput{
			Id: id,
		},
	}
	var err error

	var data getBookmarkGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getChannel.
const getChannel_Operation = `
query getChannel ($id: ObjectId!) {
	channel: getChannel(id: $id) {
		... Channel
	}
}
fragment Channel on Channel {
	id
	name
	iconUrl
	description
	workspaceId
	monitors {
		id
	}
}
`

func getChannel(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getChannelResponse, error) {
	req := &graphql.Request{
		OpName: "getChannel",
		Query:  getChannel_Operation,
		Variables: &__getChannelInput{
			Id: id,
		},
	}
	var err error

	var data getChannelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getChannelAction.
const getChannelAction_Operation = `
query getChannelAction ($id: ObjectId!) {
	channelAction: getChannelAction(id: $id) {
		__typename
		... ChannelAction
	}
}
fragment ChannelAction on ChannelAction {
	id
	name
	iconUrl
	description
	notifyOnClose
	workspaceId
	channels {
		id
	}
	rateLimit
	__typename
	... on WebhookAction {
		urlTemplate
		bodyTemplate
		method
		headers {
			header
			valueTemplate
		}
	}
	... on EmailAction {
		targetAddresses
		subjectTemplate
		bodyTemplate
		isHtml
	}
}
`

func getChannelAction(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getChannelActionResponse, error) {
	req := &graphql.Request{
		OpName: "getChannelAction",
		Query:  getChannelAction_Operation,
		Variables: &__getChannelActionInput{
			Id: id,
		},
	}
	var err error

	var data getChannelActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getCloudInfo.
const getCloudInfo_Operation = `
query getCloudInfo {
	cloud: currentCustomer {
		cloudInfo {
			... CloudInfo
		}
	}
}
fragment CloudInfo on CloudInfo {
	accountId
	region
	provider
}
`

func getCloudInfo(
	ctx context.Context,
	client graphql.Client,
) (*getCloudInfoResponse, error) {
	req := &graphql.Request{
		OpName: "getCloudInfo",
		Query:  getCloudInfo_Operation,
	}
	var err error

	var data getCloudInfoResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getCurrentCustomer.
const getCurrentCustomer_Operation = `
query getCurrentCustomer {
	customer: currentCustomer {
		users {
			... User
		}
	}
}
fragment User on User {
	id
	email
	comment
	label
}
`

func getCurrentCustomer(
	ctx context.Context,
	client graphql.Client,
) (*getCurrentCustomerResponse, error) {
	req := &graphql.Request{
		OpName: "getCurrentCustomer",
		Query:  getCurrentCustomer_Operation,
	}
	var err error

	var data getCurrentCustomerResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getDashboard.
const getDashboard_Operation = `
query getDashboard ($id: ObjectId!) {
	dashboard(id: $id) {
		... Dashboard
	}
}
fragment Dashboard on Dashboard {
	id
	name
	iconUrl
	workspaceId
	managedById
	folderId
	layout
	stages {
		id
		input {
			inputName
			inputRole
			datasetId
			datasetPath
			stageId
		}
		params
		layout
		pipeline
	}
	parameters {
		id
		name
		defaultValue {
			... valueFields
		}
		valueKind {
			type
			keyForDatasetId
			arrayItemType {
				type
				keyForDatasetId
			}
		}
	}
	parameterValues {
		id
		value {
			... valueFields
		}
	}
}
fragment valueFields on Value {
	bool
	float64
	int64
	string
	array {
		value {
			... primitiveValueFields
		}
	}
	link {
		datasetId
		primaryKeyValue {
			name
			value {
				... primitiveValueFields
			}
		}
		storedLabel
	}
	datasetref {
		datasetId
		datasetPath
		stageId
	}
}
fragment primitiveValueFields on PrimitiveValue {
	bool
	float64
	int64
	string
}
`

func getDashboard(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getDashboardResponse, error) {
	req := &graphql.Request{
		OpName: "getDashboard",
		Query:  getDashboard_Operation,
		Variables: &__getDashboardInput{
			Id: id,
		},
	}
	var err error

	var data getDashboardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getDashboardLink.
const getDashboardLink_Operation = `
query getDashboardLink ($id: ObjectId!) {
	dashboardLink(id: $id) {
		... DashboardLink
	}
}
fragment DashboardLink on DashboardLink {
	id
	name
	workspaceId
	folderId
	managedById
	description
	fromDashboard: fromDashboardId
	toDashboard: toDashboardId
	fromCard
	linkLabel
}
`

func getDashboardLink(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getDashboardLinkResponse, error) {
	req := &graphql.Request{
		OpName: "getDashboardLink",
		Query:  getDashboardLink_Operation,
		Variables: &__getDashboardLinkInput{
			Id: id,
		},
	}
	var err error

	var data getDashboardLinkResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getDataset.
const getDataset_Operation = `
query getDataset ($id: ObjectId!) {
	dataset(id: $id) {
		... Dataset
	}
}
fragment Dataset on Dataset {
	workspaceId
	id
	name
	freshnessDesired
	description
	iconUrl
	accelerationDisabled
	version
	updatedDate
	pathCost
	source
	managedById
	onDemandMaterializationLength
	dataTableViewState
	foreignKeys {
		label
		targetDataset
		srcFields
		dstFields
	}
	transform {
		current {
			query {
				outputStage
				stages {
					... StageQuery
				}
			}
		}
	}
	typedef {
		label
		def {
			anykey
			fields {
				name
				type {
					rep
					nullable
				}
				isEnum
				isSearchable
				isHidden
				isConst
				isMetric
			}
		}
	}
	sourceTable {
		schema
		partitions {
			name
		}
		sourceUpdateTableName
		isInsertOnly
		batchSeqField
		validFromField
		fields {
			name
			sqlType
		}
	}
	correlationTagMappings {
		tag
		path {
			column
			path
		}
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`

func getDataset(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getDatasetResponse, error) {
	req := &graphql.Request{
		OpName: "getDataset",
		Query:  getDataset_Operation,
		Variables: &__getDatasetInput{
			Id: id,
		},
	}
	var err error

	var data getDatasetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getDatasetCorrelationTags.
const getDatasetCorrelationTags_Operation = `
query getDatasetCorrelationTags ($datasetId: ObjectId!) {
	correlationTags: dataset(id: $datasetId) {
		correlationTagMappings {
			tag
			path {
				column
				path
			}
		}
	}
}
`

func getDatasetCorrelationTags(
	ctx context.Context,
	client graphql.Client,
	datasetId string,
) (*getDatasetCorrelationTagsResponse, error) {
	req := &graphql.Request{
		OpName: "getDatasetCorrelationTags",
		Query:  getDatasetCorrelationTags_Operation,
		Variables: &__getDatasetCorrelationTagsInput{
			DatasetId: datasetId,
		},
	}
	var err error

	var data getDatasetCorrelationTagsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getDatasetOutboundShare.
const getDatasetOutboundShare_Operation = `
query getDatasetOutboundShare ($id: ObjectId!) {
	datasetOutboundShare(id: $id) {
		... DatasetOutboundShare
	}
}
fragment DatasetOutboundShare on DatasetOutboundShare {
	id
	name
	description
	workspaceId
	folderId
	datasetID
	outboundShareID
	schemaName
	viewName
	freshnessGoal
	status {
		state
		error
	}
}
`

func getDatasetOutboundShare(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getDatasetOutboundShareResponse, error) {
	req := &graphql.Request{
		OpName: "getDatasetOutboundShare",
		Query:  getDatasetOutboundShare_Operation,
		Variables: &__getDatasetOutboundShareInput{
			Id: id,
		},
	}
	var err error

	var data getDatasetOutboundShareResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getDatasetQueryOutput.
const getDatasetQueryOutput_Operation = `
query getDatasetQueryOutput ($query: [StageInput!]!, $params: QueryParams!) {
	taskResult: datasetQueryOutput(query: $query, params: $params) {
		... TaskResult
	}
}
fragment TaskResult on TaskResult {
	queryId
	stageId
	startTime
	endTime
	resultCursor
	resultSchema {
		typedefDefinition
	}
}
`

func getDatasetQueryOutput(
	ctx context.Context,
	client graphql.Client,
	query []*StageInput,
	params QueryParams,
) (*getDatasetQueryOutputResponse, error) {
	req := &graphql.Request{
		OpName: "getDatasetQueryOutput",
		Query:  getDatasetQueryOutput_Operation,
		Variables: &__getDatasetQueryOutputInput{
			Query:  query,
			Params: params,
		},
	}
	var err error

	var data getDatasetQueryOutputResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getDatastream.
const getDatastream_Operation = `
query getDatastream ($id: ObjectId!) {
	datastream(id: $id) {
		... Datastream
	}
}
fragment Datastream on Datastream {
	id
	name
	iconUrl
	description
	workspaceId
	datasetId
}
`

func getDatastream(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getDatastreamResponse, error) {
	req := &graphql.Request{
		OpName: "getDatastream",
		Query:  getDatastream_Operation,
		Variables: &__getDatastreamInput{
			Id: id,
		},
	}
	var err error

	var data getDatastreamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getDatastreamToken.
const getDatastreamToken_Operation = `
query getDatastreamToken ($id: String!) {
	datastreamToken(id: $id) {
		... DatastreamToken
	}
}
fragment DatastreamToken on DatastreamToken {
	id
	name
	description
	disabled
	datastreamId
	secret
}
`

func getDatastreamToken(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getDatastreamTokenResponse, error) {
	req := &graphql.Request{
		OpName: "getDatastreamToken",
		Query:  getDatastreamToken_Operation,
		Variables: &__getDatastreamTokenInput{
			Id: id,
		},
	}
	var err error

	var data getDatastreamTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getDefaultDashboard.
const getDefaultDashboard_Operation = `
query getDefaultDashboard ($dsid: ObjectId!) {
	defaultDashboard(dsid: $dsid)
}
`

func getDefaultDashboard(
	ctx context.Context,
	client graphql.Client,
	dsid string,
) (*getDefaultDashboardResponse, error) {
	req := &graphql.Request{
		OpName: "getDefaultDashboard",
		Query:  getDefaultDashboard_Operation,
		Variables: &__getDefaultDashboardInput{
			Dsid: dsid,
		},
	}
	var err error

	var data getDefaultDashboardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getDeferredForeignKey.
const getDeferredForeignKey_Operation = `
query getDeferredForeignKey ($id: ObjectId!) {
	deferredForeignKey(id: $id) {
		... DeferredForeignKey
	}
}
fragment DeferredForeignKey on DeferredForeignKey {
	id
	workspaceId
	sourceDataset {
		datasetId
	}
	targetDataset {
		datasetId
	}
	srcFields
	dstFields
	label
	resolution {
		sourceId
		targetId
	}
	status {
		errorText
	}
}
`

func getDeferredForeignKey(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getDeferredForeignKeyResponse, error) {
	req := &graphql.Request{
		OpName: "getDeferredForeignKey",
		Query:  getDeferredForeignKey_Operation,
		Variables: &__getDeferredForeignKeyInput{
			Id: id,
		},
	}
	var err error

	var data getDeferredForeignKeyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getFiledrop.
const getFiledrop_Operation = `
query getFiledrop ($id: ObjectId!) {
	filedrop(id: $id) {
		... Filedrop
	}
}
fragment Filedrop on Filedrop {
	id
	name
	iconUrl
	description
	workspaceId
	status
	datastreamID
	config {
		provider {
			__typename
			... on FiledropProviderAwsConfig {
				region
				roleArn
			}
		}
	}
	endpoint {
		__typename
		... on FiledropS3Endpoint {
			arn
			bucket
			prefix
		}
	}
}
`

func getFiledrop(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getFiledropResponse, error) {
	req := &graphql.Request{
		OpName: "getFiledrop",
		Query:  getFiledrop_Operation,
		Variables: &__getFiledropInput{
			Id: id,
		},
	}
	var err error

	var data getFiledropResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getFolder.
const getFolder_Operation = `
query getFolder ($id: ObjectId!) {
	folder(id: $id) {
		... Folder
	}
}
fragment Folder on Folder {
	id
	name
	iconUrl
	description
	workspaceId
}
`

func getFolder(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getFolderResponse, error) {
	req := &graphql.Request{
		OpName: "getFolder",
		Query:  getFolder_Operation,
		Variables: &__getFolderInput{
			Id: id,
		},
	}
	var err error

	var data getFolderResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getIngestInfo.
const getIngestInfo_Operation = `
query getIngestInfo {
	ingest: currentCustomer {
		ingestInfo {
			... IngestInfo
		}
	}
}
fragment IngestInfo on IngestInfo {
	collectUrl
	domain
	scheme
	port
}
`

func getIngestInfo(
	ctx context.Context,
	client graphql.Client,
) (*getIngestInfoResponse, error) {
	req := &graphql.Request{
		OpName: "getIngestInfo",
		Query:  getIngestInfo_Operation,
	}
	var err error

	var data getIngestInfoResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getLayeredSettingRecord.
const getLayeredSettingRecord_Operation = `
query getLayeredSettingRecord ($id: ObjectId!) {
	layeredSettingRecord(id: $id) {
		... LayeredSettingRecord
	}
}
fragment LayeredSettingRecord on LayeredSettingRecord {
	settingAndTargetScope {
		... SettingAndTargetScope
	}
	value {
		... PrimitiveValue
	}
	id
	name
	description
	iconUrl
	workspaceId
	managedById
	folderId
}
fragment SettingAndTargetScope on SettingAndTargetScope {
	setting
	target {
		... LayeredSettingRecordTarget
	}
}
fragment PrimitiveValue on PrimitiveValue {
	bool
	float64
	int64
	string
	timestamp
	duration
}
fragment LayeredSettingRecordTarget on LayeredSettingRecordTarget {
	customerId
	workspaceId
	folderId
	appId
	monitorId
	worksheetId
	dashboardId
	datasetId
	datastreamId
	userId
}
`

func getLayeredSettingRecord(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getLayeredSettingRecordResponse, error) {
	req := &graphql.Request{
		OpName: "getLayeredSettingRecord",
		Query:  getLayeredSettingRecord_Operation,
		Variables: &__getLayeredSettingRecordInput{
			Id: id,
		},
	}
	var err error

	var data getLayeredSettingRecordResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getMonitor.
const getMonitor_Operation = `
query getMonitor ($id: ObjectId!) {
	monitor(id: $id) {
		... Monitor
	}
}
fragment Monitor on Monitor {
	workspaceId
	id
	name
	description
	comment
	iconUrl
	isTemplate
	disabled
	freshnessGoal
	useDefaultFreshness
	source
	definition
	managedById
	query {
		outputStage
		stages {
			... StageQuery
		}
	}
	rule {
		__typename
		sourceColumn
		groupByGroups {
			groupName
			columns
		}
		... on MonitorRuleCount {
			compareFunction
			compareValues
			lookbackTime
		}
		... on MonitorRuleChange {
			changeType
			compareFunction
			compareValues
			aggregateFunction
			lookbackTime
			baselineTime
		}
		... on MonitorRuleFacet {
			facetFunction
			facetValues
			timeFunction
			timeValue
			lookbackTime
		}
		... on MonitorRuleThreshold {
			compareFunction
			compareValues
			lookbackTime
			thresholdAggFunction
		}
		... on MonitorRulePromote {
			kindField
			descriptionField
			primaryKey
		}
		... on MonitorRuleLog {
			compareFunction
			compareValues
			lookbackTime
			expressionSummary
			logStageId
			sourceLogDatasetId
		}
	}
	notificationSpec {
		merge
		importance
		notifyOnReminder
		reminderFrequency
		notifyOnClose
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`

func getMonitor(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getMonitorResponse, error) {
	req := &graphql.Request{
		OpName: "getMonitor",
		Query:  getMonitor_Operation,
		Variables: &__getMonitorInput{
			Id: id,
		},
	}
	var err error

	var data getMonitorResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getMonitorAction.
const getMonitorAction_Operation = `
query getMonitorAction ($id: ObjectId!) {
	monitorAction(id: $id) {
		__typename
		... MonitorAction
	}
}
fragment MonitorAction on MonitorAction {
	id
	name
	iconUrl
	description
	workspaceId
	rateLimit
	notifyOnClose
	isPrivate
	__typename
	... on EmailAction {
		targetAddresses
		subjectTemplate
		bodyTemplate
		isHtml
	}
	... on WebhookAction {
		urlTemplate
		method
		headers {
			header
			valueTemplate
		}
		bodyTemplate
	}
}
`

func getMonitorAction(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getMonitorActionResponse, error) {
	req := &graphql.Request{
		OpName: "getMonitorAction",
		Query:  getMonitorAction_Operation,
		Variables: &__getMonitorActionInput{
			Id: id,
		},
	}
	var err error

	var data getMonitorActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getMonitorActionAttachment.
const getMonitorActionAttachment_Operation = `
query getMonitorActionAttachment ($id: ObjectId!) {
	monitorActionAttachment(id: $id) {
		... MonitorActionAttachment
	}
}
fragment MonitorActionAttachment on MonitorActionAttachment {
	monitorID
	actionID
	id
	workspaceId
	name
	iconUrl
	description
}
`

func getMonitorActionAttachment(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getMonitorActionAttachmentResponse, error) {
	req := &graphql.Request{
		OpName: "getMonitorActionAttachment",
		Query:  getMonitorActionAttachment_Operation,
		Variables: &__getMonitorActionAttachmentInput{
			Id: id,
		},
	}
	var err error

	var data getMonitorActionAttachmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getMonitorV2.
const getMonitorV2_Operation = `
query getMonitorV2 ($id: ObjectId!) {
	monitorV2(id: $id) {
		... MonitorV2
	}
}
fragment MonitorV2 on MonitorV2 {
	id
	workspaceId
	createdBy
	createdDate
	name
	iconUrl
	description
	managedById
	folderId
	rollupStatus
	ruleKind
	definition {
		... MonitorV2Definition
	}
	actionRules {
		... MonitorV2ActionRule
	}
}
fragment MonitorV2Definition on MonitorV2Definition {
	inputQuery {
		outputStage
		stages {
			... StageQuery
		}
	}
	rules {
		... MonitorV2Rule
	}
	lookbackTime
	dataStabilizationDelay
	groupings {
		... MonitorV2Column
	}
	scheduling {
		... MonitorV2Scheduling
	}
}
fragment MonitorV2ActionRule on MonitorV2ActionRule {
	actionID
	levels
	sendEndNotifications
	sendRemindersInterval
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
fragment MonitorV2Rule on MonitorV2Rule {
	level
	count {
		... MonitorV2CountRule
	}
	threshold {
		... MonitorV2ThresholdRule
	}
	promote {
		... MonitorV2PromoteRule
	}
}
fragment MonitorV2Column on MonitorV2Column {
	linkColumn {
		... MonitorV2LinkColumn
	}
	columnPath {
		... MonitorV2ColumnPath
	}
}
fragment MonitorV2Scheduling on MonitorV2Scheduling {
	interval {
		... MonitorV2IntervalSchedule
	}
	transform {
		... MonitorV2TransformSchedule
	}
}
fragment MonitorV2CountRule on MonitorV2CountRule {
	compareValues {
		... MonitorV2Comparison
	}
	compareGroups {
		... MonitorV2ColumnComparison
	}
}
fragment MonitorV2ThresholdRule on MonitorV2ThresholdRule {
	compareValues {
		... MonitorV2Comparison
	}
	valueColumnName
	aggregation
	compareGroups {
		... MonitorV2ColumnComparison
	}
}
fragment MonitorV2PromoteRule on MonitorV2PromoteRule {
	compareColumns {
		... MonitorV2ColumnComparison
	}
}
fragment MonitorV2LinkColumn on MonitorV2LinkColumn {
	name
	meta {
		... MonitorV2LinkColumnMeta
	}
}
fragment MonitorV2ColumnPath on MonitorV2ColumnPath {
	name
	path
}
fragment MonitorV2IntervalSchedule on MonitorV2IntervalSchedule {
	interval
	randomize
}
fragment MonitorV2TransformSchedule on MonitorV2TransformSchedule {
	freshnessGoal
}
fragment MonitorV2Comparison on MonitorV2Comparison {
	compareFn
	compareValue {
		... PrimitiveValue
	}
}
fragment MonitorV2ColumnComparison on MonitorV2ColumnComparison {
	column {
		... MonitorV2Column
	}
	compareValues {
		... MonitorV2Comparison
	}
}
fragment MonitorV2LinkColumnMeta on MonitorV2LinkColumnMeta {
	srcFields {
		... MonitorV2ColumnPath
	}
	dstFields
	targetDataset
}
fragment PrimitiveValue on PrimitiveValue {
	bool
	float64
	int64
	string
	timestamp
	duration
}
`

func getMonitorV2(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getMonitorV2Response, error) {
	req := &graphql.Request{
		OpName: "getMonitorV2",
		Query:  getMonitorV2_Operation,
		Variables: &__getMonitorV2Input{
			Id: id,
		},
	}
	var err error

	var data getMonitorV2Response
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getMonitorV2Action.
const getMonitorV2Action_Operation = `
query getMonitorV2Action ($id: ObjectId!) {
	monitorV2Action(id: $id) {
		... MonitorV2Action
	}
}
fragment MonitorV2Action on MonitorV2Action {
	inline
	type
	email {
		... MonitorV2EmailAction
	}
	webhook {
		... MonitorV2WebhookAction
	}
	id
	workspaceId
	name
	iconUrl
	description
	createdBy
	createdDate
}
fragment MonitorV2EmailAction on MonitorV2EmailAction {
	users
	addresses
	subject
	body
	fragments
}
fragment MonitorV2WebhookAction on MonitorV2WebhookAction {
	headers {
		... MonitorV2WebhookHeader
	}
	body
	fragments
	url
	method
}
fragment MonitorV2WebhookHeader on MonitorV2WebhookHeader {
	header
	value
}
`

func getMonitorV2Action(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getMonitorV2ActionResponse, error) {
	req := &graphql.Request{
		OpName: "getMonitorV2Action",
		Query:  getMonitorV2Action_Operation,
		Variables: &__getMonitorV2ActionInput{
			Id: id,
		},
	}
	var err error

	var data getMonitorV2ActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getPoller.
const getPoller_Operation = `
query getPoller ($id: ObjectId!) {
	poller(id: $id) {
		... Poller
	}
}
fragment Poller on Poller {
	id
	workspaceId
	customerId
	datastreamId
	disabled
	kind
	config {
		__typename
		name
		retries
		interval
		tags
		chunk {
			enabled
			size
		}
		... on PollerPubSubConfig {
			projectId
			jsonKey
			subscriptionId
		}
		... on PollerHTTPConfig {
			method
			body
			endpoint
			contentType
			headers
			template {
				... HttpRequestConfig
			}
			requests {
				... HttpRequestConfig
			}
			rules {
				match {
					... HttpRequestConfig
				}
				follow
				decoder {
					type
				}
			}
			timestamps {
				name
				source
				format
				offset
				truncate
			}
		}
		... on PollerGCPMonitoringConfig {
			projectId
			jsonKey
			includeMetricTypePrefixes
			excludeMetricTypePrefixes
			rateLimit
			totalLimit
		}
		... on PollerMongoDBAtlasConfig {
			publicKey
			privateKey
			includeGroups
			excludeGroups
		}
		... on PollerCloudWatchMetricsConfig {
			period
			delay
			region
			assumeRoleArn
			queries {
				namespace
				metricNames
				dimensions {
					name
					value
				}
				resourceFilter {
					resourceType
					pattern
					dimensionName
					tagFilters {
						key
						values
					}
				}
			}
		}
		... on PollerAWSSnapshotConfig {
			region
			assumeRoleArn
			includeActions
		}
	}
}
fragment HttpRequestConfig on PollerHTTPRequestConfig {
	url
	method
	username
	password
	authScheme
	body
	headers
	params
}
`

func getPoller(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getPollerResponse, error) {
	req := &graphql.Request{
		OpName: "getPoller",
		Query:  getPoller_Operation,
		Variables: &__getPollerInput{
			Id: id,
		},
	}
	var err error

	var data getPollerResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getPreferredPath.
const getPreferredPath_Operation = `
query getPreferredPath ($id: ObjectId!) {
	preferredPathWithStatus: preferredPath(id: $id) {
		... PreferredPathWithStatus
	}
}
fragment PreferredPathWithStatus on PreferredPathWithStatus {
	path {
		... PreferredPath
	}
	error
}
fragment PreferredPath on PreferredPath {
	id
	name
	iconUrl
	description
	workspaceId
	folderId
	sourceDataset
	path {
		linkId
		reverse
		linkName
		reverseFromDataset
	}
}
`

func getPreferredPath(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getPreferredPathResponse, error) {
	req := &graphql.Request{
		OpName: "getPreferredPath",
		Query:  getPreferredPath_Operation,
		Variables: &__getPreferredPathInput{
			Id: id,
		},
	}
	var err error

	var data getPreferredPathResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getRbacDefaultGroup.
const getRbacDefaultGroup_Operation = `
query getRbacDefaultGroup {
	rbacDefaultGroup {
		... RbacGroup
	}
}
fragment RbacGroup on RbacGroup {
	id
	name
	description
}
`

func getRbacDefaultGroup(
	ctx context.Context,
	client graphql.Client,
) (*getRbacDefaultGroupResponse, error) {
	req := &graphql.Request{
		OpName: "getRbacDefaultGroup",
		Query:  getRbacDefaultGroup_Operation,
	}
	var err error

	var data getRbacDefaultGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getRbacGroup.
const getRbacGroup_Operation = `
query getRbacGroup ($id: ORN!) {
	rbacGroup(id: $id) {
		... RbacGroup
	}
}
fragment RbacGroup on RbacGroup {
	id
	name
	description
}
`

func getRbacGroup(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getRbacGroupResponse, error) {
	req := &graphql.Request{
		OpName: "getRbacGroup",
		Query:  getRbacGroup_Operation,
		Variables: &__getRbacGroupInput{
			Id: id,
		},
	}
	var err error

	var data getRbacGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getRbacGroupmember.
const getRbacGroupmember_Operation = `
query getRbacGroupmember ($id: ORN!) {
	rbacGroupmember(id: $id) {
		... RbacGroupmember
	}
}
fragment RbacGroupmember on RbacGroupmember {
	id
	description
	groupId
	memberUserId
	memberGroupId
}
`

func getRbacGroupmember(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getRbacGroupmemberResponse, error) {
	req := &graphql.Request{
		OpName: "getRbacGroupmember",
		Query:  getRbacGroupmember_Operation,
		Variables: &__getRbacGroupmemberInput{
			Id: id,
		},
	}
	var err error

	var data getRbacGroupmemberResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getRbacGroups.
const getRbacGroups_Operation = `
query getRbacGroups {
	rbacGroups {
		... RbacGroup
	}
}
fragment RbacGroup on RbacGroup {
	id
	name
	description
}
`

func getRbacGroups(
	ctx context.Context,
	client graphql.Client,
) (*getRbacGroupsResponse, error) {
	req := &graphql.Request{
		OpName: "getRbacGroups",
		Query:  getRbacGroups_Operation,
	}
	var err error

	var data getRbacGroupsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getRbacStatement.
const getRbacStatement_Operation = `
query getRbacStatement ($id: ORN!) {
	rbacStatement(id: $id) {
		... RbacStatement
	}
}
fragment RbacStatement on RbacStatement {
	id
	description
	subject {
		userId
		groupId
		all
	}
	object {
		objectId
		folderId
		workspaceId
		type
		name
		owner
		all
	}
	role
	version
}
`

func getRbacStatement(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getRbacStatementResponse, error) {
	req := &graphql.Request{
		OpName: "getRbacStatement",
		Query:  getRbacStatement_Operation,
		Variables: &__getRbacStatementInput{
			Id: id,
		},
	}
	var err error

	var data getRbacStatementResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getSnowflakeOutboundShare.
const getSnowflakeOutboundShare_Operation = `
query getSnowflakeOutboundShare ($id: ObjectId!) {
	share: snowflakeOutboundShare(id: $id) {
		... SnowflakeOutboundShare
	}
}
fragment SnowflakeOutboundShare on SnowflakeOutboundShare {
	id
	name
	description
	workspaceId
	shareName
	accounts {
		... SnowflakeAccount
	}
}
fragment SnowflakeAccount on SnowflakeAccount {
	organization
	account
}
`

func getSnowflakeOutboundShare(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getSnowflakeOutboundShareResponse, error) {
	req := &graphql.Request{
		OpName: "getSnowflakeOutboundShare",
		Query:  getSnowflakeOutboundShare_Operation,
		Variables: &__getSnowflakeOutboundShareInput{
			Id: id,
		},
	}
	var err error

	var data getSnowflakeOutboundShareResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getTerraform.
const getTerraform_Operation = `
query getTerraform ($id: ObjectId!, $ty: TerraformObjectType!) {
	terraform: getTerraform(id: $id, type: $ty) {
		... TerraformDefinition
	}
}
fragment TerraformDefinition on TerraformDefinition {
	dataSource
	resource
	importId
	importName
}
`

func getTerraform(
	ctx context.Context,
	client graphql.Client,
	id string,
	ty TerraformObjectType,
) (*getTerraformResponse, error) {
	req := &graphql.Request{
		OpName: "getTerraform",
		Query:  getTerraform_Operation,
		Variables: &__getTerraformInput{
			Id: id,
			Ty: ty,
		},
	}
	var err error

	var data getTerraformResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getUser.
const getUser_Operation = `
query getUser ($id: UserId!) {
	user(id: $id) {
		... User
	}
}
fragment User on User {
	id
	email
	comment
	label
}
`

func getUser(
	ctx context.Context,
	client graphql.Client,
	id types.UserIdScalar,
) (*getUserResponse, error) {
	req := &graphql.Request{
		OpName: "getUser",
		Query:  getUser_Operation,
		Variables: &__getUserInput{
			Id: id,
		},
	}
	var err error

	var data getUserResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getWorksheet.
const getWorksheet_Operation = `
query getWorksheet ($id: ObjectId!) {
	worksheet(id: $id) {
		... Worksheet
	}
}
fragment Worksheet on Worksheet {
	id
	label
	icon
	managedById
	workspaceId
	stages {
		... StageQuery
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`

func getWorksheet(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getWorksheetResponse, error) {
	req := &graphql.Request{
		OpName: "getWorksheet",
		Query:  getWorksheet_Operation,
		Variables: &__getWorksheetInput{
			Id: id,
		},
	}
	var err error

	var data getWorksheetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getWorkspace.
const getWorkspace_Operation = `
query getWorkspace ($id: ObjectId!) {
	workspace(id: $id) {
		... Workspace
	}
}
fragment Workspace on Project {
	id
	label
}
`

func getWorkspace(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getWorkspaceResponse, error) {
	req := &graphql.Request{
		OpName: "getWorkspace",
		Query:  getWorkspace_Operation,
		Variables: &__getWorkspaceInput{
			Id: id,
		},
	}
	var err error

	var data getWorkspaceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listDatasets.
const listDatasets_Operation = `
query listDatasets {
	datasets: projects {
		datasets {
			... Dataset
		}
	}
}
fragment Dataset on Dataset {
	workspaceId
	id
	name
	freshnessDesired
	description
	iconUrl
	accelerationDisabled
	version
	updatedDate
	pathCost
	source
	managedById
	onDemandMaterializationLength
	dataTableViewState
	foreignKeys {
		label
		targetDataset
		srcFields
		dstFields
	}
	transform {
		current {
			query {
				outputStage
				stages {
					... StageQuery
				}
			}
		}
	}
	typedef {
		label
		def {
			anykey
			fields {
				name
				type {
					rep
					nullable
				}
				isEnum
				isSearchable
				isHidden
				isConst
				isMetric
			}
		}
	}
	sourceTable {
		schema
		partitions {
			name
		}
		sourceUpdateTableName
		isInsertOnly
		batchSeqField
		validFromField
		fields {
			name
			sqlType
		}
	}
	correlationTagMappings {
		tag
		path {
			column
			path
		}
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`

func listDatasets(
	ctx context.Context,
	client graphql.Client,
) (*listDatasetsResponse, error) {
	req := &graphql.Request{
		OpName: "listDatasets",
		Query:  listDatasets_Operation,
	}
	var err error

	var data listDatasetsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listDatasetsIdNameOnly.
const listDatasetsIdNameOnly_Operation = `
query listDatasetsIdNameOnly {
	datasets: datasetSearch {
		dataset {
			... DatasetIdName
		}
	}
}
fragment DatasetIdName on Dataset {
	name
	id
}
`

func listDatasetsIdNameOnly(
	ctx context.Context,
	client graphql.Client,
) (*listDatasetsIdNameOnlyResponse, error) {
	req := &graphql.Request{
		OpName: "listDatasetsIdNameOnly",
		Query:  listDatasetsIdNameOnly_Operation,
	}
	var err error

	var data listDatasetsIdNameOnlyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listUsers.
const listUsers_Operation = `
query listUsers {
	users: currentCustomer {
		users {
			... User
		}
	}
}
fragment User on User {
	id
	email
	comment
	label
}
`

func listUsers(
	ctx context.Context,
	client graphql.Client,
) (*listUsersResponse, error) {
	req := &graphql.Request{
		OpName: "listUsers",
		Query:  listUsers_Operation,
	}
	var err error

	var data listUsersResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listWorksheetsIdLabelOnly.
const listWorksheetsIdLabelOnly_Operation = `
query listWorksheetsIdLabelOnly ($workspaceId: ObjectId!) {
	worksheetSearch(terms: {workspaceId:[$workspaceId]}) {
		worksheets {
			worksheet {
				... WorksheetIdLabel
			}
		}
	}
}
fragment WorksheetIdLabel on Worksheet {
	id
	label
}
`

func listWorksheetsIdLabelOnly(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
) (*listWorksheetsIdLabelOnlyResponse, error) {
	req := &graphql.Request{
		OpName: "listWorksheetsIdLabelOnly",
		Query:  listWorksheetsIdLabelOnly_Operation,
		Variables: &__listWorksheetsIdLabelOnlyInput{
			WorkspaceId: workspaceId,
		},
	}
	var err error

	var data listWorksheetsIdLabelOnlyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by listWorkspaces.
const listWorkspaces_Operation = `
query listWorkspaces {
	workspaces: projects {
		... Workspace
	}
}
fragment Workspace on Project {
	id
	label
}
`

func listWorkspaces(
	ctx context.Context,
	client graphql.Client,
) (*listWorkspacesResponse, error) {
	req := &graphql.Request{
		OpName: "listWorkspaces",
		Query:  listWorkspaces_Operation,
	}
	var err error

	var data listWorkspacesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by lookupApp.
const lookupApp_Operation = `
query lookupApp ($workspaceId: ObjectId!, $name: String!) {
	apps(workspaceId: $workspaceId, name: $name) {
		... App
	}
}
fragment App on App {
	id
	name
	iconUrl
	description
	workspaceId
	folderId
	config {
		moduleId
		version
	}
	status {
		state
		internalError
	}
	outputs
}
`

// LookupApp retrieves app by name.
// TODO: this should be bound to a folderId, not a workspace.
func lookupApp(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	name string,
) (*lookupAppResponse, error) {
	req := &graphql.Request{
		OpName: "lookupApp",
		Query:  lookupApp_Operation,
		Variables: &__lookupAppInput{
			WorkspaceId: workspaceId,
			Name:        name,
		},
	}
	var err error

	var data lookupAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by lookupDataset.
const lookupDataset_Operation = `
query lookupDataset ($workspaceId: ObjectId!, $name: String!) {
	dataset: workspace(id: $workspaceId) {
		dataset(label: $name) {
			... Dataset
		}
	}
}
fragment Dataset on Dataset {
	workspaceId
	id
	name
	freshnessDesired
	description
	iconUrl
	accelerationDisabled
	version
	updatedDate
	pathCost
	source
	managedById
	onDemandMaterializationLength
	dataTableViewState
	foreignKeys {
		label
		targetDataset
		srcFields
		dstFields
	}
	transform {
		current {
			query {
				outputStage
				stages {
					... StageQuery
				}
			}
		}
	}
	typedef {
		label
		def {
			anykey
			fields {
				name
				type {
					rep
					nullable
				}
				isEnum
				isSearchable
				isHidden
				isConst
				isMetric
			}
		}
	}
	sourceTable {
		schema
		partitions {
			name
		}
		sourceUpdateTableName
		isInsertOnly
		batchSeqField
		validFromField
		fields {
			name
			sqlType
		}
	}
	correlationTagMappings {
		tag
		path {
			column
			path
		}
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`

func lookupDataset(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	name string,
) (*lookupDatasetResponse, error) {
	req := &graphql.Request{
		OpName: "lookupDataset",
		Query:  lookupDataset_Operation,
		Variables: &__lookupDatasetInput{
			WorkspaceId: workspaceId,
			Name:        name,
		},
	}
	var err error

	var data lookupDatasetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by lookupDatastream.
const lookupDatastream_Operation = `
query lookupDatastream ($workspaceId: ObjectId!, $name: String!) {
	datastream: workspace(id: $workspaceId) {
		datastream(name: $name) {
			... Datastream
		}
	}
}
fragment Datastream on Datastream {
	id
	name
	iconUrl
	description
	workspaceId
	datasetId
}
`

func lookupDatastream(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	name string,
) (*lookupDatastreamResponse, error) {
	req := &graphql.Request{
		OpName: "lookupDatastream",
		Query:  lookupDatastream_Operation,
		Variables: &__lookupDatastreamInput{
			WorkspaceId: workspaceId,
			Name:        name,
		},
	}
	var err error

	var data lookupDatastreamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by lookupFolder.
const lookupFolder_Operation = `
query lookupFolder ($workspaceId: ObjectId!, $name: String!) {
	folder: workspace(id: $workspaceId) {
		folder(name: $name) {
			... Folder
		}
	}
}
fragment Folder on Folder {
	id
	name
	iconUrl
	description
	workspaceId
}
`

func lookupFolder(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	name string,
) (*lookupFolderResponse, error) {
	req := &graphql.Request{
		OpName: "lookupFolder",
		Query:  lookupFolder_Operation,
		Variables: &__lookupFolderInput{
			WorkspaceId: workspaceId,
			Name:        name,
		},
	}
	var err error

	var data lookupFolderResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by lookupModuleVersions.
const lookupModuleVersions_Operation = `
query lookupModuleVersions ($id: String!) {
	moduleVersions(id: $id) {
		... ModuleVersion
	}
}
fragment ModuleVersion on ModuleVersion {
	version
}
`

func lookupModuleVersions(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*lookupModuleVersionsResponse, error) {
	req := &graphql.Request{
		OpName: "lookupModuleVersions",
		Query:  lookupModuleVersions_Operation,
		Variables: &__lookupModuleVersionsInput{
			Id: id,
		},
	}
	var err error

	var data lookupModuleVersionsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by lookupMonitor.
const lookupMonitor_Operation = `
query lookupMonitor ($workspaceId: ObjectId!, $name: String!) {
	monitor: workspace(id: $workspaceId) {
		monitor(name: $name) {
			... Monitor
		}
	}
}
fragment Monitor on Monitor {
	workspaceId
	id
	name
	description
	comment
	iconUrl
	isTemplate
	disabled
	freshnessGoal
	useDefaultFreshness
	source
	definition
	managedById
	query {
		outputStage
		stages {
			... StageQuery
		}
	}
	rule {
		__typename
		sourceColumn
		groupByGroups {
			groupName
			columns
		}
		... on MonitorRuleCount {
			compareFunction
			compareValues
			lookbackTime
		}
		... on MonitorRuleChange {
			changeType
			compareFunction
			compareValues
			aggregateFunction
			lookbackTime
			baselineTime
		}
		... on MonitorRuleFacet {
			facetFunction
			facetValues
			timeFunction
			timeValue
			lookbackTime
		}
		... on MonitorRuleThreshold {
			compareFunction
			compareValues
			lookbackTime
			thresholdAggFunction
		}
		... on MonitorRulePromote {
			kindField
			descriptionField
			primaryKey
		}
		... on MonitorRuleLog {
			compareFunction
			compareValues
			lookbackTime
			expressionSummary
			logStageId
			sourceLogDatasetId
		}
	}
	notificationSpec {
		merge
		importance
		notifyOnReminder
		reminderFrequency
		notifyOnClose
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`

func lookupMonitor(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	name string,
) (*lookupMonitorResponse, error) {
	req := &graphql.Request{
		OpName: "lookupMonitor",
		Query:  lookupMonitor_Operation,
		Variables: &__lookupMonitorInput{
			WorkspaceId: workspaceId,
			Name:        name,
		},
	}
	var err error

	var data lookupMonitorResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by lookupMonitorV2.
const lookupMonitorV2_Operation = `
query lookupMonitorV2 ($workspaceId: ObjectId, $folderId: ObjectId, $nameExact: String, $nameSubstring: String) {
	monitorV2s: searchMonitorV2(workspaceId: $workspaceId, folderId: $folderId, nameExact: $nameExact, nameSubstring: $nameSubstring) {
		... MonitorV2SearchResult
	}
}
fragment MonitorV2SearchResult on MonitorV2SearchResult {
	results {
		... MonitorV2
	}
}
fragment MonitorV2 on MonitorV2 {
	id
	workspaceId
	createdBy
	createdDate
	name
	iconUrl
	description
	managedById
	folderId
	rollupStatus
	ruleKind
	definition {
		... MonitorV2Definition
	}
	actionRules {
		... MonitorV2ActionRule
	}
}
fragment MonitorV2Definition on MonitorV2Definition {
	inputQuery {
		outputStage
		stages {
			... StageQuery
		}
	}
	rules {
		... MonitorV2Rule
	}
	lookbackTime
	dataStabilizationDelay
	groupings {
		... MonitorV2Column
	}
	scheduling {
		... MonitorV2Scheduling
	}
}
fragment MonitorV2ActionRule on MonitorV2ActionRule {
	actionID
	levels
	sendEndNotifications
	sendRemindersInterval
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
fragment MonitorV2Rule on MonitorV2Rule {
	level
	count {
		... MonitorV2CountRule
	}
	threshold {
		... MonitorV2ThresholdRule
	}
	promote {
		... MonitorV2PromoteRule
	}
}
fragment MonitorV2Column on MonitorV2Column {
	linkColumn {
		... MonitorV2LinkColumn
	}
	columnPath {
		... MonitorV2ColumnPath
	}
}
fragment MonitorV2Scheduling on MonitorV2Scheduling {
	interval {
		... MonitorV2IntervalSchedule
	}
	transform {
		... MonitorV2TransformSchedule
	}
}
fragment MonitorV2CountRule on MonitorV2CountRule {
	compareValues {
		... MonitorV2Comparison
	}
	compareGroups {
		... MonitorV2ColumnComparison
	}
}
fragment MonitorV2ThresholdRule on MonitorV2ThresholdRule {
	compareValues {
		... MonitorV2Comparison
	}
	valueColumnName
	aggregation
	compareGroups {
		... MonitorV2ColumnComparison
	}
}
fragment MonitorV2PromoteRule on MonitorV2PromoteRule {
	compareColumns {
		... MonitorV2ColumnComparison
	}
}
fragment MonitorV2LinkColumn on MonitorV2LinkColumn {
	name
	meta {
		... MonitorV2LinkColumnMeta
	}
}
fragment MonitorV2ColumnPath on MonitorV2ColumnPath {
	name
	path
}
fragment MonitorV2IntervalSchedule on MonitorV2IntervalSchedule {
	interval
	randomize
}
fragment MonitorV2TransformSchedule on MonitorV2TransformSchedule {
	freshnessGoal
}
fragment MonitorV2Comparison on MonitorV2Comparison {
	compareFn
	compareValue {
		... PrimitiveValue
	}
}
fragment MonitorV2ColumnComparison on MonitorV2ColumnComparison {
	column {
		... MonitorV2Column
	}
	compareValues {
		... MonitorV2Comparison
	}
}
fragment MonitorV2LinkColumnMeta on MonitorV2LinkColumnMeta {
	srcFields {
		... MonitorV2ColumnPath
	}
	dstFields
	targetDataset
}
fragment PrimitiveValue on PrimitiveValue {
	bool
	float64
	int64
	string
	timestamp
	duration
}
`

func lookupMonitorV2(
	ctx context.Context,
	client graphql.Client,
	workspaceId *string,
	folderId *string,
	nameExact *string,
	nameSubstring *string,
) (*lookupMonitorV2Response, error) {
	req := &graphql.Request{
		OpName: "lookupMonitorV2",
		Query:  lookupMonitorV2_Operation,
		Variables: &__lookupMonitorV2Input{
			WorkspaceId:   workspaceId,
			FolderId:      folderId,
			NameExact:     nameExact,
			NameSubstring: nameSubstring,
		},
	}
	var err error

	var data lookupMonitorV2Response
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by lookupSnowflakeOutboundShare.
const lookupSnowflakeOutboundShare_Operation = `
query lookupSnowflakeOutboundShare ($name: String!, $workspaceId: ObjectId!) {
	shares: searchSnowflakeOutboundShare(nameExact: $name, workspaceId: $workspaceId) {
		results {
			... SnowflakeOutboundShare
		}
	}
}
fragment SnowflakeOutboundShare on SnowflakeOutboundShare {
	id
	name
	description
	workspaceId
	shareName
	accounts {
		... SnowflakeAccount
	}
}
fragment SnowflakeAccount on SnowflakeAccount {
	organization
	account
}
`

func lookupSnowflakeOutboundShare(
	ctx context.Context,
	client graphql.Client,
	name string,
	workspaceId string,
) (*lookupSnowflakeOutboundShareResponse, error) {
	req := &graphql.Request{
		OpName: "lookupSnowflakeOutboundShare",
		Query:  lookupSnowflakeOutboundShare_Operation,
		Variables: &__lookupSnowflakeOutboundShareInput{
			Name:        name,
			WorkspaceId: workspaceId,
		},
	}
	var err error

	var data lookupSnowflakeOutboundShareResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by lookupWorkspace.
const lookupWorkspace_Operation = `
query lookupWorkspace ($name: String!) {
	workspace(label: $name) {
		... Workspace
	}
}
fragment Workspace on Project {
	id
	label
}
`

func lookupWorkspace(
	ctx context.Context,
	client graphql.Client,
	name string,
) (*lookupWorkspaceResponse, error) {
	req := &graphql.Request{
		OpName: "lookupWorkspace",
		Query:  lookupWorkspace_Operation,
		Variables: &__lookupWorkspaceInput{
			Name: name,
		},
	}
	var err error

	var data lookupWorkspaceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by removeCorrelationTag.
const removeCorrelationTag_Operation = `
mutation removeCorrelationTag ($datasetId: ObjectId!, $path: LinkFieldInput!, $tag: String!) {
	resultStatus: removeCorrelationTag(datasetId: $datasetId, path: $path, tag: $tag) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func removeCorrelationTag(
	ctx context.Context,
	client graphql.Client,
	datasetId string,
	path LinkFieldInput,
	tag string,
) (*removeCorrelationTagResponse, error) {
	req := &graphql.Request{
		OpName: "removeCorrelationTag",
		Query:  removeCorrelationTag_Operation,
		Variables: &__removeCorrelationTagInput{
			DatasetId: datasetId,
			Path:      path,
			Tag:       tag,
		},
	}
	var err error

	var data removeCorrelationTagResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by saveDashboard.
const saveDashboard_Operation = `
mutation saveDashboard ($dashboardInput: DashboardInput!) {
	dashboard: saveDashboard(dash: $dashboardInput) {
		... Dashboard
	}
}
fragment Dashboard on Dashboard {
	id
	name
	iconUrl
	workspaceId
	managedById
	folderId
	layout
	stages {
		id
		input {
			inputName
			inputRole
			datasetId
			datasetPath
			stageId
		}
		params
		layout
		pipeline
	}
	parameters {
		id
		name
		defaultValue {
			... valueFields
		}
		valueKind {
			type
			keyForDatasetId
			arrayItemType {
				type
				keyForDatasetId
			}
		}
	}
	parameterValues {
		id
		value {
			... valueFields
		}
	}
}
fragment valueFields on Value {
	bool
	float64
	int64
	string
	array {
		value {
			... primitiveValueFields
		}
	}
	link {
		datasetId
		primaryKeyValue {
			name
			value {
				... primitiveValueFields
			}
		}
		storedLabel
	}
	datasetref {
		datasetId
		datasetPath
		stageId
	}
}
fragment primitiveValueFields on PrimitiveValue {
	bool
	float64
	int64
	string
}
`

func saveDashboard(
	ctx context.Context,
	client graphql.Client,
	dashboardInput DashboardInput,
) (*saveDashboardResponse, error) {
	req := &graphql.Request{
		OpName: "saveDashboard",
		Query:  saveDashboard_Operation,
		Variables: &__saveDashboardInput{
			DashboardInput: dashboardInput,
		},
	}
	var err error

	var data saveDashboardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by saveDataset.
const saveDataset_Operation = `
mutation saveDataset ($workspaceId: ObjectId!, $dataset: DatasetInput!, $query: MultiStageQueryInput!, $dep: DependencyHandlingInput) {
	dataset: saveDataset(workspaceId: $workspaceId, dataset: $dataset, query: $query, dependencyHandling: $dep) {
		dataset {
			... Dataset
		}
	}
}
fragment Dataset on Dataset {
	workspaceId
	id
	name
	freshnessDesired
	description
	iconUrl
	accelerationDisabled
	version
	updatedDate
	pathCost
	source
	managedById
	onDemandMaterializationLength
	dataTableViewState
	foreignKeys {
		label
		targetDataset
		srcFields
		dstFields
	}
	transform {
		current {
			query {
				outputStage
				stages {
					... StageQuery
				}
			}
		}
	}
	typedef {
		label
		def {
			anykey
			fields {
				name
				type {
					rep
					nullable
				}
				isEnum
				isSearchable
				isHidden
				isConst
				isMetric
			}
		}
	}
	sourceTable {
		schema
		partitions {
			name
		}
		sourceUpdateTableName
		isInsertOnly
		batchSeqField
		validFromField
		fields {
			name
			sqlType
		}
	}
	correlationTagMappings {
		tag
		path {
			column
			path
		}
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`

func saveDataset(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	dataset DatasetInput,
	query MultiStageQueryInput,
	dep *DependencyHandlingInput,
) (*saveDatasetResponse, error) {
	req := &graphql.Request{
		OpName: "saveDataset",
		Query:  saveDataset_Operation,
		Variables: &__saveDatasetInput{
			WorkspaceId: workspaceId,
			Dataset:     dataset,
			Query:       query,
			Dep:         dep,
		},
	}
	var err error

	var data saveDatasetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by saveMonitorV2Relations.
const saveMonitorV2Relations_Operation = `
mutation saveMonitorV2Relations ($monitorId: ObjectId!, $actionRelations: [ActionRelationInput!]) {
	monitorV2: saveMonitorV2Relations(monitorId: $monitorId, actionRelations: $actionRelations) {
		... MonitorV2
	}
}
fragment MonitorV2 on MonitorV2 {
	id
	workspaceId
	createdBy
	createdDate
	name
	iconUrl
	description
	managedById
	folderId
	rollupStatus
	ruleKind
	definition {
		... MonitorV2Definition
	}
	actionRules {
		... MonitorV2ActionRule
	}
}
fragment MonitorV2Definition on MonitorV2Definition {
	inputQuery {
		outputStage
		stages {
			... StageQuery
		}
	}
	rules {
		... MonitorV2Rule
	}
	lookbackTime
	dataStabilizationDelay
	groupings {
		... MonitorV2Column
	}
	scheduling {
		... MonitorV2Scheduling
	}
}
fragment MonitorV2ActionRule on MonitorV2ActionRule {
	actionID
	levels
	sendEndNotifications
	sendRemindersInterval
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
fragment MonitorV2Rule on MonitorV2Rule {
	level
	count {
		... MonitorV2CountRule
	}
	threshold {
		... MonitorV2ThresholdRule
	}
	promote {
		... MonitorV2PromoteRule
	}
}
fragment MonitorV2Column on MonitorV2Column {
	linkColumn {
		... MonitorV2LinkColumn
	}
	columnPath {
		... MonitorV2ColumnPath
	}
}
fragment MonitorV2Scheduling on MonitorV2Scheduling {
	interval {
		... MonitorV2IntervalSchedule
	}
	transform {
		... MonitorV2TransformSchedule
	}
}
fragment MonitorV2CountRule on MonitorV2CountRule {
	compareValues {
		... MonitorV2Comparison
	}
	compareGroups {
		... MonitorV2ColumnComparison
	}
}
fragment MonitorV2ThresholdRule on MonitorV2ThresholdRule {
	compareValues {
		... MonitorV2Comparison
	}
	valueColumnName
	aggregation
	compareGroups {
		... MonitorV2ColumnComparison
	}
}
fragment MonitorV2PromoteRule on MonitorV2PromoteRule {
	compareColumns {
		... MonitorV2ColumnComparison
	}
}
fragment MonitorV2LinkColumn on MonitorV2LinkColumn {
	name
	meta {
		... MonitorV2LinkColumnMeta
	}
}
fragment MonitorV2ColumnPath on MonitorV2ColumnPath {
	name
	path
}
fragment MonitorV2IntervalSchedule on MonitorV2IntervalSchedule {
	interval
	randomize
}
fragment MonitorV2TransformSchedule on MonitorV2TransformSchedule {
	freshnessGoal
}
fragment MonitorV2Comparison on MonitorV2Comparison {
	compareFn
	compareValue {
		... PrimitiveValue
	}
}
fragment MonitorV2ColumnComparison on MonitorV2ColumnComparison {
	column {
		... MonitorV2Column
	}
	compareValues {
		... MonitorV2Comparison
	}
}
fragment MonitorV2LinkColumnMeta on MonitorV2LinkColumnMeta {
	srcFields {
		... MonitorV2ColumnPath
	}
	dstFields
	targetDataset
}
fragment PrimitiveValue on PrimitiveValue {
	bool
	float64
	int64
	string
	timestamp
	duration
}
`

func saveMonitorV2Relations(
	ctx context.Context,
	client graphql.Client,
	monitorId string,
	actionRelations []ActionRelationInput,
) (*saveMonitorV2RelationsResponse, error) {
	req := &graphql.Request{
		OpName: "saveMonitorV2Relations",
		Query:  saveMonitorV2Relations_Operation,
		Variables: &__saveMonitorV2RelationsInput{
			MonitorId:       monitorId,
			ActionRelations: actionRelations,
		},
	}
	var err error

	var data saveMonitorV2RelationsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by saveSourceDataset.
const saveSourceDataset_Operation = `
mutation saveSourceDataset ($workspaceId: ObjectId!, $datasetDefinition: DatasetDefinitionInput!, $sourceTable: SourceTableDefinitionInput!, $dep: DependencyHandlingInput) {
	dataset: saveSourceDataset(workspaceId: $workspaceId, datasetDefinition: $datasetDefinition, sourceTable: $sourceTable, dependencyHandling: $dep) {
		dataset {
			... Dataset
		}
	}
}
fragment Dataset on Dataset {
	workspaceId
	id
	name
	freshnessDesired
	description
	iconUrl
	accelerationDisabled
	version
	updatedDate
	pathCost
	source
	managedById
	onDemandMaterializationLength
	dataTableViewState
	foreignKeys {
		label
		targetDataset
		srcFields
		dstFields
	}
	transform {
		current {
			query {
				outputStage
				stages {
					... StageQuery
				}
			}
		}
	}
	typedef {
		label
		def {
			anykey
			fields {
				name
				type {
					rep
					nullable
				}
				isEnum
				isSearchable
				isHidden
				isConst
				isMetric
			}
		}
	}
	sourceTable {
		schema
		partitions {
			name
		}
		sourceUpdateTableName
		isInsertOnly
		batchSeqField
		validFromField
		fields {
			name
			sqlType
		}
	}
	correlationTagMappings {
		tag
		path {
			column
			path
		}
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`

func saveSourceDataset(
	ctx context.Context,
	client graphql.Client,
	workspaceId string,
	datasetDefinition DatasetDefinitionInput,
	sourceTable SourceTableDefinitionInput,
	dep *DependencyHandlingInput,
) (*saveSourceDatasetResponse, error) {
	req := &graphql.Request{
		OpName: "saveSourceDataset",
		Query:  saveSourceDataset_Operation,
		Variables: &__saveSourceDatasetInput{
			WorkspaceId:       workspaceId,
			DatasetDefinition: datasetDefinition,
			SourceTable:       sourceTable,
			Dep:               dep,
		},
	}
	var err error

	var data saveSourceDatasetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by saveWorksheet.
const saveWorksheet_Operation = `
mutation saveWorksheet ($worksheetInput: WorksheetInput!) {
	worksheet: saveWorksheet(wks: $worksheetInput) {
		... Worksheet
	}
}
fragment Worksheet on Worksheet {
	id
	label
	icon
	managedById
	workspaceId
	stages {
		... StageQuery
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`

func saveWorksheet(
	ctx context.Context,
	client graphql.Client,
	worksheetInput WorksheetInput,
) (*saveWorksheetResponse, error) {
	req := &graphql.Request{
		OpName: "saveWorksheet",
		Query:  saveWorksheet_Operation,
		Variables: &__saveWorksheetInput{
			WorksheetInput: worksheetInput,
		},
	}
	var err error

	var data saveWorksheetResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by searchMonitorActions.
const searchMonitorActions_Operation = `
query searchMonitorActions ($workspaceId: ObjectId, $name: String) {
	monitorActions: searchMonitorActions(workspaceId: $workspaceId, name: $name) {
		__typename
		... MonitorAction
	}
}
fragment MonitorAction on MonitorAction {
	id
	name
	iconUrl
	description
	workspaceId
	rateLimit
	notifyOnClose
	isPrivate
	__typename
	... on EmailAction {
		targetAddresses
		subjectTemplate
		bodyTemplate
		isHtml
	}
	... on WebhookAction {
		urlTemplate
		method
		headers {
			header
			valueTemplate
		}
		bodyTemplate
	}
}
`

func searchMonitorActions(
	ctx context.Context,
	client graphql.Client,
	workspaceId *string,
	name *string,
) (*searchMonitorActionsResponse, error) {
	req := &graphql.Request{
		OpName: "searchMonitorActions",
		Query:  searchMonitorActions_Operation,
		Variables: &__searchMonitorActionsInput{
			WorkspaceId: workspaceId,
			Name:        name,
		},
	}
	var err error

	var data searchMonitorActionsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by searchMonitorV2Action.
const searchMonitorV2Action_Operation = `
query searchMonitorV2Action ($workspaceId: ObjectId, $folderId: ObjectId, $nameExact: String, $nameSubstring: String) {
	monitorV2Actions: searchMonitorV2Action(workspaceId: $workspaceId, folderId: $folderId, nameExact: $nameExact, nameSubstring: $nameSubstring) {
		... MonitorV2ActionSearchResult
	}
}
fragment MonitorV2ActionSearchResult on MonitorV2ActionSearchResult {
	results {
		... MonitorV2Action
	}
}
fragment MonitorV2Action on MonitorV2Action {
	inline
	type
	email {
		... MonitorV2EmailAction
	}
	webhook {
		... MonitorV2WebhookAction
	}
	id
	workspaceId
	name
	iconUrl
	description
	createdBy
	createdDate
}
fragment MonitorV2EmailAction on MonitorV2EmailAction {
	users
	addresses
	subject
	body
	fragments
}
fragment MonitorV2WebhookAction on MonitorV2WebhookAction {
	headers {
		... MonitorV2WebhookHeader
	}
	body
	fragments
	url
	method
}
fragment MonitorV2WebhookHeader on MonitorV2WebhookHeader {
	header
	value
}
`

func searchMonitorV2Action(
	ctx context.Context,
	client graphql.Client,
	workspaceId *string,
	folderId *string,
	nameExact *string,
	nameSubstring *string,
) (*searchMonitorV2ActionResponse, error) {
	req := &graphql.Request{
		OpName: "searchMonitorV2Action",
		Query:  searchMonitorV2Action_Operation,
		Variables: &__searchMonitorV2ActionInput{
			WorkspaceId:   workspaceId,
			FolderId:      folderId,
			NameExact:     nameExact,
			NameSubstring: nameSubstring,
		},
	}
	var err error

	var data searchMonitorV2ActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by setChannelsForChannelAction.
const setChannelsForChannelAction_Operation = `
mutation setChannelsForChannelAction ($actionId: ObjectId!, $channelIds: [ObjectId!]!) {
	resultStatus: setChannelsForChannelAction(actionId: $actionId, channelIds: $channelIds) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func setChannelsForChannelAction(
	ctx context.Context,
	client graphql.Client,
	actionId string,
	channelIds []string,
) (*setChannelsForChannelActionResponse, error) {
	req := &graphql.Request{
		OpName: "setChannelsForChannelAction",
		Query:  setChannelsForChannelAction_Operation,
		Variables: &__setChannelsForChannelActionInput{
			ActionId:   actionId,
			ChannelIds: channelIds,
		},
	}
	var err error

	var data setChannelsForChannelActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by setDefaultDashboard.
const setDefaultDashboard_Operation = `
mutation setDefaultDashboard ($dsid: ObjectId!, $dashid: ObjectId!) {
	resultStatus: setDefaultDashboard(dsid: $dsid, dashid: $dashid) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func setDefaultDashboard(
	ctx context.Context,
	client graphql.Client,
	dsid string,
	dashid string,
) (*setDefaultDashboardResponse, error) {
	req := &graphql.Request{
		OpName: "setDefaultDashboard",
		Query:  setDefaultDashboard_Operation,
		Variables: &__setDefaultDashboardInput{
			Dsid:   dsid,
			Dashid: dashid,
		},
	}
	var err error

	var data setDefaultDashboardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by setMonitorsForChannel.
const setMonitorsForChannel_Operation = `
mutation setMonitorsForChannel ($channelId: ObjectId!, $monitorIds: [ObjectId!]!) {
	resultStatus: setMonitorsForChannel(channelId: $channelId, monitorIds: $monitorIds) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func setMonitorsForChannel(
	ctx context.Context,
	client graphql.Client,
	channelId string,
	monitorIds []string,
) (*setMonitorsForChannelResponse, error) {
	req := &graphql.Request{
		OpName: "setMonitorsForChannel",
		Query:  setMonitorsForChannel_Operation,
		Variables: &__setMonitorsForChannelInput{
			ChannelId:  channelId,
			MonitorIds: monitorIds,
		},
	}
	var err error

	var data setMonitorsForChannelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by setRbacDefaultGroup.
const setRbacDefaultGroup_Operation = `
mutation setRbacDefaultGroup ($id: ORN!) {
	resultStatus: setRbacDefaultGroup(id: $id) {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func setRbacDefaultGroup(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*setRbacDefaultGroupResponse, error) {
	req := &graphql.Request{
		OpName: "setRbacDefaultGroup",
		Query:  setRbacDefaultGroup_Operation,
		Variables: &__setRbacDefaultGroupInput{
			Id: id,
		},
	}
	var err error

	var data setRbacDefaultGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by unsetRbacDefaultGroup.
const unsetRbacDefaultGroup_Operation = `
mutation unsetRbacDefaultGroup {
	resultStatus: unsetRbacDefaultGroup {
		... ResultStatus
	}
}
fragment ResultStatus on ResultStatus {
	success
	errorMessage
	detailedInfo
}
`

func unsetRbacDefaultGroup(
	ctx context.Context,
	client graphql.Client,
) (*unsetRbacDefaultGroupResponse, error) {
	req := &graphql.Request{
		OpName: "unsetRbacDefaultGroup",
		Query:  unsetRbacDefaultGroup_Operation,
	}
	var err error

	var data unsetRbacDefaultGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateApp.
const updateApp_Operation = `
mutation updateApp ($id: ObjectId!, $config: AppInput!) {
	app: updateApp(id: $id, app: $config) {
		... App
	}
}
fragment App on App {
	id
	name
	iconUrl
	description
	workspaceId
	folderId
	config {
		moduleId
		version
	}
	status {
		state
		internalError
	}
	outputs
}
`

func updateApp(
	ctx context.Context,
	client graphql.Client,
	id string,
	config AppInput,
) (*updateAppResponse, error) {
	req := &graphql.Request{
		OpName: "updateApp",
		Query:  updateApp_Operation,
		Variables: &__updateAppInput{
			Id:     id,
			Config: config,
		},
	}
	var err error

	var data updateAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateAppDataSource.
const updateAppDataSource_Operation = `
mutation updateAppDataSource ($id: ObjectId!, $config: AppDataSourceInput!) {
	appdatasource: updateAppDataSource(id: $id, source: $config) {
		... AppDataSource
	}
}
fragment AppDataSource on AppDataSource {
	id
	name
	iconUrl
	description
	workspaceId
	managedById
	sourceUrl
	instructions
}
`

func updateAppDataSource(
	ctx context.Context,
	client graphql.Client,
	id string,
	config AppDataSourceInput,
) (*updateAppDataSourceResponse, error) {
	req := &graphql.Request{
		OpName: "updateAppDataSource",
		Query:  updateAppDataSource_Operation,
		Variables: &__updateAppDataSourceInput{
			Id:     id,
			Config: config,
		},
	}
	var err error

	var data updateAppDataSourceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateBoard.
const updateBoard_Operation = `
mutation updateBoard ($id: ObjectId!, $board: BoardInput!) {
	board: updateBoard(id: $id, board: $board) {
		... Board
	}
}
fragment Board on Board {
	id
	datasetId
	name
	type
	boardJson: board
	source
}
`

func updateBoard(
	ctx context.Context,
	client graphql.Client,
	id string,
	board BoardInput,
) (*updateBoardResponse, error) {
	req := &graphql.Request{
		OpName: "updateBoard",
		Query:  updateBoard_Operation,
		Variables: &__updateBoardInput{
			Id:    id,
			Board: board,
		},
	}
	var err error

	var data updateBoardResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateChannel.
const updateChannel_Operation = `
mutation updateChannel ($id: ObjectId!, $channel: ChannelInput!) {
	channel: updateChannel(id: $id, channel: $channel) {
		... Channel
	}
}
fragment Channel on Channel {
	id
	name
	iconUrl
	description
	workspaceId
	monitors {
		id
	}
}
`

func updateChannel(
	ctx context.Context,
	client graphql.Client,
	id string,
	channel ChannelInput,
) (*updateChannelResponse, error) {
	req := &graphql.Request{
		OpName: "updateChannel",
		Query:  updateChannel_Operation,
		Variables: &__updateChannelInput{
			Id:      id,
			Channel: channel,
		},
	}
	var err error

	var data updateChannelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateChannelAction.
const updateChannelAction_Operation = `
mutation updateChannelAction ($id: ObjectId!, $action: ActionInput!) {
	channelAction: updateChannelAction(id: $id, action: $action) {
		__typename
		... ChannelAction
	}
}
fragment ChannelAction on ChannelAction {
	id
	name
	iconUrl
	description
	notifyOnClose
	workspaceId
	channels {
		id
	}
	rateLimit
	__typename
	... on WebhookAction {
		urlTemplate
		bodyTemplate
		method
		headers {
			header
			valueTemplate
		}
	}
	... on EmailAction {
		targetAddresses
		subjectTemplate
		bodyTemplate
		isHtml
	}
}
`

func updateChannelAction(
	ctx context.Context,
	client graphql.Client,
	id string,
	action ActionInput,
) (*updateChannelActionResponse, error) {
	req := &graphql.Request{
		OpName: "updateChannelAction",
		Query:  updateChannelAction_Operation,
		Variables: &__updateChannelActionInput{
			Id:     id,
			Action: action,
		},
	}
	var err error

	var data updateChannelActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateDashboardLink.
const updateDashboardLink_Operation = `
mutation updateDashboardLink ($id: ObjectId!, $input: DashboardLinkInput!) {
	dashboardLink: updateDashboardLink(id: $id, link: $input) {
		... DashboardLink
	}
}
fragment DashboardLink on DashboardLink {
	id
	name
	workspaceId
	folderId
	managedById
	description
	fromDashboard: fromDashboardId
	toDashboard: toDashboardId
	fromCard
	linkLabel
}
`

func updateDashboardLink(
	ctx context.Context,
	client graphql.Client,
	id string,
	input DashboardLinkInput,
) (*updateDashboardLinkResponse, error) {
	req := &graphql.Request{
		OpName: "updateDashboardLink",
		Query:  updateDashboardLink_Operation,
		Variables: &__updateDashboardLinkInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data updateDashboardLinkResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateDatasetOutboundShare.
const updateDatasetOutboundShare_Operation = `
mutation updateDatasetOutboundShare ($id: ObjectId!, $input: DatasetOutboundShareInput!) {
	datasetOutboundShare: updateDatasetOutboundShare(id: $id, input: $input) {
		... DatasetOutboundShare
	}
}
fragment DatasetOutboundShare on DatasetOutboundShare {
	id
	name
	description
	workspaceId
	folderId
	datasetID
	outboundShareID
	schemaName
	viewName
	freshnessGoal
	status {
		state
		error
	}
}
`

func updateDatasetOutboundShare(
	ctx context.Context,
	client graphql.Client,
	id string,
	input DatasetOutboundShareInput,
) (*updateDatasetOutboundShareResponse, error) {
	req := &graphql.Request{
		OpName: "updateDatasetOutboundShare",
		Query:  updateDatasetOutboundShare_Operation,
		Variables: &__updateDatasetOutboundShareInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data updateDatasetOutboundShareResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateDatastream.
const updateDatastream_Operation = `
mutation updateDatastream ($id: ObjectId!, $datastream: DatastreamInput!) {
	datastream: updateDatastream(id: $id, datastream: $datastream) {
		... Datastream
	}
}
fragment Datastream on Datastream {
	id
	name
	iconUrl
	description
	workspaceId
	datasetId
}
`

func updateDatastream(
	ctx context.Context,
	client graphql.Client,
	id string,
	datastream DatastreamInput,
) (*updateDatastreamResponse, error) {
	req := &graphql.Request{
		OpName: "updateDatastream",
		Query:  updateDatastream_Operation,
		Variables: &__updateDatastreamInput{
			Id:         id,
			Datastream: datastream,
		},
	}
	var err error

	var data updateDatastreamResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateDatastreamToken.
const updateDatastreamToken_Operation = `
mutation updateDatastreamToken ($id: String!, $token: DatastreamTokenInput!) {
	datastreamToken: updateDatastreamToken(id: $id, token: $token) {
		... DatastreamToken
	}
}
fragment DatastreamToken on DatastreamToken {
	id
	name
	description
	disabled
	datastreamId
	secret
}
`

func updateDatastreamToken(
	ctx context.Context,
	client graphql.Client,
	id string,
	token DatastreamTokenInput,
) (*updateDatastreamTokenResponse, error) {
	req := &graphql.Request{
		OpName: "updateDatastreamToken",
		Query:  updateDatastreamToken_Operation,
		Variables: &__updateDatastreamTokenInput{
			Id:    id,
			Token: token,
		},
	}
	var err error

	var data updateDatastreamTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateDeferredForeignKey.
const updateDeferredForeignKey_Operation = `
mutation updateDeferredForeignKey ($id: ObjectId!, $keyInput: DeferredForeignKeyInput!) {
	deferredForeignKey: updateDeferredForeignKey(id: $id, data: $keyInput) {
		... DeferredForeignKey
	}
}
fragment DeferredForeignKey on DeferredForeignKey {
	id
	workspaceId
	sourceDataset {
		datasetId
	}
	targetDataset {
		datasetId
	}
	srcFields
	dstFields
	label
	resolution {
		sourceId
		targetId
	}
	status {
		errorText
	}
}
`

func updateDeferredForeignKey(
	ctx context.Context,
	client graphql.Client,
	id string,
	keyInput DeferredForeignKeyInput,
) (*updateDeferredForeignKeyResponse, error) {
	req := &graphql.Request{
		OpName: "updateDeferredForeignKey",
		Query:  updateDeferredForeignKey_Operation,
		Variables: &__updateDeferredForeignKeyInput{
			Id:       id,
			KeyInput: keyInput,
		},
	}
	var err error

	var data updateDeferredForeignKeyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateFiledrop.
const updateFiledrop_Operation = `
mutation updateFiledrop ($id: ObjectId!, $input: FiledropInput!) {
	filedrop: updateFiledrop(id: $id, input: $input) {
		... Filedrop
	}
}
fragment Filedrop on Filedrop {
	id
	name
	iconUrl
	description
	workspaceId
	status
	datastreamID
	config {
		provider {
			__typename
			... on FiledropProviderAwsConfig {
				region
				roleArn
			}
		}
	}
	endpoint {
		__typename
		... on FiledropS3Endpoint {
			arn
			bucket
			prefix
		}
	}
}
`

func updateFiledrop(
	ctx context.Context,
	client graphql.Client,
	id string,
	input FiledropInput,
) (*updateFiledropResponse, error) {
	req := &graphql.Request{
		OpName: "updateFiledrop",
		Query:  updateFiledrop_Operation,
		Variables: &__updateFiledropInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data updateFiledropResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateFolder.
const updateFolder_Operation = `
mutation updateFolder ($id: ObjectId!, $config: FolderInput!) {
	folder: updateFolder(id: $id, folder: $config) {
		... Folder
	}
}
fragment Folder on Folder {
	id
	name
	iconUrl
	description
	workspaceId
}
`

func updateFolder(
	ctx context.Context,
	client graphql.Client,
	id string,
	config FolderInput,
) (*updateFolderResponse, error) {
	req := &graphql.Request{
		OpName: "updateFolder",
		Query:  updateFolder_Operation,
		Variables: &__updateFolderInput{
			Id:     id,
			Config: config,
		},
	}
	var err error

	var data updateFolderResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateLayeredSettingRecord.
const updateLayeredSettingRecord_Operation = `
mutation updateLayeredSettingRecord ($settingRecord: LayeredSettingRecordInput!) {
	layeredSettingRecord: updateLayeredSettingRecord(settingRecord: $settingRecord) {
		... LayeredSettingRecord
	}
}
fragment LayeredSettingRecord on LayeredSettingRecord {
	settingAndTargetScope {
		... SettingAndTargetScope
	}
	value {
		... PrimitiveValue
	}
	id
	name
	description
	iconUrl
	workspaceId
	managedById
	folderId
}
fragment SettingAndTargetScope on SettingAndTargetScope {
	setting
	target {
		... LayeredSettingRecordTarget
	}
}
fragment PrimitiveValue on PrimitiveValue {
	bool
	float64
	int64
	string
	timestamp
	duration
}
fragment LayeredSettingRecordTarget on LayeredSettingRecordTarget {
	customerId
	workspaceId
	folderId
	appId
	monitorId
	worksheetId
	dashboardId
	datasetId
	datastreamId
	userId
}
`

func updateLayeredSettingRecord(
	ctx context.Context,
	client graphql.Client,
	settingRecord LayeredSettingRecordInput,
) (*updateLayeredSettingRecordResponse, error) {
	req := &graphql.Request{
		OpName: "updateLayeredSettingRecord",
		Query:  updateLayeredSettingRecord_Operation,
		Variables: &__updateLayeredSettingRecordInput{
			SettingRecord: settingRecord,
		},
	}
	var err error

	var data updateLayeredSettingRecordResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateMonitor.
const updateMonitor_Operation = `
mutation updateMonitor ($id: ObjectId!, $monitor: MonitorInput!) {
	monitor: updateMonitor(id: $id, monitor: $monitor) {
		monitor {
			... Monitor
		}
	}
}
fragment Monitor on Monitor {
	workspaceId
	id
	name
	description
	comment
	iconUrl
	isTemplate
	disabled
	freshnessGoal
	useDefaultFreshness
	source
	definition
	managedById
	query {
		outputStage
		stages {
			... StageQuery
		}
	}
	rule {
		__typename
		sourceColumn
		groupByGroups {
			groupName
			columns
		}
		... on MonitorRuleCount {
			compareFunction
			compareValues
			lookbackTime
		}
		... on MonitorRuleChange {
			changeType
			compareFunction
			compareValues
			aggregateFunction
			lookbackTime
			baselineTime
		}
		... on MonitorRuleFacet {
			facetFunction
			facetValues
			timeFunction
			timeValue
			lookbackTime
		}
		... on MonitorRuleThreshold {
			compareFunction
			compareValues
			lookbackTime
			thresholdAggFunction
		}
		... on MonitorRulePromote {
			kindField
			descriptionField
			primaryKey
		}
		... on MonitorRuleLog {
			compareFunction
			compareValues
			lookbackTime
			expressionSummary
			logStageId
			sourceLogDatasetId
		}
	}
	notificationSpec {
		merge
		importance
		notifyOnReminder
		reminderFrequency
		notifyOnClose
	}
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
`

// More workarounds for server-side struggles
func updateMonitor(
	ctx context.Context,
	client graphql.Client,
	id string,
	monitor MonitorInput,
) (*updateMonitorResponse, error) {
	req := &graphql.Request{
		OpName: "updateMonitor",
		Query:  updateMonitor_Operation,
		Variables: &__updateMonitorInput{
			Id:      id,
			Monitor: monitor,
		},
	}
	var err error

	var data updateMonitorResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateMonitorAction.
const updateMonitorAction_Operation = `
mutation updateMonitorAction ($id: ObjectId!, $monitorAction: MonitorActionInput!) {
	monitorAction: updateMonitorAction(id: $id, input: $monitorAction) {
		__typename
		... MonitorAction
	}
}
fragment MonitorAction on MonitorAction {
	id
	name
	iconUrl
	description
	workspaceId
	rateLimit
	notifyOnClose
	isPrivate
	__typename
	... on EmailAction {
		targetAddresses
		subjectTemplate
		bodyTemplate
		isHtml
	}
	... on WebhookAction {
		urlTemplate
		method
		headers {
			header
			valueTemplate
		}
		bodyTemplate
	}
}
`

func updateMonitorAction(
	ctx context.Context,
	client graphql.Client,
	id string,
	monitorAction MonitorActionInput,
) (*updateMonitorActionResponse, error) {
	req := &graphql.Request{
		OpName: "updateMonitorAction",
		Query:  updateMonitorAction_Operation,
		Variables: &__updateMonitorActionInput{
			Id:            id,
			MonitorAction: monitorAction,
		},
	}
	var err error

	var data updateMonitorActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateMonitorActionAttachment.
const updateMonitorActionAttachment_Operation = `
mutation updateMonitorActionAttachment ($id: ObjectId!, $monitorActionAttachment: MonitorActionAttachmentInput!) {
	monitorActionAttachment: updateMonitorActionAttachment(id: $id, input: $monitorActionAttachment) {
		... MonitorActionAttachment
	}
}
fragment MonitorActionAttachment on MonitorActionAttachment {
	monitorID
	actionID
	id
	workspaceId
	name
	iconUrl
	description
}
`

func updateMonitorActionAttachment(
	ctx context.Context,
	client graphql.Client,
	id string,
	monitorActionAttachment MonitorActionAttachmentInput,
) (*updateMonitorActionAttachmentResponse, error) {
	req := &graphql.Request{
		OpName: "updateMonitorActionAttachment",
		Query:  updateMonitorActionAttachment_Operation,
		Variables: &__updateMonitorActionAttachmentInput{
			Id:                      id,
			MonitorActionAttachment: monitorActionAttachment,
		},
	}
	var err error

	var data updateMonitorActionAttachmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateMonitorV2.
const updateMonitorV2_Operation = `
mutation updateMonitorV2 ($id: ObjectId!, $input: MonitorV2Input!) {
	monitorV2: updateMonitorV2(id: $id, input: $input) {
		... MonitorV2
	}
}
fragment MonitorV2 on MonitorV2 {
	id
	workspaceId
	createdBy
	createdDate
	name
	iconUrl
	description
	managedById
	folderId
	rollupStatus
	ruleKind
	definition {
		... MonitorV2Definition
	}
	actionRules {
		... MonitorV2ActionRule
	}
}
fragment MonitorV2Definition on MonitorV2Definition {
	inputQuery {
		outputStage
		stages {
			... StageQuery
		}
	}
	rules {
		... MonitorV2Rule
	}
	lookbackTime
	dataStabilizationDelay
	groupings {
		... MonitorV2Column
	}
	scheduling {
		... MonitorV2Scheduling
	}
}
fragment MonitorV2ActionRule on MonitorV2ActionRule {
	actionID
	levels
	sendEndNotifications
	sendRemindersInterval
}
fragment StageQuery on StageQuery {
	id
	pipeline
	params
	layout
	input {
		inputName
		inputRole
		datasetId
		datasetPath
		stageId
	}
}
fragment MonitorV2Rule on MonitorV2Rule {
	level
	count {
		... MonitorV2CountRule
	}
	threshold {
		... MonitorV2ThresholdRule
	}
	promote {
		... MonitorV2PromoteRule
	}
}
fragment MonitorV2Column on MonitorV2Column {
	linkColumn {
		... MonitorV2LinkColumn
	}
	columnPath {
		... MonitorV2ColumnPath
	}
}
fragment MonitorV2Scheduling on MonitorV2Scheduling {
	interval {
		... MonitorV2IntervalSchedule
	}
	transform {
		... MonitorV2TransformSchedule
	}
}
fragment MonitorV2CountRule on MonitorV2CountRule {
	compareValues {
		... MonitorV2Comparison
	}
	compareGroups {
		... MonitorV2ColumnComparison
	}
}
fragment MonitorV2ThresholdRule on MonitorV2ThresholdRule {
	compareValues {
		... MonitorV2Comparison
	}
	valueColumnName
	aggregation
	compareGroups {
		... MonitorV2ColumnComparison
	}
}
fragment MonitorV2PromoteRule on MonitorV2PromoteRule {
	compareColumns {
		... MonitorV2ColumnComparison
	}
}
fragment MonitorV2LinkColumn on MonitorV2LinkColumn {
	name
	meta {
		... MonitorV2LinkColumnMeta
	}
}
fragment MonitorV2ColumnPath on MonitorV2ColumnPath {
	name
	path
}
fragment MonitorV2IntervalSchedule on MonitorV2IntervalSchedule {
	interval
	randomize
}
fragment MonitorV2TransformSchedule on MonitorV2TransformSchedule {
	freshnessGoal
}
fragment MonitorV2Comparison on MonitorV2Comparison {
	compareFn
	compareValue {
		... PrimitiveValue
	}
}
fragment MonitorV2ColumnComparison on MonitorV2ColumnComparison {
	column {
		... MonitorV2Column
	}
	compareValues {
		... MonitorV2Comparison
	}
}
fragment MonitorV2LinkColumnMeta on MonitorV2LinkColumnMeta {
	srcFields {
		... MonitorV2ColumnPath
	}
	dstFields
	targetDataset
}
fragment PrimitiveValue on PrimitiveValue {
	bool
	float64
	int64
	string
	timestamp
	duration
}
`

func updateMonitorV2(
	ctx context.Context,
	client graphql.Client,
	id string,
	input MonitorV2Input,
) (*updateMonitorV2Response, error) {
	req := &graphql.Request{
		OpName: "updateMonitorV2",
		Query:  updateMonitorV2_Operation,
		Variables: &__updateMonitorV2Input{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data updateMonitorV2Response
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateMonitorV2Action.
const updateMonitorV2Action_Operation = `
mutation updateMonitorV2Action ($id: ObjectId!, $input: MonitorV2ActionInput!) {
	monitorV2Action: updateMonitorV2Action(id: $id, input: $input) {
		... MonitorV2Action
	}
}
fragment MonitorV2Action on MonitorV2Action {
	inline
	type
	email {
		... MonitorV2EmailAction
	}
	webhook {
		... MonitorV2WebhookAction
	}
	id
	workspaceId
	name
	iconUrl
	description
	createdBy
	createdDate
}
fragment MonitorV2EmailAction on MonitorV2EmailAction {
	users
	addresses
	subject
	body
	fragments
}
fragment MonitorV2WebhookAction on MonitorV2WebhookAction {
	headers {
		... MonitorV2WebhookHeader
	}
	body
	fragments
	url
	method
}
fragment MonitorV2WebhookHeader on MonitorV2WebhookHeader {
	header
	value
}
`

func updateMonitorV2Action(
	ctx context.Context,
	client graphql.Client,
	id string,
	input MonitorV2ActionInput,
) (*updateMonitorV2ActionResponse, error) {
	req := &graphql.Request{
		OpName: "updateMonitorV2Action",
		Query:  updateMonitorV2Action_Operation,
		Variables: &__updateMonitorV2ActionInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data updateMonitorV2ActionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updatePoller.
const updatePoller_Operation = `
mutation updatePoller ($id: ObjectId!, $poller: PollerInput!) {
	poller: updatePoller(id: $id, poller: $poller) {
		... Poller
	}
}
fragment Poller on Poller {
	id
	workspaceId
	customerId
	datastreamId
	disabled
	kind
	config {
		__typename
		name
		retries
		interval
		tags
		chunk {
			enabled
			size
		}
		... on PollerPubSubConfig {
			projectId
			jsonKey
			subscriptionId
		}
		... on PollerHTTPConfig {
			method
			body
			endpoint
			contentType
			headers
			template {
				... HttpRequestConfig
			}
			requests {
				... HttpRequestConfig
			}
			rules {
				match {
					... HttpRequestConfig
				}
				follow
				decoder {
					type
				}
			}
			timestamps {
				name
				source
				format
				offset
				truncate
			}
		}
		... on PollerGCPMonitoringConfig {
			projectId
			jsonKey
			includeMetricTypePrefixes
			excludeMetricTypePrefixes
			rateLimit
			totalLimit
		}
		... on PollerMongoDBAtlasConfig {
			publicKey
			privateKey
			includeGroups
			excludeGroups
		}
		... on PollerCloudWatchMetricsConfig {
			period
			delay
			region
			assumeRoleArn
			queries {
				namespace
				metricNames
				dimensions {
					name
					value
				}
				resourceFilter {
					resourceType
					pattern
					dimensionName
					tagFilters {
						key
						values
					}
				}
			}
		}
		... on PollerAWSSnapshotConfig {
			region
			assumeRoleArn
			includeActions
		}
	}
}
fragment HttpRequestConfig on PollerHTTPRequestConfig {
	url
	method
	username
	password
	authScheme
	body
	headers
	params
}
`

func updatePoller(
	ctx context.Context,
	client graphql.Client,
	id string,
	poller PollerInput,
) (*updatePollerResponse, error) {
	req := &graphql.Request{
		OpName: "updatePoller",
		Query:  updatePoller_Operation,
		Variables: &__updatePollerInput{
			Id:     id,
			Poller: poller,
		},
	}
	var err error

	var data updatePollerResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updatePreferredPath.
const updatePreferredPath_Operation = `
mutation updatePreferredPath ($id: ObjectId!, $config: PreferredPathInput!) {
	preferredPathWithStatus: updatePreferredPath(id: $id, path: $config) {
		... PreferredPathWithStatus
	}
}
fragment PreferredPathWithStatus on PreferredPathWithStatus {
	path {
		... PreferredPath
	}
	error
}
fragment PreferredPath on PreferredPath {
	id
	name
	iconUrl
	description
	workspaceId
	folderId
	sourceDataset
	path {
		linkId
		reverse
		linkName
		reverseFromDataset
	}
}
`

// More workarounds for server-side struggles
func updatePreferredPath(
	ctx context.Context,
	client graphql.Client,
	id string,
	config PreferredPathInput,
) (*updatePreferredPathResponse, error) {
	req := &graphql.Request{
		OpName: "updatePreferredPath",
		Query:  updatePreferredPath_Operation,
		Variables: &__updatePreferredPathInput{
			Id:     id,
			Config: config,
		},
	}
	var err error

	var data updatePreferredPathResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateRbacGroup.
const updateRbacGroup_Operation = `
mutation updateRbacGroup ($id: ORN!, $config: RbacGroupInput!) {
	rbacGroup: updateRbacGroup(id: $id, input: $config) {
		... RbacGroup
	}
}
fragment RbacGroup on RbacGroup {
	id
	name
	description
}
`

func updateRbacGroup(
	ctx context.Context,
	client graphql.Client,
	id string,
	config RbacGroupInput,
) (*updateRbacGroupResponse, error) {
	req := &graphql.Request{
		OpName: "updateRbacGroup",
		Query:  updateRbacGroup_Operation,
		Variables: &__updateRbacGroupInput{
			Id:     id,
			Config: config,
		},
	}
	var err error

	var data updateRbacGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateRbacGroupmember.
const updateRbacGroupmember_Operation = `
mutation updateRbacGroupmember ($id: ORN!, $config: RbacGroupmemberInput!) {
	rbacGroupmember: updateRbacGroupmember(id: $id, input: $config) {
		... RbacGroupmember
	}
}
fragment RbacGroupmember on RbacGroupmember {
	id
	description
	groupId
	memberUserId
	memberGroupId
}
`

func updateRbacGroupmember(
	ctx context.Context,
	client graphql.Client,
	id string,
	config RbacGroupmemberInput,
) (*updateRbacGroupmemberResponse, error) {
	req := &graphql.Request{
		OpName: "updateRbacGroupmember",
		Query:  updateRbacGroupmember_Operation,
		Variables: &__updateRbacGroupmemberInput{
			Id:     id,
			Config: config,
		},
	}
	var err error

	var data updateRbacGroupmemberResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateRbacStatement.
const updateRbacStatement_Operation = `
mutation updateRbacStatement ($id: ORN!, $config: RbacStatementInput!) {
	rbacStatement: updateRbacStatement(id: $id, input: $config) {
		... RbacStatement
	}
}
fragment RbacStatement on RbacStatement {
	id
	description
	subject {
		userId
		groupId
		all
	}
	object {
		objectId
		folderId
		workspaceId
		type
		name
		owner
		all
	}
	role
	version
}
`

func updateRbacStatement(
	ctx context.Context,
	client graphql.Client,
	id string,
	config RbacStatementInput,
) (*updateRbacStatementResponse, error) {
	req := &graphql.Request{
		OpName: "updateRbacStatement",
		Query:  updateRbacStatement_Operation,
		Variables: &__updateRbacStatementInput{
			Id:     id,
			Config: config,
		},
	}
	var err error

	var data updateRbacStatementResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateSnowflakeOutboundShare.
const updateSnowflakeOutboundShare_Operation = `
mutation updateSnowflakeOutboundShare ($id: ObjectId!, $input: SnowflakeOutboundShareInput!) {
	share: updateSnowflakeOutboundShare(id: $id, input: $input) {
		... SnowflakeOutboundShare
	}
}
fragment SnowflakeOutboundShare on SnowflakeOutboundShare {
	id
	name
	description
	workspaceId
	shareName
	accounts {
		... SnowflakeAccount
	}
}
fragment SnowflakeAccount on SnowflakeAccount {
	organization
	account
}
`

func updateSnowflakeOutboundShare(
	ctx context.Context,
	client graphql.Client,
	id string,
	input SnowflakeOutboundShareInput,
) (*updateSnowflakeOutboundShareResponse, error) {
	req := &graphql.Request{
		OpName: "updateSnowflakeOutboundShare",
		Query:  updateSnowflakeOutboundShare_Operation,
		Variables: &__updateSnowflakeOutboundShareInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data updateSnowflakeOutboundShareResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateWorkspace.
const updateWorkspace_Operation = `
mutation updateWorkspace ($id: ObjectId!, $config: WorkspaceInput!) {
	workspace: updateWorkspace(id: $id, definition: $config) {
		... Workspace
	}
}
fragment Workspace on Project {
	id
	label
}
`

func updateWorkspace(
	ctx context.Context,
	client graphql.Client,
	id string,
	config WorkspaceInput,
) (*updateWorkspaceResponse, error) {
	req := &graphql.Request{
		OpName: "updateWorkspace",
		Query:  updateWorkspace_Operation,
		Variables: &__updateWorkspaceInput{
			Id:     id,
			Config: config,
		},
	}
	var err error

	var data updateWorkspaceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
