package rest

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"

	"github.com/observeinc/terraform-provider-observe/client/oid"
)

// reports models
// These are taken from the models generated by the OpenAPI Spec
// TODO: generate from OpenAPI spec (maybe the "go" generator of openapi-generator?)

type ReportsResource struct {
	Id                 string           `json:"id"` // backend sends this as string anyways
	CreatedBy          ReportUser       `json:"createdBy"`
	CreatedAt          string           `json:"createdAt"`
	UpdatedBy          ReportUser       `json:"updatedBy"`
	UpdatedAt          string           `json:"updatedAt"`
	Enabled            bool             `json:"enabled"`
	Label              string           `json:"label"`
	Dashboard          ReportsDashboard `json:"dashboard"`
	Schedule           ReportsSchedule  `json:"schedule"`
	EmailSubject       string           `json:"emailSubject"`
	EmailBody          string           `json:"emailBody"`
	EmailRecipients    []string         `json:"emailRecipients"`
	EmailBccRecipients []string         `json:"emailBccRecipients"`
	NextScheduleTime   *string          `json:"nextScheduleTime,omitempty"`
	LastRunTime        *string          `json:"lastRunTime,omitempty"`
	LastRunStatus      *string          `json:"lastRunStatus,omitempty"`
	LastRunError       *string          `json:"lastRunError,omitempty"`
}
type ReportsDefinition struct {
	Label              string           `json:"label"`
	Dashboard          ReportsDashboard `json:"dashboard"`
	Enabled            bool             `json:"enabled"`
	Schedule           ReportsSchedule  `json:"schedule"`
	EmailSubject       string           `json:"emailSubject,omitempty"`
	EmailBody          string           `json:"emailBody,omitempty"`
	EmailRecipients    []string         `json:"emailRecipients"`
	EmailBccRecipients []string         `json:"emailBccRecipients"`
}

type ReportsDashboard struct {
	Id                         string                 `json:"id"`
	Label                      string                 `json:"label,omitempty"`
	Parameters                 map[string]interface{} `json:"parameters,omitempty"`
	QueryWindowDurationMinutes int32                  `json:"queryWindowDurationMinutes"`
}

type ReportUser struct {
	Id    string `json:"id"`
	Label string `json:"label"`
}

type ReportsSchedule struct {
	Frequency              string `json:"frequency"`
	Every                  int32  `json:"every"`
	TimeOfDay              string `json:"timeOfDay"`
	Timezone               string `json:"timezone"`
	DayOfTheWeek           string `json:"dayOfTheWeek,omitempty"`
	DayOfTheMonth          int    `json:"dayOfTheMonth,omitempty"`
	GenerationDelayMinutes int    `json:"generationDelayMinutes,omitempty"`
}

// End of reports models

func (r *ReportsResource) Oid() oid.OID {
	return oid.OID{
		Id:   r.Id,
		Type: oid.TypeReport,
	}
}

func (client *Client) decodeReportsResourceFromBody(resp *http.Response) (*ReportsResource, error) {
	defer resp.Body.Close()

	resource := &ReportsResource{}
	if err := json.NewDecoder(resp.Body).Decode(resource); err != nil {
		return nil, err
	}
	return resource, nil
}

func (client *Client) CreateReport(ctx context.Context, req *ReportsDefinition) (*ReportsResource, error) {
	if req == nil {
		return nil, fmt.Errorf("request is nil")
	}
	body, err := json.Marshal(req)
	if err != nil {
		return nil, err
	}
	resp, err := client.Post("/v1/reports?expand=true", "application/json", bytes.NewReader(body))
	if err != nil {
		return nil, err
	}

	return client.decodeReportsResourceFromBody(resp)
}

func (client *Client) GetReport(ctx context.Context, id string) (*ReportsResource, error) {
	resp, err := client.Get("/v1/reports/" + url.PathEscape(id) + "?expand=true")
	if err != nil {
		return nil, err
	}
	return client.decodeReportsResourceFromBody(resp)
}

func (client *Client) UpdateReport(ctx context.Context, id string, req *ReportsDefinition) (*ReportsResource, error) {
	if req == nil {
		return nil, fmt.Errorf("request is nil")
	}
	body, err := json.Marshal(req)
	if err != nil {
		return nil, err
	}
	resp, err := client.Patch("/v1/reports/"+url.PathEscape(id)+"?expand=true", "application/json", bytes.NewReader(body))
	if err != nil {
		return nil, err
	}

	return client.decodeReportsResourceFromBody(resp)
}

func (client *Client) DeleteReport(ctx context.Context, id string) error {
	resp, err := client.Delete("/v1/reports/" + url.PathEscape(id))
	if err != nil {
		return err
	}
	defer resp.Body.Close()
	return nil
}
