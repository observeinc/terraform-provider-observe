enum IncludePersonalsKind @goModel(model: "observe/meta/metatypes.IncludePersonalsKind") {
    None
    Own
    All
}

extend type Query {
    folder(id: ObjectId!): Folder!
    folders(workspaceId: ObjectId!, name: String, includePersonals: IncludePersonalsKind): [Folder!]!

    module(id: String!, version: String): Module!
    modules(search: String, isConnection: Boolean): [Module!]!

    moduleVersions(id: String!, workspaceId: ObjectId): [ModuleVersion!]!

    app(id: ObjectId!): App!
    apps(workspaceId: ObjectId!, name: String): [App!]!
    appConfig(id: ObjectId!, targetVersion: String!): AppConfig!
    appChanges(id: ObjectId!, app: AppInput!): AppChanges!

    appDataSource(id: ObjectId!): AppDataSource!
    searchAppDataSources(workspaceId: ObjectId!, appId: ObjectId): [AppDataSource!]!
}

extend type Mutation {
    createApp(workspaceId: ObjectId!, app: AppInput!): App!
    updateApp(id: ObjectId!, app: AppInput!): App!
    deleteApp(id: ObjectId!): ResultStatus!
    installApp(workspaceId: ObjectId!, moduleId: String!, variables: [AppVariableInput!]): App!

    createFolder(workspaceId: ObjectId!, folder: FolderInput!): Folder!
    updateFolder(id: ObjectId!, folder: FolderInput!): Folder!
    deleteFolder(id: ObjectId!): ResultStatus!

    createAppDataSource(source: AppDataSourceInput!): AppDataSource!
    updateAppDataSource(id: ObjectId!, source: AppDataSourceInput!): AppDataSource!
    deleteAppDataSource(id: ObjectId!): ResultStatus!
}

type Folder implements WorkspaceObject & AuditedObject @goModel(model: "observe/meta/metatypes.Folder") {
    id: ObjectId!
    name: String!
    description: String
    iconUrl: String
    workspaceId: ObjectId!
    managedBy: WorkspaceObject @goField(forceResolver:true)
    managedById: ObjectId
    createdBy: UserId!
    createdByInfo: UserInfo! @goField(forceResolver:true)
    updatedBy: UserId!
    updatedByInfo: UserInfo! @goField(forceResolver:true)
    createdDate: Time!
    updatedDate: Time!

    personalToUserInfo: UserInfo @goField(forceResolver:true)
}

input FolderInput @goModel(model: "observe/meta/metatypes.FolderInput") {
    name: String
    description: String
    iconUrl: String
    personalToUserId: UserId
}


type Registry @goModel(model: "observe/meta/metatypes.Registry") {
    name: String!
    modules: [Module!]
}

"""
Module represents an app module
"""
type Module @goModel(model: "observe/meta/metatypes.Module") {
    id: String!
    name: String!
    source: String!
    description: String
    iconUrl: String
    registry: String
    defaultFolder: String!

    apps(workspaceId: ObjectId!): [App!] @goField(forceResolver:true)
}

"""
ModuleVersion represents the metadata for a specific version of an application
"""
type ModuleVersion @goModel(model: "observe/meta/metatypes.ModuleVersion") {
    source: String
    id: String!
    version: String!
    changelog: String!
    readme: String!
    inputs: [AppVariable!]
    resources: [AppResource!]
    dataConnections: [AppDataConnection!]
}

type AppVariable @goModel(model: "observe/meta/metatypes.AppVariable") {
    name: String!
    type: String!
    description: String
    required: Boolean!
    sensitive: Boolean!
    default: String
    # nullable: Boolean! #TODO
    # populated for configured variables
    value: String
}

enum AppResourceKind @goModel(model: "observe/meta/metatypes.AppResourceKind") {
    Data
    Resource
}

type AppResource @goModel(model: "observe/meta/metatypes.AppResource") {
    name: String!
    kind: AppResourceKind!
    type: String!
}

input AppVariableInput @goModel(model: "observe/meta/metatypes.AppVariableInput") {
    name: String!
    value: String!
}

input AppInput @goModel(model: "observe/meta/metatypes.AppInput") {
    moduleId: String!
    version: String!
    variables: [AppVariableInput!]
    folderId: ObjectId
}

enum AppChangeType @goModel(model: "observe/meta/metatypes.AppChangeType") {
    Create
    Update
    Delete
}

type AppChangeCount @goModel(model: "observe/meta/metatypes.AppChangeCount") {
  type: AppChangeType!
  count: Int64!
}

type AppResourceChange @goModel(model: "observe/meta/metatypes.AppResourceChange") {
    resourceType: ORNType!
    counts: [AppChangeCount!]!
}

type AppChanges @goModel(model: "observe/meta/metatypes.AppChanges") {
    error: String
    internalError: String

    counts: [AppChangeCount!]!
    resourceChanges: [AppResourceChange!]!
}

type AppConfig @goModel(model: "observe/meta/metatypes.AppConfig") {
    moduleId: String!
    source: String!
    version: String!
    variables: [AppVariable!]
}

enum AppState @goModel(model: "observe/meta/metatypes.AppState") {
    Initializing
    Installing
    Installed
    Deleting
    Error
}

type AppStatus @goModel(model: "observe/meta/metatypes.AppStatus") {
    state: AppState!
    drift: Boolean!
    """
    The user facing error message if an app is in Error state.
    """
    error: String
    """
    The detailed internal error message if an app is in Error state. Not suitable for external user consumption.
    """
    internalError: String
}

enum AppDataState @goModel(model: "observe/meta/metatypes.AppDataState") {
    Onboard
    Pending
    Valid
    Error
}

enum AppDataSourceKind @goModel(model: "observe/meta/metatypes.AppDataSourceKind") {
    Documentation
    Token
    Poller
    Filedrop
}

"""
AppDataSourceDefinition describes the information for creating data sources for apps.
"""
type AppDataSourceDefinition @goModel(model: "observe/meta/metatypes.AppDataSourceDefinition") {
    name: String!
    description: String
    kind: AppDataSourceKind!
    instructions: String!
    state: AppDataState!
    variables: [AppVariable!]

    """
    The terraform sourceUrl for the data source.
    """
    sourceUrl: String
}

input AppDataSourceInput @goModel(model: "observe/meta/metatypes.AppDataSourceInput") {
    name: String!
    description: String
    sourceUrl: String!
    variables: [AppVariableInput!]
    instructions: String!
    appId: ObjectId!
}

type AppDataSource implements WorkspaceObject & AuditedObject @goModel(model: "observe/meta/metatypes.AppDataSource") {
    # WorkspaceObject fields
    id: ObjectId!
    name: String!
    description: String
    iconUrl: String
    workspaceId: ObjectId!
    managedById: ObjectId
    managedBy: WorkspaceObject @goField(forceResolver:true)

    # AuditedObject fields
    createdBy: UserId!
    createdByInfo: UserInfo! @goField(forceResolver:true)
    updatedBy: UserId!
    updatedByInfo: UserInfo! @goField(forceResolver:true)
    createdDate: Time!
    updatedDate: Time!

    # data source specific fields
    sourceUrl: String!
    variables: [AppVariable!]
    instructions: String! @goField(forceResolver:true)
    preInstallInstructions: String! @goField(forceResolver:true)
    postInstallInstructions: String @goField(forceResolver:true)
    outputs: JsonObject! @goField(forceResolver:true)
}

type AppDataConnection @goModel(model: "observe/meta/metatypes.AppDataConnection") {
    datastreamId: ObjectId
    sources: [AppDataSourceDefinition!]!
    state: AppDataState!
}

type AppDataInfo @goModel(model: "observe/meta/metatypes.AppDataInfo") {
    state: AppDataState!
    connections: [AppDataConnection!]
}

enum AppVersionType @goModel(model: "observe/meta/metatypes.AppVersionType") {
    Standard
    Prerelease
    Deprecated
}

type AppVersions @goModel(model: "observe/meta/metatypes.AppVersions") {
    latestVersion: String!
    versions: [ModuleVersion!] @deprecated(reason: "Use query moduleVersions")
    updateAvailable: Boolean!
    versionType: AppVersionType!
}

"""
App represents an installed instance of an AppModule
"""
type App implements WorkspaceObject & FolderObject &AuditedObject @goModel(model: "observe/meta/metatypes.App") {
    id: ObjectId!
    name: String!
    description: String
    iconUrl: String
    workspaceId: ObjectId!
    managedBy: WorkspaceObject @goField(forceResolver:true)
    managedById: ObjectId
    folderId: ObjectId!
    config: AppConfig!
    prevStatus: AppStatus
    status: AppStatus!
    dataInfo: AppDataInfo! @goField(forceResolver:true)
    """
    resources refer to datasets, monitors, datastreams and other objects the app creates
    """
    resources: [WorkspaceObject!] @goField(forceResolver:true)
    versionsInfo: AppVersions @goField(forceResolver:true)
    outputs: JsonObject

    # AuditedObject
    createdBy: UserId!
    createdByInfo: UserInfo! @goField(forceResolver:true)
    updatedBy: UserId!
    updatedByInfo: UserInfo! @goField(forceResolver:true)
    createdDate: Time!
    updatedDate: Time!
}
