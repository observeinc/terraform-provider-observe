extend type Query {
    worksheet(id: ObjectId!): Worksheet

    dashboard(id: ObjectId!): Dashboard!

    """
    Default dashboard ID for a given dataset ID. May be null.
    """
    defaultDashboard(dsid: ObjectId!): ObjectId
    defaultInstanceDashboard(dsid: ObjectId!): ObjectId

    dashboardLink(id: ObjectId!): DashboardLink!
    searchDashboardLinks(terms:DashboardLinkSearchInput): DashboardLinkSearchResult!
}

input DashboardLinkSearchInput @goModel(model: "observe/meta/metatypes.DashboardLinkSearchInput") {
    fromBoard: ObjectId
    toBoard: ObjectId
    inFolder: ObjectId
    inWorkspace: ObjectId
    name: String
}

extend type Mutation {
    saveWorksheet(wks: WorksheetInput): Worksheet
    deleteWorksheet(wks: ObjectId!): ResultStatus

    saveDashboard(dash: DashboardInput!): Dashboard!
    deleteDashboard(id: ObjectId!): ResultStatus!

    setDefaultDashboard(dsid: ObjectId!, dashid: ObjectId!): ResultStatus!
    clearDefaultDashboard(dsid: ObjectId!): ResultStatus!
    setDefaultInstanceDashboard(dsid: ObjectId!, dashid: ObjectId!): ResultStatus!
    clearDefaultInstanceDashboard(dsid: ObjectId!): ResultStatus!

    """
    A dashboard link goes from one dashboard (and possibly card within that dashboard)
    to another. The link must be in the same workspace as the dashboards it references.
    """
    createDashboardLink(link: DashboardLinkInput!): DashboardLink!
    updateDashboardLink(id: ObjectId!, link: DashboardLinkInput!): DashboardLink!
    deleteDashboardLink(id: ObjectId!): ResultStatus!
}


interface IWorksheetLike @goModel(model: "observe/meta/metatypes.IWorksheetLike") {
    layout: JsonObject!
    stages: [StageQuery!]!
    parameters: [ParameterSpec!]
    parameterValues: [ParameterBinding!]
}

type DashboardRef implements FolderObject & WorkspaceObject @goModel(model: "observe/meta/metatypes.DashboardRef") {
    id: ObjectId!
    name: String!
    description: String
    iconUrl: String
    workspaceId: ObjectId!
    managedBy: WorkspaceObject @goField(forceResolver:true)
    managedById: ObjectId

    folderId: ObjectId!
}

type Dashboard implements IWorksheetLike & WorkspaceObject & AuditedObject & FolderObject @goModel(model: "observe/meta/metatypes.Dashboard") {
    id: ObjectId!
    name: String!
    description: String
    iconUrl: String
    workspaceId: ObjectId!
    managedBy: WorkspaceObject @goField(forceResolver:true)
    managedById: ObjectId

    folderId: ObjectId!

    layout: JsonObject!
    stages: [StageQuery!]!
    parameters: [ParameterSpec!]
    parameterValues: [ParameterBinding!]

    createdDate: Time!
    createdBy: UserId!
    createdByInfo: UserInfo! @goField(forceResolver:true)
    updatedDate: Time!
    updatedBy: UserId!
    updatedByInfo: UserInfo! @goField(forceResolver:true)

    defaultForDatasets: [ObjectId!]
    links: [DashboardLink!]!
}

input DashboardInput @goModel(model: "observe/meta/metatypes.DashboardInput") {
    """
    if id is not specified, a new dashboard is created
    """
    id: ObjectId

    name: String
    description: String
    iconUrl: String
    workspaceId: ObjectId
    managedById: ObjectId

    folderId: ObjectId

    layout: JsonObject
    stages: [StageQueryInput!]
    parameters: [ParameterSpecInput!]
    parameterValues: [ParameterBindingInput!]

    links: [DashboardLinkInput!]
}

type Worksheet implements IWorksheetLike & WorkspaceObject & AuditedObject & FolderObject @goModel(model: "observe/meta/metatypes.Worksheet") {

    # IWorksheetLike

    parameterValues: [ParameterBinding!]

    layout: JsonObject! @goField(forceResolver:true)
    parameters: [ParameterSpec!]! @goField(forceResolver:true)
    stages: [StageQuery!]! @goField(forceResolver:true)

    # WorkspaceObject

    description: String
    iconUrl: String
    id: ObjectId!
    managedById: ObjectId
    name: String!
    workspaceId: ObjectId!

    managedBy: WorkspaceObject @goField(forceResolver:true)

    # AuditedObject

    createdBy: UserId!
    createdDate: Time!
    updatedBy: UserId!
    updatedDate: Time!

    createdByInfo: UserInfo! @goField(forceResolver:true)
    updatedByInfo: UserInfo! @goField(forceResolver:true)

    # FolderObject

    folderId: ObjectId!

    # deprecated

    icon: String @goField(name:iconUrl) @deprecated(reason: "Use iconUrl")
    label: String! @goField(name:name) @deprecated(reason: "Use name")
    savedDate: Time! @goField(name:updatedDate) @deprecated(reason: "Use updatedDate")

    savedByInfo: UserInfo! @goField(forceResolver:true)  @deprecated(reason: "Use updatedByInfo")
    workspace: Project @goField(forceResolver:true) @deprecated(reason: "Use workspaceId")
}

input WorksheetInput @goModel(model: "observe/meta/metatypes.WorksheetInput") {
    """
    if id is not specified, a new worksheet is created
    """
    id: ObjectId
    name: String # Will be required when label is deprecated
    workspaceId: ObjectId!
    managedById: ObjectId
    layout: JsonObject
    iconUrl: String
    stages: [StageQueryInput!]
    parameters: [ParameterSpecInput!]
    parameterValues: [ParameterBindingInput!]

    label: String @deprecated(reason: "Use name")
    icon: String @goField(name:iconUrl) @deprecated(reason: "Use iconUrl")
}

type DashboardLink implements FolderObject & WorkspaceObject & AuditedObject @goModel(model: "observe/meta/metatypes.DashboardLink") {
    # WorkspaceObject
    id: ObjectId!
    name: String!
    description: String!
    iconUrl: String!
    workspaceId: ObjectId!
    managedBy: WorkspaceObject @goField(forceResolver:true)
    managedById: ObjectId

    # FolderObject
    folderId: ObjectId!

    # AuditedObject
    updatedDate: Time!
    updatedBy: UserId!
    updatedByInfo: UserInfo! @goField(forceResolver:true)
    createdDate: Time!
    createdBy: UserId!
    createdByInfo: UserInfo! @goField(forceResolver:true)

    # Actual payload data
    fromDashboardId: ObjectId!
    toDashboardId: ObjectId!
    fromCard: String
    """
    The label is presented in the UI. We need this separate from 'name' because 'name'
    is a WorkspaceObject specific field, that must be globally unique within the workspace,
    and we can't say that all links should display unique labels in the UI. (An alternative
    is to just display the name of the target dashboard -- implementors choice.)
    """
    linkLabel: String!
}

input DashboardLinkInput @goModel(model: "observe/meta/metatypes.DashboardLinkInput") {
    """
    If name is empty on create, a unique name will be generated. If name is empty
    on update, the name won't be changed.
    """
    name: String
    description: String
    iconUrl: String
    workspaceId: ObjectId!
    managedById: ObjectId

    """
    If folder is empty on create, it will be put in the default folder. If folder
    is empty on update, the existing folder won't be changed.
    """
    folderId: ObjectId

    fromDashboardId: ObjectId!
    toDashboardId: ObjectId!
    """
    When fromCard is null, it clears the property.
    """
    fromCard: String
    """
    linkLabel is the display text of the link label. This is neded because the
    'name' is more like a textual ID and needs to be unique.
    """
    linkLabel: String!
}

type DashboardLinkSearchResult @goModel(model: "observe/meta/metatypes.DashboardLinkSearchResult") {
    links: [DashboardLink!]!
}

