extend type Query {
    """
    Accepts the same input as create or update, but for the purpose of showing to the user
    how the candidate monitor definition will behave against the input data. The return is a preview type that
    shows how the monitoring strategy will emit results.
    """
    previewMonitorV2(workspaceId: ObjectId!, input: MonitorV2Input!, params: QueryParams!): MonitorV2Preview!

    """
    Allows fetching of the current or previous MonitorV2 by id and version
    (where version is the same as the monitorVersion of the MonitorV2). The purpose here is to obtain the
    definition for historical DetectionEvent's emitted. This can be used to understand what the upstream
    data looked like at the time of the detection event (noting of course that the actual data may have changed
    due to rematerialization).
    """
    monitorV2DefinitionByVersion(id: ObjectId!, version: Int64!): MonitorV2Definition!

    """
    Takes in the monitor v2 input and the alarm input to produce a template dictionary
    for the frontend which can be used to render the template. The URLs generated will be the normal
    URLs in the observe UI, but with zero value identifiers. The optional workspaceId is so that
    any URLs with a workspaceId have the correct value.
    """
    monitorV2TemplateDictionary(
        workspaceId: ObjectId,
        monitorId: ObjectId,
        alertType: MonitorV2AlertType,
        monitorInput: MonitorV2Input!,
        alarmInput: MonitorV2AlarmInput!,
    ): TemplateDictionary!

    """
    Receive an actionInput and sample data payload to render all the fields in the mustache template.
    SampleData is the json payload that contains all the fields to render the mustache template.
    """
    monitorV2RenderTemplate(
        templateDict: JsonObject!, 
        actionInput: MonitorV2ActionInput!,
    ): RenderedTemplate!

    """
    Can be used to query alerts in the explorer using various optional filters.

    monitorIds optionally restricts to a specific monitors
    nameSubstring restricts to monitors with partial match on the name
    alarmId optionally restricts to a single alarm
    minTime and maxTime optionally restrict to alarms that partially overlap with the time range
    levels optionally restricts by severity levels
    groupingHash optionally restricts to alarms with the same groupiingHash, which can be used to
        see logically grouped alarms.
    active optionally filters on the active flag
    
    note: At this time, rbac enforcement is done on the associated monitor for list privs
    """
    searchMonitorV2Alarms(
        workspaceId: ObjectId!,
        monitorIds: [ObjectId!],
        nameSubstring: String,
        alarmId: String,
        minTime: Time,
        maxTime: Time,
        levels: [MonitorV2AlarmLevel!],
        groupingHash: Int64,
        active: Boolean,
        # TODO: captured value search?
    ): MonitorV2AlarmSearchResult!
}

extend type Mutation {
    """
    Replaces all monitor relations (MonitorV2ActionRule, ActionDestinationLink)
    for the provided monitor with the provided list of actionRules and destinationLinks.
    Shared Actions can't be mutated through this call other than attaching it to the monitor, so you will need to used
    saveActionWithDestinationLinks to mutate sharedAction's links to the destinations.
    It does not allow you to mutate any shared actions' relationships with the destinations. Only the inlined actions'
    relationships with the destinations are mutateable.Hence, this API will error out if you provide destinationLinks 
    where the action is shared.
    """
    saveMonitorV2Relations(monitorId: ObjectId!, actionRelations: [ActionRelationInput!]): MonitorV2!

    """
    Allows an explicit termination of an active alarm. The purpose is to
    give the user the ability to eliminate via termination an active alarm that for some reason
    did not end normally. This is possibly an escape hatch for early adoption bugs, but could end
    up being an imperative for edge cases we haven't anticipated and where a snooze or mute is
    not appropriate.
    """
    terminateMonitorV2Alarm(alarmId: String!): MonitorV2Alarm!

    """
    A fast way to remove all mute rules tied to a single monitor.
    note: This has no impact on global mutes that may exist, which always apply to all
    monitors.
    """
    unmuteMonitorV2(id: ObjectId!): MonitorV2!

    """
    Sets the enabled/disabled-ness of a monitor. Disabling a monitor will
    stop evaluation and detection of the monitor.
    """
    setMonitorV2Enabled(id: ObjectId!, enabled: Boolean!): MonitorV2!

    """
    Takes in the template dictionary generated from monitorV2TemplateDictionary along with
    the actionInput and destinationInputs object. Afterward, it sends a test alert to see whether the customer can
    receive an alert at their designated end point.
    """
    testMonitorV2Alert(
        templateDict: JsonObject!, 
        actionInput: MonitorV2ActionInput!,
    ): ResultStatus!

    """
    SaveMonitorV2WithActions builds on the primitives of createMonitorV2, updateMonitorV2,
    createMonitorV2Action, updateMonitorV2Action, deleteMonitorV2Action, and saveMonitorV2Relations.
    The intent is to provide a one-shot API for easier use in terraforming and a more transactional
    API for the front-end. The way this function works is as follows.

    If monitorId is set, the input field is considered an update to an existing monitor. Otherwise,
    this is treated as a creation.

    The actions list is the ordered list the user is creating the actions. It can include existing
    actions (typically already-created shared actions) or actions to be created (typically inline).
    """
    saveMonitorV2WithActions(
        workspaceId: ObjectId!,
        monitorId: ObjectId,
        input: MonitorV2Input!,
        actions: [MonitorV2ActionAndRelationInput!],
    ): MonitorV2!
}

# Future placeholder for mutation in one go -- an optional definition can be added along with what type of mutation
# the frontend desires
"""
ActionRelationInput maps the action's relationship to the destinations the user desires to link with.
"""
input ActionRelationInput @goModel(model: "observe/meta/metatypes.ActionRelationInput") {
    actionRule: MonitorV2ActionRuleInput!
}

type TemplateDictionary @goModel(model: "observe/meta/metatypes.TemplateDictionary") {
    dictionary: JsonObject!
}

type RenderedTemplate @goModel(model: "observe/meta/metatypes.RenderedTemplate") {
    email: RenderedEmail
    webhook: RenderedWebhook
}

type RenderedEmail @goModel(model: "observe/meta/metatypes.RenderedEmail") {
    action: MonitorV2EmailAction!
}

type RenderedWebhook @goModel(model: "observe/meta/metatypes.RenderedWebhook") {
    action: MonitorV2WebhookAction!
}

type MonitorV2AlarmSearchResult @goModel(model: "observe/meta/metatypes.MonitorV2AlarmSearchResult") {
    results: [MonitorV2Alarm!]!
}

"""
MonitorV2ActionAndRelationInput allows for defining a relation and an optional action at the same
time for the saveMonitorV2WithActions function. This emulates what the primitives
do using MonitorV2ActionInput and MonitorV2ActionRuleInput.

One of `action` or `actionID` is required. The `actionID` references an existing
action (typically a shared action) or the `action` can be defined and created
in this input.

The remaining parameters (like `levels` and others) are to bind the
relationship (see saveMonitorV2Relations) to the monitor.
"""
input MonitorV2ActionAndRelationInput @goModel(model: "observe/meta/metatypes.MonitorV2ActionAndRelationInput") {
    action: MonitorV2ActionInput
    actionID: ObjectId

    levels: [MonitorV2AlarmLevel!]
    conditions: MonitorV2ComparisonExpressionInput
    sendEndNotifications: Boolean
    sendRemindersInterval: Duration
}
