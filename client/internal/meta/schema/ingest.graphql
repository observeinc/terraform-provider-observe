extend type Query {
    poller(id: ObjectId!): Poller!
    pollers(workspaceId: ObjectId!, kind: PollerKind, name: String, datastreamId: ObjectId): [Poller!]!
    getPollers(workspaceId: ObjectId!, kind: PollerKind, name: String): [Poller!]!

    datastream(id: ObjectId!): Datastream!
    datastreams(workspaceId: ObjectId!, name: String): [Datastream!]!

    datastreamToken(id: String!): DatastreamToken!
}

extend type Mutation {
    updatePoller(id: ObjectId!, poller: PollerInput!): Poller!
    createPoller(workspaceId: ObjectId!, poller: PollerInput!): Poller!
    deletePoller(id: ObjectId!): ResultStatus!
    setPollerDisabled(id: ObjectId!, disabled: Boolean!): ResultStatus!

    createDatastream(workspaceId: ObjectId!, datastream: DatastreamInput!): Datastream!
    updateDatastream(id: ObjectId!, datastream: DatastreamInput!): Datastream!
    deleteDatastream(id: ObjectId!): ResultStatus!

    createDatastreamToken(datastreamId: ObjectId!, token: DatastreamTokenInput!): DatastreamToken!
    updateDatastreamToken(id: String!, token: DatastreamTokenInput!): DatastreamToken!
    deleteDatastreamToken(id: String!): ResultStatus!
}

"""
stats common to datastream sources such as tokens, pollers etc
"""
interface DatastreamSourceStats @goModel(model: "observe/meta/metatypes.DatastreamSourceStats") {
    firstIngest: Time!
    lastIngest: Time!
    lastError: Time
    errors: [DatastreamError!]
    observations: [TimeSeriesValue!]
    volumeBytes: [TimeSeriesValue!]
}

type DatastreamError @goModel(model: "observe/meta/metatypes.DatastreamError") {
    time: Time!
    message: String!
    code: Int64
}

"""
summarized per datastream stats
"""
type DatastreamStats @goModel(model: "observe/meta/metatypes.DatastreamStats") {
    firstIngest: Time
    lastIngest: Time
    lastError: Time
    numTokens: Int64!
    """
    per minute observation counts for the past hour
    """
    observations: [TimeSeriesValue!]
    """
    per minute ingest volume bytes for the past hour
    """
    volumeBytes: [TimeSeriesValue!]
    """
    total observations for the past hour derived from the above per minute counts
    """
    totalObservations: Int64!
    """
    total volume bytes for the past hour derived from the above per minute counts
    """
    totalVolumeBytes: Int64!
}

enum DatastreamState @goModel(model: "observe/meta/metatypes.DatastreamState") {
    Disabled
    Enabled
    LiveMode
}

type Datastream implements WorkspaceObject & AuditedObject & FolderObject @goModel(model: "observe/meta/metatypes.Datastream") {
    id: ObjectId!
    name: String!
    description: String
    iconUrl: String
    customerId: CustomerId!
    workspaceId: ObjectId!
    managedBy: WorkspaceObject @goField(forceResolver:true)
    managedById: ObjectId
    folderId: ObjectId!
    datasetId: ObjectId!
    createdBy: UserId!
    createdByInfo: UserInfo! @goField(forceResolver:true)
    updatedBy: UserId!
    updatedByInfo: UserInfo! @goField(forceResolver:true)
    createdDate: Time!
    updatedDate: Time!
    disabled: Boolean! @deprecated(reason: "use state instead")
    state: DatastreamState!
    tokens(appId: ObjectId, moduleId: String): [DatastreamToken!] @goField(forceResolver:true)
    pollers(appId: ObjectId, moduleId: String): [Poller!] @goField(forceResolver:true)
    filedrops: [Filedrop!] @goField(forceResolver:true)
    stats: DatastreamStats @goField(forceResolver:true)
    externalSourceId: ObjectId
}

input DatastreamInput @goModel(model: "observe/meta/metatypes.DatastreamInput") {
    name: String!
    description: String
    iconUrl: String
    disabled: Boolean
    externalSourceId: ObjectId
}

interface DatastreamSourceAppMetadata @goModel(model: "observe/meta/metatypes.DatastreamSourceAppMetadata") {
    appId: ObjectId!
    moduleId: String
    instructions: String!
    datasourceName: String!
}

type DatastreamToken implements Token @goModel(model: "observe/meta/metatypes.DatastreamToken") {
    id: String!
    name: String!
    description: String
    createdBy: UserId!
    createdByInfo: UserInfo! @goField(forceResolver:true)
    updatedBy: UserId!
    updatedByInfo: UserInfo! @goField(forceResolver:true)
    createdDate: Time!
    updatedDate: Time!
    disabled: Boolean!

    datastreamId: ObjectId!
    managedById: ObjectId
    stats: DatastreamTokenStats @goField(forceResolver:true)
    """
    only populated for creates
    """
    secret: String
    appMetadata: DatastreamTokenAppMetadata
}

type DatastreamTokenAppMetadata implements DatastreamSourceAppMetadata @goModel(model: "observe/meta/metatypes.DatastreamTokenAppMetadata") {
    appId: ObjectId!
    moduleId: String
    instructions: String!
    datasourceName: String!
}

type DatastreamTokenStats implements TokenStats & DatastreamSourceStats @goModel(model: "observe/meta/metatypes.DatastreamTokenStats") {
    firstUsed: Time!
    lastUsed: Time!
    lastError: Time
    firstIngest: Time!
    lastIngest: Time!
    errors: [DatastreamError!]
    observations: [TimeSeriesValue!]
    volumeBytes: [TimeSeriesValue!]
}

type TimeSeriesValue @goModel(model: "observe/meta/metatypes.TimeSeriesValue") {
    time: Time!
    value: Int64!
}

input DatastreamTokenAppMetadataInput @goModel(model: "observe/meta/metatypes.DatastreamTokenAppMetadataInput") {
    appId: ObjectId!
    moduleId: String
    instructions: String!
    datasourceName: String!
}

input DatastreamTokenInput @goModel(model: "observe/meta/metatypes.DatastreamTokenInput") {
    name: String!
    description: String
    disabled: Boolean
    appMetadata: DatastreamTokenAppMetadataInput
}

enum PollerKind @goModel(model: "observe/meta/metatypes.PollerKind") {
    PubSub
    HTTP
    GCPMonitoring
    MongoDBAtlas
    ConfluentCloud
}

type PollerStats implements DatastreamSourceStats @goModel(model: "observe/meta/metatypes.PollerStats") {
    firstIngest: Time!
    lastIngest: Time!
    lastError: Time
    errors: [DatastreamError!]
    observations: [TimeSeriesValue!]
    volumeBytes: [TimeSeriesValue!]
}

type Poller implements WorkspaceObject & AuditedObject @goModel(model: "observe/meta/metatypes.Poller") {
    id: ObjectId!
    name: String!
    description: String
    iconUrl: String
    workspaceId: ObjectId!
    managedBy: WorkspaceObject @goField(forceResolver:true)
    managedById: ObjectId
    customerId: CustomerId!
    datastreamId: ObjectId
    createdBy: UserId!
    createdByInfo: UserInfo! @goField(forceResolver:true)
    updatedBy: UserId!
    updatedByInfo: UserInfo! @goField(forceResolver:true)
    createdDate: Time!
    updatedDate: Time!
    disabled: Boolean!
    config: PollerConfig!
    kind: PollerKind!
    stats: PollerStats @goField(forceResolver:true)
    appMetadata: PollerAppMetadata
}

type PollerAppMetadata implements DatastreamSourceAppMetadata @goModel(model: "observe/meta/metatypes.PollerAppMetadata") {
    appId: ObjectId!
    moduleId: String
    instructions: String!
    datasourceName: String!

    sourceUrl: String!
    variables: [AppVariable!]
}

type PollerChunkConfig @goModel(model: "observe/meta/metatypes.PollerChunkConfig") {
    enabled: Boolean!
    size: Int64
}


interface PollerConfig @goModel(model: "observe/meta/metatypes.PollerConfig") {
    # TODO: remove this field once the FE no longer uses it.
    name: String @deprecated(reason:"use poller.name instead")
    retries: Int64
    interval: Duration
    chunk: PollerChunkConfig
    apiReqLimit: RateLimitConfig
    tags: JsonObject
}

type PollerPubSubConfig implements PollerConfig @goModel(model: "observe/meta/metatypes.PollerPubSubConfig") {
    name: String
    retries: Int64
    interval: Duration
    chunk: PollerChunkConfig
    apiReqLimit: RateLimitConfig
    tags: JsonObject

    projectId: String!
    jsonKey: JsonObject!
    subscriptionId: String!
}

type PollerHTTPConfig implements PollerConfig @goModel(model: "observe/meta/metatypes.PollerHTTPConfig") {
    name: String
    retries: Int64
    interval: Duration
    chunk: PollerChunkConfig
    apiReqLimit: RateLimitConfig
    tags: JsonObject

    method: String @deprecated(reason: "Use requests instead")
    body: String @deprecated(reason: "Use requests instead")
    endpoint: String @deprecated(reason: "Use requests instead")
    contentType: String @deprecated(reason: "Use requests instead")
    headers: JsonObject @deprecated(reason: "Use requests instead")

    """
    Default HTTP request configuration that will be used for all requests. Keys declared in requests will override these values.
    """
    template: PollerHTTPRequestConfig

    requests: [PollerHTTPRequestConfig!]
    rules: [PollerHTTPRuleConfig!]
    timestamps: [PollerHTTPTimestampConfig!]
}


enum PollerHTTPRequestAuthScheme @goModel(model: "observe/meta/metatypes.PollerHTTPRequestAuthScheme") {
    Basic
    Digest
}

type PollerHTTPRequestConfig @goModel(model: "observe/meta/metatypes.PollerHTTPRequestInput") {
   url: String
   method: String
   username: String
   password: String
   authScheme: PollerHTTPRequestAuthScheme
   body: String
   headers: JsonObject
   params: JsonObject
}

enum PollerHTTPTimestampFormatScheme @goModel(model: "observe/meta/metatypes.PollerHTTPTimestampFormatScheme") {
    ANSIC
    UnixDate
    RubyDate
    RFC822
    RFC822Z
    RFC850
    RFC1123
    RFC1123Z
    RFC3339
    RFC3339Nano
    Kitchen
    Unix
    UnixMilli
    UnixMicro
    UnixMano
}

type PollerHTTPTimestampConfig @goModel(model: "observe/meta/metatypes.PollerHTTPTimestampInput") {
    name: String
    source: String
    format: PollerHTTPTimestampFormatScheme
    offset: String
    truncate: String
}

type PollerHTTPRuleConfig @goModel(model: "observe/meta/metatypes.PollerHTTPRuleInput") {
   match: PollerHTTPRequestConfig
   decoder: PollerHTTPDecoderConfig
   follow: String
}

type PollerHTTPDecoderConfig @goModel(model: "observe/meta/metatypes.PollerHTTPDecoderInput") {
   type: String!
}

type PollerGCPMonitoringConfig implements PollerConfig @goModel(model: "observe/meta/metatypes.PollerGCPMonitoringConfig") {
    name: String
    retries: Int64
    interval: Duration
    chunk: PollerChunkConfig
    apiReqLimit: RateLimitConfig
    tags: JsonObject

    projectId: String!
    jsonKey: JsonObject!
    includeMetricTypePrefixes: [String!]
    excludeMetricTypePrefixes: [String!]
    rateLimit: Int64
    totalLimit: Int64
}

type PollerMongoDBAtlasConfig implements PollerConfig @goModel(model: "observe/meta/metatypes.PollerMongoDBAtlasConfig") {
    name: String
    retries: Int64
    interval: Duration
    chunk: PollerChunkConfig
    apiReqLimit: RateLimitConfig
    tags: JsonObject

    publicKey: String!
    privateKey: String!
    includeGroups: [String!]
    excludeGroups: [String!]
}

type PollerConfluentCloudConfig implements PollerConfig @goModel(model: "observe/meta/metatypes.PollerConfluentCloudConfig") {
    name: String
    retries: Int64
    interval: Duration
    chunk: PollerChunkConfig
    apiReqLimit: RateLimitConfig
    tags: JsonObject

    key: String!
    secret: String!
}

input PollerChunkInput @goModel(model: "observe/meta/metatypes.PollerChunkInput") {
    enabled: Boolean!
    size: Int64
} 

"""
Config is mandatory, but varies based on the poller kind
"""
input PollerInput @goModel(model: "observe/meta/metatypes.PollerInput") {
    name: String
    description: String
    disabled: Boolean
    retries: Int64
    interval: Duration
    chunk: PollerChunkInput
    tags: JsonObject
    apiReqLimit: RateLimitInput
    datastreamId: ObjectId
    pubsubConfig: PollerPubSubInput
    httpConfig: PollerHTTPInput
    gcpConfig: PollerGCPMonitoringInput
    mongoDBAtlasConfig: PollerMongoDBAtlasInput
    confluentCloudConfig: PollerConfluentCloudInput
    cloudwatchMetricsConfig: PollerCloudwatchMetricsInput
    skipExternalValidation: Boolean

    """
    The optional id of the object that owns the poller. Ex: The id of an AppDataSource instance.
    """
    managedById: ObjectId
}

input PollerPubSubInput @goModel(model: "observe/meta/metatypes.PollerPubSubInput") {
    projectId: String!
    jsonKey: JsonObject!
    subscriptionId: String!
}

input PollerHTTPInput @goModel(model: "observe/meta/metatypes.PollerHTTPInput") {
    method: String
    body: String
    endpoint: String
    contentType: String
    headers: JsonObject

    template: PollerHTTPRequestInput
    requests: [PollerHTTPRequestInput!]
    rules: [PollerHTTPRuleInput!]
    timestamps: [PollerHTTPTimestampInput!]
}

input PollerHTTPTimestampInput @goModel(model: "observe/meta/metatypes.PollerHTTPTimestampInput") {
    name: String
    source: String
    format: PollerHTTPTimestampFormatScheme
    offset: String
    truncate: String
}

input PollerHTTPRequestInput @goModel(model: "observe/meta/metatypes.PollerHTTPRequestInput") {
   url: String
   method: String
   username: String
   password: String
   authScheme: PollerHTTPRequestAuthScheme
   body: String
   headers: JsonObject
   params: JsonObject
}

input PollerHTTPRuleInput @goModel(model: "observe/meta/metatypes.PollerHTTPRuleInput") {
   match: PollerHTTPRequestInput
   decoder: PollerHTTPDecoderInput
   follow: String
}

input PollerHTTPDecoderInput @goModel(model: "observe/meta/metatypes.PollerHTTPDecoderInput") {
   type: String!
}

input PollerGCPMonitoringInput @goModel(model: "observe/meta/metatypes.PollerGCPMonitoringInput") {
    projectId: String!
    jsonKey: JsonObject!
    includeMetricTypePrefixes: [String!]
    excludeMetricTypePrefixes: [String!]
    rateLimit: Int64
    totalLimit: Int64
}

input PollerMongoDBAtlasInput @goModel(model: "observe/meta/metatypes.PollerMongoDBAtlasInput") {
    publicKey: String!
    privateKey: String!
    includeGroups: [String!]
    excludeGroups: [String!]
}

input PollerConfluentCloudInput @goModel(model: "observe/meta/metatypes.PollerConfluentCloudInput") {
    key: String!
    secret: String!
}

input PollerCloudwatchMetricsInput @goModel(model: "observe/meta/metatypes.PollerCloudwatchMetricsInput") {
    filters: [PollerCloudwatchMetricsFilterInput!]!

    delay:    Int64
    period:   Int64

    region:  [String!]
    roleArn: String!
}

input PollerCloudwatchMetricsFilterInput @goModel(model: "observe/meta/metatypes.PollerCloudwatchMetricsFilterInput") {
    namespace:    String!
    metricNames: [String!]
    dimensions:   [PollerCloudwatchMetricsFilterDimensionInput!]
}

input PollerCloudwatchMetricsFilterDimensionInput @goModel(model: "observe/meta/metatypes.PollerCloudwatchMetricsFilterDimensionInput") {
    name:  String!
    value: String
}
