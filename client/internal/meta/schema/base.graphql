schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Query

type Mutation

type Subscription

directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

scalar Any @goModel(model: "observe/meta/metascalar.Any")
scalar CustomerId @goModel(model: "observe/authorization/id.CustomerId")
scalar Duration @goModel(model: "observe/compiler/comptypes.Duration")
scalar Int64 @goModel(model: "observe/meta/metascalar.Int64")
scalar JsonObject @goModel(model: "observe/meta/metascalar.ObjectScalar")
scalar Number @goModel(model: "observe/meta/metascalar.Number")
scalar ObjectId @goModel(model: "observe/compiler/comptypes.ObjectId")
scalar SnowflakeCursor @goModel(model: "observe/meta/metaparser.SnowflakeCursor")
scalar StatsVector @goModel(model: "observe/meta/metastats.Vector")
scalar StringOrID @goModel(model: "observe/meta/metatypes.StringOrID")

"""
Time presented in RFC3339 format.
"""
scalar Time @goModel(model: "observe/meta/metascalar.Time")
scalar UserId @goModel(model: "observe/authorization/id.UserId")

"""
At some point in the future, we may have Segments as business objects,
and be able to bookmark them. Technically, we can bookmark bookmark groups, but
there is no current UI using that feature.
"""
enum ObjectKind @goModel(model: "observe/meta/metatypes.ObjectKind") {
  Dataset
  Worksheet
  BookmarkGroup
  Monitor
  Resource
  Dashboard
}

"""
Currently only used for Monitors
"""
type GeneratedDataset @goModel(model: "observe/meta/metatypes.GeneratedDataset") {
    role: String!
    datasetId: ObjectId!
}

interface FolderObject @goModel(model: "observe/meta/metatypes.FolderObject") {
    folderId: ObjectId!
}

interface AuditedObject @goModel(model: "observe/meta/metatypes.AuditedObject") {
    createdBy: UserId!
    createdByInfo: UserInfo!
    updatedBy: UserId!
    updatedByInfo: UserInfo!
    createdDate: Time!
    updatedDate: Time!
}

"""
stats common to all tokens (ingest, api etc)
"""
interface TokenStats @goModel(model: "observe/meta/metatypes.TokenStats") {
    firstUsed: Time!
    lastUsed: Time!
    lastError: Time
}

interface Token @goModel(model: "observe/meta/metatypes.Token") {
    id: String!
    name: String!
    description: String
    createdBy: UserId!
    createdByInfo: UserInfo!
    updatedBy: UserId!
    updatedByInfo: UserInfo!
    createdDate: Time!
    updatedDate: Time!
    """
    optional stats
    """
    stats: TokenStats
    disabled: Boolean!
}

input ResourceIdInput @goModel(model: "observe/meta/metatypes.ResourceIdInput") {
    datasetId: ObjectId!
    primaryKeyValue: [ColumnAndValueInput!]!
    timeRange: TimeRangeInput
}

type ResourceId @goModel(model: "observe/meta/metatypes.ResourceId") {
    datasetId: ObjectId!
    primaryKeyValue: [ColumnAndValue!]!
    timeRange: TimeRange
}

type TimeRange @goModel(model: "observe/meta/metatypes.TimeRange") {
    start: Time
    end: Time
}

input TimeRangeInput @goModel(model: "observe/meta/metatypes.TimeRange") {
    start: Time
    end: Time
}

type ColumnAndValue @goModel(model: "observe/meta/metatypes.ColumnAndValue") {
    name: String!
    value: String
}

input ColumnAndValueInput @goModel(model: "observe/meta/metatypes.ColumnAndValue") {
    name: String!
    value: String
}

type SourceLoc @goModel(model: "observe/compiler/comptypes.SourceLocation") {
    row: Int64!
    col: Int64!
}

input SourceLocInput @goModel(model: "observe/compiler/comptypes.SourceLocation") {
    row: Int64!
    col: Int64!
}

type SourceSpan @goModel(model: "observe/compiler/comptypes.SourceSpan") {
    start: SourceLoc!
    end: SourceLoc!
}

type ResultStatus @goModel(model: "observe/meta/metascalar.ResultStatus") {
    success: Boolean!
    errorMessage: String!
    detailedInfo: JsonObject
}

interface ErrorInstance @goModel(model: "observe/meta/metatypes.ErrorInstance") {
    """
    When did the error last occur.
    """
    time: Time!

    """
    Error text.
    """
    errorText: String!
}