extend type Query {
    monitorAction(id: ObjectId!): MonitorAction
    getChannelAction(id: ObjectId!): ChannelAction @deprecated(reason:"use monitorAction instead")
    searchMonitorActions(workspaceId: ObjectId, name: String, channelIds: [ObjectId!], ids:[ObjectId!], isPrivate: Boolean): [MonitorAction!]!
    searchChannelActions(workspaceId: ObjectId, name: String, channelIds: [ObjectId!], ids:[ObjectId!], isPrivate: Boolean): [ChannelAction!]! @deprecated(reason:"use searchMonitorActions instead")
    getChannel(id: ObjectId!): Channel
    searchChannels(workspaceId: ObjectId, name: String, boundToMonitors: [ObjectId!]): [Channel!]!

    monitor(id: ObjectId!): Monitor!
    """
    Get the monitor state at the provided point in time.
    Version is a timestamp in nanoseconds.
    """
    monitorVersion(id: ObjectId!, version: String!): Monitor!
    monitorsInWorkspace(workspaceId: ObjectId!): [Monitor!]!
    monitorsForDataset(datasetId: ObjectId!): [Monitor!]!
    notificationsForDataset(datasetId: ObjectId!): [Monitor!]!
    activeNotifications(channelIds: [ObjectId!], importance: NotificationImportance): ActiveNotificationInfo!
    monitorPreviewQuery(monitorInput: MonitorInput!): MultiStageQuery
    """
    Get the query which produces notifications a monitor would have produced at the given version.
    Version is a timestamp in nanoseconds.
    """
    notificationQuery(monitorId: ObjectId!, version: String!): MultiStageQuery
    """
    See OBS-23646. This is a helper to retreive the query information needed to get notifications for a monitor that
    may or may not be historical against previous definitions of the monitor. This is added to handle the
    acquisition of not just the preview query, but the start/end times and any other query params the UI
    needs to make a preview query.
    """
    notificationQueryPreview(monitorId: ObjectId!, version: String!, start: Time!, groupings: JsonObject!): NotificationPreviewQuery
    """
    Build the template payload data for an existing monitor by retrieving the latest notification.
    """
    notificationSampleDataQuery(monitorId: ObjectId!): MonitorSampleData

    """
    Get sample notification data for a monitor with the provided monitor input.
    """
    monitorPreviewSampleDataQuery(workspaceId: ObjectId, monitorId: ObjectId, monitorInput: MonitorInput!, queryParams: QueryParams!): MonitorSampleData
    
    """
    Get monitorSampleData using monitorInput and the results from a previous run of a monitorPreviewQuery generated with the same monitorInput. 
    Results from the previous run are identified by cursorId.
    """
    monitorPreviewSampleDataFromCursor(workspaceId: ObjectId!, monitorId: ObjectId!, monitorInput: MonitorInput!, cursorId: String!): MonitorSampleData

    """
    Receive an actionInput and sample data payload to render all the fields in the mustache template.
    SampleData is the json payload that contains all the fields to render the mustache template.
    """
    renderMustache(actionInput: ActionInput!, sampleData: JsonObject!): MustacheRender!
}

extend type Mutation {
    createMonitorAction(input: MonitorActionInput!): MonitorAction!
    updateMonitorAction(id: ObjectId!, input: MonitorActionInput!): MonitorAction!
    deleteMonitorAction(id: ObjectId!): ResultStatus!
    testMonitorAction(id: ObjectId, input: MonitorActionInput!, payload: String!): ResultStatus!

    createChannelAction(workspaceId: ObjectId!, action: ActionInput!): ChannelAction! @deprecated(reason:"use createMonitorAction instead")
    updateChannelAction(id: ObjectId!, action: ActionInput!): ChannelAction! @deprecated(reason:"use updateMonitorAction instead")
    deleteChannelAction(id: ObjectId!): ResultStatus! @deprecated(reason:"use deleteMonitorAction instead")
    testChannelAction(id: ObjectId, action: ActionInput!, payload: String!): ResultStatus! @deprecated(reason:"use testMonitorAction instead")

    createChannel(workspaceId: ObjectId!, channel: ChannelInput!, actions: [ObjectId!]): Channel!
    updateChannel(id: ObjectId!, channel: ChannelInput, actions: [ObjectId!]): Channel!
    deleteChannel(id: ObjectId!): ResultStatus!

    createMonitor(workspaceId: ObjectId!, monitor: MonitorInput!): MonitorUpdateResult!
    createMonitorWithActions(workspaceId: ObjectId!, monitor: MonitorInput!, newActions:[ActionInput!], addActionsToMonitorIds:[ObjectId!]): MonitorUpdateResult!
    updateMonitor(id: ObjectId!, monitor: MonitorInput!): MonitorUpdateResult!
    """
    Update the monitor.
    - monitor: updates monitor metadata.
    - newActions: new actions to create. See createChannelAction.
    - updateActions: existing actions to update. See updateChannelAction.
    - removeActionsFromMonitorIds: unlink existing actions from this monitor. Private actions will be deleted.
    - addActionsToMonitorIds: link existing actions to this monitor.
    """
    updateMonitorWithActions(
        id: ObjectId!,
        monitor: MonitorInput,
        newActions:[ActionInput!],
        updateActions:[ActionUpdateInput!],
        removeActionsFromMonitorIds:[ObjectId!],
        addActionsToMonitorIds:[ObjectId!]): MonitorUpdateResult!
    deleteMonitor(id: ObjectId!): ResultStatus!
    disableMonitor(id: ObjectId!): ResultStatus!
    debugRenderMonitor(monitor:MonitorInput!): MonitorRender!
    debugRenderMonitorId(id:ObjectId!): MonitorRender!

    addChannelsToMonitors(channelIds: [ObjectId!]!, monitorIds: [ObjectId!]!): ResultStatus!
    addChannelActionsToChannels(actionIds: [ObjectId!]!, channelIds: [ObjectId!]!): ResultStatus!
    setMonitorsForChannel(channelId: ObjectId!, monitorIds:[ObjectId!]!): ResultStatus!
    setChannelsForChannelAction(actionId: ObjectId!, channelIds:[ObjectId!]!): ResultStatus!
}

type Monitor implements WorkspaceObject & AuditedObject @goModel(model: "observe/meta/metatypes.Monitor") {
    # WorkspaceObject
    id: ObjectId!
    name: String!
    iconUrl: String!
    description: String!
    workspaceId: ObjectId!
    managedBy: WorkspaceObject @goField(forceResolver:true)
    managedById: ObjectId

    # AuditedObject
    createdBy: UserId!
    createdByInfo: UserInfo! @goField(forceResolver:true)
    createdDate: Time!
    updatedBy: UserId!
    updatedByInfo: UserInfo! @goField(forceResolver:true)
    updatedDate: Time!

    # Monitor
    source: String!
    isTemplate: Boolean!
    useDefaultFreshness: Boolean!
    disabled: Boolean! @deprecated(reason:"use accelerationDisabled instead")
    lastUpdateSource: String! @deprecated(reason:"never used, no longer supported will be ignored")
    """
    If the input is a resource, the backend creates a link or finds an existing link from the
    monitor back to the resource if that resource comes from a dataset (rather than being created inline). 
    This field contains the name of the link. This can be used to identify the link to use when grouping
    a monitor by input resource. 
    """
    resourceInputLinkName: String! @goField(name:LinkName)
    """
    Static comment for extra information about a monitor available in notification template.
    """
    comment: String
    """
    The source stage may be empty, just specifying an input dataset,
    or it may include actual transform work
    """
    query: MultiStageQuery!
    definition: JsonObject
    rule: MonitorRule!
    notificationSpec: NotificationSpecification!
    channels: [Channel!] @deprecated(reason:"field will be removed in favor of actionIds")
    actions: [MonitorAction!]!

    """
    We preserve monitor update history. Historic monitors do not have activeMonitorInfo populated,
    only the most current (active) monitors do.
    """
    activeMonitorInfo: ActiveMonitorInfo @goField(forceResolver:true)


    # Fields that will be removed once FE migrates to using `activeMonitorInfo`.
    # AccelerableObject
    freshnessGoal: Int64! @deprecated(reason:"use activeMonitorInfo.freshnessGoal instead")
    accelerationInfo: AccelerationInfo! @goField(forceResolver:true) @deprecated(reason:"use activeMonitorInfo.accelerationInfo instead")
    accelerationDisabled: Boolean! @goField(name:disabled) @deprecated(reason:"use activeMonitorInfo.accelerationDisabled instead")

    # Monitor
    generatedDatasetIds: [GeneratedDataset!]! @deprecated(reason:"use activeMonitorInfo.generatedDatasetIds instead")
    status: MonitorStatus! @deprecated(reason:"use activeMonitorInfo.statusInfo instead")
    statusMessage: String! @deprecated(reason:"use activeMonitorInfo.statusInfo instead")
    """
    Check what state this monitor is in.
    """
    statusInfo: MonitorStatusInfo! @goField(forceResolver:true) @deprecated(reason:"use activeMonitorInfo.statusInfo instead")
}

type NotificationInfo @goModel(model: "observe/meta/metatypes.NotificationInfo") {
    lookbackTime: Duration!
    count: Int64!
}

type ActiveMonitorInfo implements AccelerableObject @goModel(model: "observe/meta/metatypes.ActiveMonitorInfo")  {
    # AccelerableObject
    accelerationInfo: AccelerationInfo! @goField(forceResolver:true)
    accelerationDisabled: Boolean!

    # Monitor
    """
    Check what state this monitor is in.
    """
    statusInfo: MonitorStatusInfo! @goField(forceResolver:true)
    generatedDatasetIds: [GeneratedDataset!]!
    """
    Currently active global and per-monitor mute rules, sorted by the startDate.
    """
    muteRules: [MonitorMuteRule!]! @goField(forceResolver:true)
    """
    Gives back the default lookbackTime of 24 hours and the exact notification count for the current version of monitor,
    """
    notificationInfo: NotificationInfo! @goField(forceResolver:true)
}

type MonitorStatusInfoError implements ErrorInstance @goModel(model: "observe/meta/metatypes.MonitorStatusInfoError") {
    """
    When did the error last occur.
    """
    time: Time!

    """
    Error text.
    """
    errorText: String!
}

type MonitorStatusInfo @goModel(model: "observe/meta/metatypes.MonitorStatusInfo") {
    status: MonitorStatus!
    errors: [ErrorInstance!]!
}

type MonitorUpdateResult @goModel(model: "observe/meta/metatypes.MonitorUpdateResult") {
    monitor: Monitor!
    monitorErrors: [String!]
    """
    information about errors that occur in the affected, and/or downstream datasets
    """
    errorDatasets: [DatasetError!]
}

input MonitorInput @goModel(model: "observe/meta/metatypes.MonitorInput") {
    name: String
    iconUrl: String
    description: String
    """
    Static comment for extra information about a monitor available in notification template.
    """
    comment: String
    """
    Examples - "terraform", "webui".
    """
    source: String
    """
    Only when the monitor is updated.
    """
    overwriteSource: Boolean
    """
    The optional id of the object that owns the monitor. Ex: the id of an app that installs the monitor.
    """
    managedById: ObjectId
    disabled: Boolean @deprecated(reason:"use accelerationDisabled instead")
    accelerationDisabled: Boolean @goField(name:disabled)
    isTemplate: Boolean
    """
    Similar to dataset freshness goal, this is in Nanoseconds when received from UI.
    Only changes setting if useDefaultFreshness is false
    """
    freshnessGoal: Int64
    """
    Defaults to true on creation if not specified
    """
    useDefaultFreshness: Boolean
    query: MultiStageQueryInput
    definition: JsonObject
    rule: MonitorRuleInput
    notificationSpec: NotificationSpecificationInput
    channels: [ObjectId!]
}

type NotificationSpecification @goModel(model: "observe/meta/metatypes.NotificationSpecification") {
    importance: NotificationImportance!
    """
    should these go in each applicable Rule instead?
    """
    merge: NotificationMerge            # only matters when talking about distinct resources
    selection: NotificationSelection!    @deprecated(reason:"no longer supported will be ignored") # only matters when talking about distinct resources
    selectionValue: Number!             @deprecated(reason:"no longer supported will be ignored") # for selection
    reminderFrequency: Duration!        # how frequently reminder notifications are sent when alert is open.
    notifyOnReminder: Boolean
    notifyOnClose: Boolean
}

input NotificationSpecificationInput @goModel(model: "observe/meta/metatypes.NotificationSpecificationInput") {
    importance: NotificationImportance
    merge: NotificationMerge
    selection: NotificationSelection @deprecated(reason:"no longer supported will be ignored")
    selectionValue: Number @deprecated(reason:"no longer supported will be ignored")

    # TODO(OB-15357): make notifyOnReminder and notifyOnClose required after we migrate.
    """
    Check if we should send reminder notifications at the specified reminderFrequency.
    """
    notifyOnReminder: Boolean
    """
    Send a notification when this alert becomes inactive.
    """
    notifyOnClose: Boolean
    reminderFrequency: Duration
}

type MonitorGroupInfo @goModel(model: "observe/meta/metatypes.MonitorGroupInfo") {
    """
    GroupBy:
    ┌───────────┬─────────┬──────────────────────────┬─────────────┬────────────┐
    │GroupBy    │Resource │Link                      │Value column │Column Path │
    ├───────────┼─────────┼──────────────────────────┼─────────────┼────────────┤
    │groupName  │Empty    │Non-empty (FK label)      │Empty        │Empty       │
    ├───────────┼─────────┼──────────────────────────┼─────────────┼────────────┤
    │columns    │Empty    │Non-empty (FK Src fields) │Non-empty    │Empty       │
    ├───────────┼─────────┼──────────────────────────┼─────────────┼────────────┤
    │columnPath │Nil      │Nil                       │Nil          │Non-nil     │
    └───────────┴─────────┴──────────────────────────┴─────────────┴────────────┘
    """
    columns: [String!]!
    groupName: String!

    columnPath: MonitorGroupByColumnPath
}

type MonitorGroupByColumnPath @goModel(model: "observe/meta/metatypes.MonitorGroupByColumnPath")  {
    column: String!
    path: String!
}

input MonitorGroupInfoInput @goModel(model: "observe/meta/metatypes.MonitorGroupInfoInput") {
    """
    GroupBy:
    ┌───────────┬─────────┬──────────────────────────┬─────────────┬────────────┐
    │GroupBy    │Resource │Link                      │Value column │Column Path │
    ├───────────┼─────────┼──────────────────────────┼─────────────┼────────────┤
    │groupName  │Empty    │Non-empty (FK label)      │Empty        │Empty       │
    ├───────────┼─────────┼──────────────────────────┼─────────────┼────────────┤
    │columns    │Empty    │Non-empty (FK Src fields) │Non-empty    │Empty       │
    ├───────────┼─────────┼──────────────────────────┼─────────────┼────────────┤
    │columnPath │Nil      │Nil                       │Nil          │Non-nil     │
    └───────────┴─────────┴──────────────────────────┴─────────────┴────────────┘
    """
    columns: [String!]!
    groupName: String!

    columnPath: MonitorGroupByColumnPathInput
}

input MonitorGroupByColumnPathInput @goModel(model: "observe/meta/metatypes.MonitorGroupByColumnPathInput")  {
    column: String!
    path: String!
}

interface MonitorRule @goModel(model: "observe/meta/metatypes.MonitorRule") {
    ruleKind: MonitorRuleKind!
    layout: JsonObject!
    sourceColumn: String!
    groupByGroups: [MonitorGroupInfo!]

    groupBy: MonitorGrouping! @deprecated(reason:"use groupByGroups instead")
    groupByColumns: [String!]! @deprecated(reason:"use groupByGroups instead")
    groupByDatasetIds: [ObjectId!] @deprecated(reason:"use groupByGroups instead")
}

type MonitorRuleThreshold implements MonitorRule @goModel(model: "observe/meta/metatypes.MonitorRuleThreshold") {
    ruleKind: MonitorRuleKind!
    layout: JsonObject!
    sourceColumn: String!
    groupByGroups: [MonitorGroupInfo!]

    groupBy: MonitorGrouping! @deprecated(reason:"use groupByGroups instead")
    groupByColumns: [String!]! @deprecated(reason:"use groupByGroups instead")
    groupByDatasetIds: [ObjectId!] @deprecated(reason:"use groupByGroups instead")

    compareFunction: CompareFunction!
    compareValues: [Number!]!
    lookbackTime: Duration!
    thresholdAggFunction: ThresholdAggFunction!
    expressionSummary: String!
}

input MonitorRuleThresholdInput @goModel(model: "observe/meta/metatypes.MonitorRuleThresholdInput") {
    compareFunction: CompareFunction
    compareValues: [Number!]
    lookbackTime: Duration
    thresholdAggFunction: ThresholdAggFunction
    expressionSummary: String
}

type MonitorRuleLog implements MonitorRule @goModel(model: "observe/meta/metatypes.MonitorRuleLog") {
    ruleKind: MonitorRuleKind!
    layout: JsonObject!
    sourceColumn: String!
    groupByGroups: [MonitorGroupInfo!]

    groupBy: MonitorGrouping! @deprecated(reason:"use groupByGroups instead")
    groupByColumns: [String!]! @deprecated(reason:"use groupByGroups instead")
    groupByDatasetIds: [ObjectId!] @deprecated(reason:"use groupByGroups instead")

    compareFunction: CompareFunction!
    compareValues: [Number!]!
    lookbackTime: Duration!
    expressionSummary: String!
    logStageId: String!
    sourceLogDatasetId: ObjectId
}

input MonitorRuleLogInput @goModel(model: "observe/meta/metatypes.MonitorRuleLogInput") {
    compareFunction: CompareFunction
    compareValues: [Number!]
    lookbackTime: Duration
    expressionSummary: String
    logStageId: String
    sourceLogDatasetId: ObjectId
}

type MonitorRuleChange implements MonitorRule @goModel(model: "observe/meta/metatypes.MonitorRuleChange") {
    ruleKind: MonitorRuleKind!
    layout: JsonObject!
    sourceColumn: String!
    groupByGroups: [MonitorGroupInfo!]

    groupBy: MonitorGrouping! @deprecated(reason:"use groupByGroups instead")
    groupByColumns: [String!]! @deprecated(reason:"use groupByGroups instead")
    groupByDatasetIds: [ObjectId!] @deprecated(reason:"use groupByGroups instead")

    changeType: ChangeType!
    compareFunction: CompareFunction!
    """
      For Relative ChangeType, the value is a multiple -- 0.3 means 30% change
    """
    compareValues: [Number!]!
    aggregateFunction: AggregateFunction!
    """
      The comparison time is established as
      from: now - lookbackTime - baselineTime
      to:   now - lookbackTime
      The triggering time is established as
      from: now - lookbackTime
      to:   now
      (These may end up being approximate, depending on transform scheduling and such)
    """
    lookbackTime: Duration!
    baselineTime: Duration!
}

input MonitorRuleChangeInput @goModel(model: "observe/meta/metatypes.MonitorRuleChangeInput") {
    changeType: ChangeType
    compareFunction: CompareFunction
    """
      For Relative ChangeType, the value is a multiple -- 0.3 means 30% change
    """
    compareValues: [Number!]
    aggregateFunction: AggregateFunction
    """
      The comparison time is established as
      from: now - lookbackTime - baselineTime
      to:   now - lookbackTime
      The triggering time is established as
      from: now - lookbackTime
      to:   now
      (These may end up being approximate, depending on transform scheduling and such)
    """
    lookbackTime: Duration
    baselineTime: Duration
}

type MonitorRuleFacet implements MonitorRule @goModel(model: "observe/meta/metatypes.MonitorRuleFacet") {
    ruleKind: MonitorRuleKind!
    layout: JsonObject!
    sourceColumn: String!
    groupByGroups: [MonitorGroupInfo!]

    groupBy: MonitorGrouping! @deprecated(reason:"use groupByGroups instead")
    groupByColumns: [String!]! @deprecated(reason:"use groupByGroups instead")
    groupByDatasetIds: [ObjectId!] @deprecated(reason:"use groupByGroups instead")

    facetFunction: FacetFunction!
    facetValues: [String!]
    timeFunction: TimeFunction!
    """
    for example, "50" for "more than 50% of the time"
    """
    timeValue: Number
    lookbackTime: Duration!
}

input MonitorRuleFacetInput @goModel(model: "observe/meta/metatypes.MonitorRuleFacetInput") {
    facetFunction: FacetFunction
    facetValues: [String!]
    timeFunction: TimeFunction
    timeValue: Number
    lookbackTime: Duration
}

type MonitorRuleCount implements MonitorRule @goModel(model: "observe/meta/metatypes.MonitorRuleCount") {
    ruleKind: MonitorRuleKind!
    layout: JsonObject!
    sourceColumn: String!
    groupByGroups: [MonitorGroupInfo!]

    groupBy: MonitorGrouping! @deprecated(reason:"use groupByGroups instead")
    groupByColumns: [String!]! @deprecated(reason:"use groupByGroups instead")
    groupByDatasetIds: [ObjectId!] @deprecated(reason:"use groupByGroups instead")

    compareFunction: CompareFunction!
    compareValues: [Number!]!
    lookbackTime: Duration!
}

input MonitorRuleCountInput @goModel(model: "observe/meta/metatypes.MonitorRuleCountInput") {
    compareFunction: CompareFunction
    compareValues: [Number!]
    lookbackTime: Duration
}

type MonitorRulePromote implements MonitorRule @goModel(model: "observe/meta/metatypes.MonitorRulePromote") {
    ruleKind: MonitorRuleKind!
    layout: JsonObject!
    sourceColumn: String!
    """
    GroupBy is ignored for Promote Monitors
    """
    groupByGroups: [MonitorGroupInfo!]

    groupBy: MonitorGrouping! @deprecated(reason:"use groupByGroups instead")
    groupByColumns: [String!]! @deprecated(reason:"use groupByGroups instead")
    groupByDatasetIds: [ObjectId!] @deprecated(reason:"use groupByGroups instead")

    primaryKey: [String!]!
    descriptionField: String
    kindField: String
}

input MonitorRulePromoteInput @goModel(model: "observe/meta/metatypes.MonitorRulePromoteInput") {
    primaryKey: [String!]
    descriptionField: String
    kindField: String
}


input MonitorRuleInput @goModel(model: "observe/meta/metatypes.MonitorRuleInput") {
    layout: JsonObject
    sourceColumn: String
    """
    Takes precedence over GroupByColumns -- will replace contents of GroupByColumns
    Specify value columns with an MonitorGroupInfo with a nil datasetId
    """
    groupByGroups: [MonitorGroupInfoInput!]

    groupBy: MonitorGrouping @deprecated(reason:"use groupByGroups instead")
    groupByColumns: [String!] @deprecated(reason:"use groupByGroups instead")
    groupByDatasetIds: [ObjectId!] @deprecated(reason:"use groupByGroups instead")


    """
    exactly one of these should be used
    """
    changeRule: MonitorRuleChangeInput
    countRule: MonitorRuleCountInput
    facetRule: MonitorRuleFacetInput
    thresholdRule: MonitorRuleThresholdInput
    logRule: MonitorRuleLogInput
    promoteRule: MonitorRulePromoteInput
}

enum MonitorRuleKind @goModel(model: "observe/meta/metatypes.MonitorRuleKind") {
    Threshold
    Log
    Change
    Facet
    Count
    Promote
}

enum MonitorGrouping @goModel(model: "observe/meta/metatypes.MonitorGrouping") {
    None @deprecated(reason:"use groupByGroups instead")
    Value @deprecated(reason:"use groupByGroups instead")
    Resource @deprecated(reason:"use groupByGroups instead")
    LinkTarget @deprecated(reason:"use groupByGroups instead")
}

enum MonitorStatus @goModel(model: "observe/meta/metatypes.MonitorStatus") {
    Creating
    Monitoring
    Stopped
    Triggering
    Error
}

enum NotificationImportance @goModel(model: "observe/meta/metatypes.NotificationImportance") {
    Informational
    Important
    Missing
}

enum NotificationMerge @goModel(model: "observe/meta/metatypes.NotificationMerge") {
    Merged
    Separate
}

enum NotificationSelection @goModel(model: "observe/meta/metatypes.NotificationSelection") {
    Any
    All
    Percentage
    Count
}

enum AggregateFunction @goModel(model: "observe/meta/metatypes.AggregateFunction") {
    """
    On Average
    """
    Avg

    """
    In Total
    """
    Sum

    """
    At All Times (unintuitive but true!)
    """
    Min

    """
    At Least Once (unintuitive but true!)
    """
    Max
}

enum ChangeType @goModel(model: "observe/meta/metatypes.ChangeType") {
    Absolute
    Relative
}

enum CompareFunction @goModel(model: "observe/meta/metatypes.CompareFunction") {
    Equal
    NotEqual
    Greater
    GreaterOrEqual
    Less
    LessOrEqual
    IsNull
    IsNotNull
}

enum FacetFunction @goModel(model: "observe/meta/metatypes.FacetFunction") {
    Equals
    NotEqual
    Contains
    DoesNotContain
    IsNull
    IsNotNull
}

enum TimeFunction @goModel(model: "observe/meta/metatypes.TimeFunction") {
    Never
    AtLeastOnce
    AtAllTimes
    AtLeastPercentageTime
    LessThanPercentageTime
    NoEvents
    AllEvents
    CountTimes
}

enum ThresholdAggFunction @goModel(model: "observe/meta/metatypes.ThresholdAggFunction") {
    AtAllTimes
    AtLeastOnce
    OnAverage
    InTotal
}

type Channel @goModel(model: "observe/meta/metatypes.Channel") {
    id: ObjectId!
    name: String!
    iconUrl: String!
    description: String!
    workspaceId: ObjectId!
    createdBy: UserId!
    createdByInfo: UserInfo! @goField(forceResolver:true)
    createdDate: Time!
    updatedBy: UserId!
    updatedByInfo: UserInfo! @goField(forceResolver:true)
    updatedDate: Time!
    actions: [MonitorAction!]! @goField(name:CacheActions)
    monitors: [Monitor!]! @goField(forceResolver:true)
}

input ChannelInput @goModel(model: "observe/meta/metatypes.ChannelInput") {
    name: String
    iconUrl: String
    description: String
}

interface MonitorAction @goModel(model: "observe/meta/metatypes.MonitorAction") {
    id: ObjectId!
    name: String!
    iconUrl: String!
    description: String!
    workspaceId: ObjectId!
    createdBy: UserId!
    createdByInfo: UserInfo!
    createdDate: Time!
    updatedBy: UserId!
    updatedByInfo: UserInfo!
    updatedDate: Time!
    """
    Rate limit measured in nanoseconds.
    For email actions the minimum is: 10 / 10min
    For webhook actions the minimum is: 10 / 1s
    """
    rateLimit: Duration!
    channels: [Channel!] @goField(forceResolver:true) @deprecated(reason:"field will be removed in favor of actionIds")
    notifyOnClose: Boolean!
    notifyOnReminder: Boolean!
    isPrivate: Boolean!
    monitors: [Monitor!]! @goField(forceResolver:true)
}

# TODO(OB-14177): remove this, we have MonitorAction now.
interface ChannelAction @goModel(model: "observe/meta/metatypes.MonitorAction") {
    id: ObjectId!
    name: String!
    iconUrl: String!
    description: String!
    workspaceId: ObjectId!
    createdBy: UserId!
    createdByInfo: UserInfo!
    createdDate: Time!
    updatedBy: UserId!
    updatedByInfo: UserInfo!
    updatedDate: Time!
    rateLimit: Duration!
    channels: [Channel!] @goField(forceResolver:true) @deprecated(reason:"field will be removed in favor of actionIds")
    notifyOnClose: Boolean!
    notifyOnReminder: Boolean!
    isPrivate: Boolean!
    monitors: [Monitor!]! @goField(forceResolver:true)
}

type EmailAction implements MonitorAction & ChannelAction @goModel(model: "observe/meta/metatypes.EmailAction") {
    id: ObjectId!
    name: String!
    iconUrl: String!
    description: String!
    workspaceId: ObjectId!
    createdBy: UserId!
    createdByInfo: UserInfo! @goField(forceResolver:true)
    createdDate: Time!
    updatedBy: UserId!
    updatedByInfo: UserInfo! @goField(forceResolver:true)
    updatedDate: Time!
    rateLimit: Duration!
    channels: [Channel!] @goField(forceResolver:true) @deprecated(reason:"field will be removed in favor of actionIds")

    subjectTemplate: String!
    bodyTemplate: String!
    isHtml: Boolean!
    fragments: JsonObject!
    notifyOnClose: Boolean!
    notifyOnReminder: Boolean!
    isPrivate: Boolean!
    monitors: [Monitor!]! @goField(forceResolver:true)

    targetUsers: [UserId!]!
    targetAddresses: [String!]!
    targetUserStates: [EmailActionUserState!]! @goField(forceResolver:true)
    targetEmailStates: [EmailActionEmailState!]! @goField(forceResolver:true)
}

enum EmailActionTargetState @goModel(model: "observe/meta/metatypes.AddressState") {
	Verified
	NotVerified
	Pending
	Unsubscribed
	Bounced
}

type EmailActionUserState @goModel(model: "observe/meta/metatypes.EmailActionUserState") {
    userId: UserId!
    state: EmailActionTargetState!
}

type EmailActionEmailState @goModel(model: "observe/meta/metatypes.EmailActionEmailState") {
    email: String!
    state: EmailActionTargetState!
}

input ActionInput @goModel(model: "observe/meta/metatypes.ActionInput") {
    name: String
    iconUrl: String
    description: String
    rateLimit: Duration
    notifyOnClose: Boolean
    notifyOnReminder: Boolean
    # TODO(OB-14177): make this required.
    isPrivate: Boolean

    email: EmailActionInput
    webhook: WebhookActionInput
}

input MonitorActionInput @goModel(model: "observe/meta/metatypes.MonitorActionInput") {
    # payload
    """
    Rate limit measured in nanoseconds.
    For email actions the minimum is: 10 / 10min
    For webhook actions the minimum is: 10 / 1s
    """
    rateLimit: Duration
    notifyOnClose: Boolean!
    notifyOnReminder: Boolean!
    isPrivate: Boolean!

    email: EmailActionInput
    webhook: WebhookActionInput

    # WorkspaceObject
    workspaceId: ObjectId!
    name: String!
    iconUrl: String
    description: String
    managedById: ObjectId
    # FolderObject
    folderId: ObjectId
}

"""
Input for updateMonitorWithActions.updateActions()
"""
input ActionUpdateInput @goModel(model: "observe/meta/metatypes.ActionUpdateInput") {
    id: ObjectId!
    name: String
    iconUrl: String
    description: String
    rateLimit: Duration
    notifyOnClose: Boolean
    notifyOnReminder: Boolean
    # TODO(OB-14177): make this required.
    isPrivate: Boolean

    email: EmailActionInput
    webhook: WebhookActionInput
}


input EmailActionInput @goModel(model: "observe/meta/metatypes.EmailActionInput") {
    targetUsers: [UserId!]
    targetAddresses: [String!]
    subjectTemplate: String
    bodyTemplate: String
    isHtml: Boolean
    """
    Fragments are fields that users can edit on simple mode.
    For example,
    fragments.title = {{notification.kind}} fired off at {{notification.startTime}}
    is available in all other templates as {{fragments.title}}
    """
    fragments: JsonObject
}

type WebhookAction implements MonitorAction & ChannelAction @goModel(model: "observe/meta/metatypes.WebhookAction") {
    id: ObjectId!
    name: String!
    iconUrl: String!
    description: String!
    workspaceId: ObjectId!
    createdBy: UserId!
    createdByInfo: UserInfo! @goField(forceResolver:true)
    createdDate: Time!
    updatedBy: UserId!
    updatedByInfo: UserInfo! @goField(forceResolver:true)
    updatedDate: Time!
    rateLimit: Duration!
    channels: [Channel!] @goField(forceResolver:true) @deprecated(reason:"field will be removed in favor of actionIds")

    templateName: String!
    urlTemplate: String!
    method: String!
    headers: [WebhookHeader!]!
    bodyTemplate: String!
    fragments: JsonObject!
    notifyOnClose: Boolean!
    notifyOnReminder: Boolean!
    isPrivate: Boolean!
    monitors: [Monitor!]! @goField(forceResolver:true)
}

input WebhookActionInput @goModel(model: "observe/meta/metatypes.WebhookActionInput") {
    """
    If the templateName is not set, it will be set as an empty string.
    """
    templateName: String
    urlTemplate: String
    method: String
    headers: [WebhookHeaderInput!]
    bodyTemplate: String
    """
    Fragments are fields that users can edit on simple mode.
    For example,
    fragments.title = {{notification.kind}} fired off at {{notification.startTime}}
    is available in all other templates as {{fragments.title}}
    """
    fragments: JsonObject
}

type WebhookHeader @goModel(model: "observe/meta/metatypes.WebhookHeader") {
    header: String!
    valueTemplate: String!
}

input WebhookHeaderInput @goModel(model: "observe/meta/metatypes.WebhookHeader") {
    header: String!
    valueTemplate: String!
}

"""
If the action is somehow broken or unknown, some message
about what went wrong for the action goes into message, and
some JSON payload that may or may not be decodable goes into
payload.
"""
type UnknownAction implements MonitorAction & ChannelAction @goModel(model: "observe/meta/metatypes.UnknownAction") {
    id: ObjectId!
    name: String!
    iconUrl: String!
    description: String!
    workspaceId: ObjectId!
    createdBy: UserId!
    createdByInfo: UserInfo! @goField(forceResolver:true)
    createdDate: Time!
    updatedBy: UserId!
    updatedByInfo: UserInfo! @goField(forceResolver:true)
    updatedDate: Time!
    rateLimit: Duration!
    channels: [Channel!] @goField(forceResolver:true) @deprecated(reason:"field will be removed in favor of actionIds")

    message: String!
    payload: String!
    notifyOnClose: Boolean!
    notifyOnReminder: Boolean!
    isPrivate: Boolean!
    monitors: [Monitor!]! @goField(forceResolver:true)
}

type ActiveNotification @goModel(model: "observe/meta/metatypes.ActiveNotification") {
  monitorId: ObjectId!
  kind: String!
  description: String!
  validFrom: Time!
  validTo: Time!
  instanceUrl: String!
  lastNotificationDate: Time!
  status: String!
  importance: NotificationImportance!
}

"""
notifications is limited to 20
"""
type ActiveNotificationInfo @goModel(model: "observe/meta/metatypes.ActiveNotificationInfo") {
    """
    Count of Active Notifications filtered by the provided channel ids.
    """
    count: Int!
    """
    Count of Active Notifications filtered by the provided channel ids and by importance, if it's provided.
    """
    filteredCount: Int!
    notifications: [ActiveNotification!]!
}

type MonitorRender @goModel(model: "observe/meta/metatypes.MonitorRender") {
    opalText: String!
    error: String!
}

type MustacheRender @goModel(model: "observe/meta/metatypes.MustacheRender") {
    emailSubject: String
    emailBody: String
    
    webhookURL: String
    """
    WebhookHeaders is a json representation of map[string][]string.
    An example would be:
    {"contentType": ["TestMonitor"], "uuid": ["f779e582-0daf-5a21-853d-489862b3e4b5"]}
    """
    webhookHeaders: JsonObject
    webhookBody: String
}

type MonitorSampleData @goModel(model: "observe/meta/metatypes.MonitorSampleData") {
    payload: JsonObject!
}

type NotificationPreviewQueryParams @goModel(model: "observe/meta/metatypes.NotificationPreviewQueryParams") {
    startTime: Time!
    endTime: Time!
}

type NotificationPreviewQuery @goModel(model: "observe/meta/metatypes.NotificationPreviewQuery") {
    params: NotificationPreviewQueryParams!
    query: MultiStageQuery!
}
