extend type Query {
    """
    by default, get bad auth tokens from the last day, for the requesting customer
    """
    badAuthTokens(fromTime: Time, toTime: Time, customerId: CustomerId): AuthtokenUsage!


    """
    this lets the client generate an error message. Good for testing. Probably not good for long-term production.
    """
    panic(text: String!): String!

    deferredForeignKeys(selector: DeferredForeignKeySelectorInput): [DeferredForeignKey!]
    deferredForeignKey(id: ObjectId!): DeferredForeignKey
    """
    Get all the correlation tags defined.
    """
    searchCorrelationTag(workspaceId: ObjectId!, nameExact: String, nameSubstring: String): [String!]
}

extend type Mutation {
    createDeferredForeignKey(workspaceId: ObjectId!, data: DeferredForeignKeyInput!): DeferredForeignKey
    updateDeferredForeignKey(id: ObjectId!, data: DeferredForeignKeyInput!): DeferredForeignKey
    deleteDeferredForeignKey(id: ObjectId!): ResultStatus

    addCorrelationTag(datasetId: ObjectId!, path: LinkFieldInput!, tag: String!): ResultStatus!
    removeCorrelationTag(datasetId: ObjectId!, path: LinkFieldInput!, tag: String!): ResultStatus!
}

extend type Subscription {
    testEmptySubscribe: String!
}


type AuthtokenInstance @goModel(model: "observe/meta/metatypes.AuthtokenInstance") {
    """
    TokenFragment is the first five characters of the attempted-to-use token
    We can't give you more of the token, because that would be leaking secrets.
    Also, we can't give you the token "name" because the token was likely already
    purged out of the database, and thus there *is* no name that we know of -- the
    token is just ... a bad token.
    """
    tokenFragment: String!
    """
    TokenHash is the internal hash of the token. This is helpful for Observe when
    tracing this down, but doesn't help the user identify the token at all
    """
    tokenHash: String!
    """
    Earliest use time within the window of this token
    """
    earliestUse: Time!
    """
    Latest use time within the window of this token
    """
    latestUse: Time!
    """
    Total use count within the window of this token
    """
    useCount: Int64!
}

type AuthtokenUsage @goModel(model: "observe/meta/metatypes.AuthtokenUsage") {
    badTokens: [AuthtokenInstance!]
}

input DeferredForeignKeySelectorInput @goModel(model: "observe/meta/metatypes.DeferredForeignKeySelector") {
    workspace: ObjectId
    excludeResolved: Boolean
    excludeUnresolved: Boolean
    forDataset: ObjectId
    managedById: ObjectId
}

type DeferredDatasetReference @goModel(model: "observe/meta/metatypes.DeferredDatasetReference") {
    datasetId: ObjectId
    datasetPath: String
}

input DeferredDatasetReferenceInput @goModel(model: "observe/meta/metatypes.DeferredDatasetReference") {
    datasetId: ObjectId
    """
    A path may specify "Workspace.Datasetname", or it may just specify
    Datasetname, in which case it is relative to the Workspace that the
    Potential Foreign Key lives in.
    """
    datasetPath: String
}

type ResolvedForeignKey @goModel(model: "observe/meta/metatypes.ResolvedForeignKey") {
    sourceId: ObjectId! @goField(name:SourceDatasetID)
    targetId: ObjectId! @goField(name:TargetDatasetID)
    sourceDataset: Dataset! @goField(forceResolver:true)
    targetDataset: Dataset! @goField(forceResolver:true)
}

type DeferredForeignKeyStatus @goModel(model: "observe/meta/metatypes.DeferredForeignKeyStatus") {
    foundSource: Boolean!
    foundTarget: Boolean!
    matchedSourceFields: Boolean!
    matchedTargetFields: Boolean!
    fieldTypesAreComparable: Boolean!
    errorText: String!
}

type DeferredForeignKey @goModel(model: "observe/meta/metatypes.DeferredForeignKey") {
    id: ObjectId!
    workspaceId: ObjectId!
    sourceDataset: DeferredDatasetReference
    targetDataset: DeferredDatasetReference
    # Syntax of srcFields - source-column.path-within-column
    # A DFK could have two kinds of sources
    # 1. A column
    # 2. A key within the column
    # In case of (1), use column name as the source. Example `column1`, `my attributes`
    # In case of (2), use Javascript syntax for the path 
    # Example - with `obj` as an object column, to create a link from a key from within this object, srcFields could be
    # `obj.key` or `obj."spaced key"` or `obj.parent["key"]`
    srcFields: [String!]
    dstFields: [String!]
    label: String
    resolution: ResolvedForeignKey
    status: DeferredForeignKeyStatus!
    managedById: ObjectId
}

input DeferredForeignKeyInput @goModel(model: "observe/meta/metatypes.DeferredForeignKey") {
    sourceDataset: DeferredDatasetReferenceInput
    targetDataset: DeferredDatasetReferenceInput
    srcFields: [String!]
    dstFields: [String!]
    """
    The API will make up a label if it's specified as empty.
    """
    label: String
    managedById: ObjectId
}

type RateLimitConfig @goModel(model: "observe/meta/metatypes.RateLimitConfig") {
    rate: Float!
    burst: Int64
}

# RateLimitInput configures a rate limiter which controls how frequently events are allowed to happen.
# It implements a "token bucket" of size 'burst', initially full and refilled at rate 'rate' tokens per second.
# Informally, in any large enough time interval, the Limiter limits the rate to r tokens per second, with a maximum burst size of b events.
# See https://en.wikipedia.org/wiki/Token_bucket for more about token buckets.
input RateLimitInput @goModel(model: "observe/meta/metatypes.RateLimitInput") {
    # rate defines the maximum frequency of some events. rate is represented as number of events per second.
    rate: Float!

    # Increasing 'burst' allows for processing more elements before the rate limiter rejects or blocks events.
    # Specifically, it is the size of the the token bucket.
    burst: Int64
}

