extend type Query {
    datastream(id: ObjectId!): Datastream!
    datastreams(workspaceId: ObjectId!, name: String): [Datastream!]!
}

extend type Mutation {
    createDatastream(workspaceId: ObjectId!, datastream: DatastreamInput!): Datastream!
    updateDatastream(id: ObjectId!, datastream: DatastreamInput!): Datastream!
    deleteDatastream(id: ObjectId!): ResultStatus!
}

type TimeSeriesValue @goModel(model: "observe/meta/metatypes.TimeSeriesValue") {
    time: Time!
    value: Int64!
}

"""
stats common to datastream sources such as tokens, pollers etc
"""
interface DatastreamSourceStats @goModel(model: "observe/meta/metatypes.DatastreamSourceStats") {
    firstIngest: Time!
    lastIngest: Time!
    lastError: Time
    errors: [DatastreamError!]
    observations: [TimeSeriesValue!]
    volumeBytes: [TimeSeriesValue!]
}

type DatastreamError @goModel(model: "observe/meta/metatypes.DatastreamError") {
    time: Time!
    message: String!
    code: Int64
}

"""
summarized per datastream stats
"""
type DatastreamStats @goModel(model: "observe/meta/metatypes.DatastreamStats") {
    firstIngest: Time
    lastIngest: Time
    lastError: Time
    numTokens: Int64!
    """
    Per minute observation counts for the past hour
    """
    observations: [TimeSeriesValue!]
    """
    Per minute ingest volume bytes for the past hour
    """
    volumeBytes: [TimeSeriesValue!]
    """
    Total observations for the past hour derived from the above per minute counts
    """
    totalObservations: Int64!
    """
    Total volume bytes for the past hour derived from the above per minute counts
    """
    totalVolumeBytes: Int64!
}

enum DatastreamState @goModel(model: "observe/meta/metatypes.DatastreamState") {
    Disabled
    Enabled
    LiveMode
}

type DatastreamPrometheus @goModel(model: "observe/meta/metatypes.DatastreamPrometheusOutput") {
    enabled: Boolean!
}

type DatastreamOtelLogs @goModel(model: "observe/meta/metatypes.DatastreamOtelLogsOutput") {
    enabled: Boolean!
}

type DatastreamK8sEntity @goModel(model: "observe/meta/metatypes.DatastreamK8sEntityOutput") {
    enabled: Boolean!
}

type DatastreamDirectWrite @goModel(model: "observe/meta/metatypes.DatastreamDirectWriteOutput") {
    prometheus:  DatastreamDirectWriteInfoPrometheus
    otelLogs:    DatastreamDirectWriteInfo
    otelMetrics: DatastreamDirectWriteInfo
    k8sEntity:   DatastreamDirectWriteInfo
    otelTrace:   DatastreamDirectWriteInfoOtelTrace
}

type DatastreamDirectWriteInfo @goModel(model: "observe/meta/metatypes.DatastreamDirectWriteInfoOutput") {
    datasetId: ObjectId!
}

type DatastreamDirectWriteInfoPrometheus @goModel(model: "observe/meta/metatypes.DatastreamDirectWriteInfoPrometheusOutput") {
    datasetId: ObjectId!
    metadataDatasetId: ObjectId!
}

type DatastreamDirectWriteInfoOtelTrace @goModel(model: "observe/meta/metatypes.DatastreamDirectWriteInfoOtelTraceOutput") {
    spanDatasetId: ObjectId!
    spanEventDatasetId: ObjectId!
    spanLinkDatasetId: ObjectId!
}

type Datastream implements WorkspaceObject & AuditedObject & FolderObject @goModel(model: "observe/meta/metatypes.Datastream") {
    id: ObjectId!
    name: String!
    description: String
    iconUrl: String
    customerId: CustomerId!
    workspaceId: ObjectId!
    managedBy: WorkspaceObject @goField(forceResolver:true)
    managedById: ObjectId
    folderId: ObjectId!
    datasetId: ObjectId
    createdBy: UserId!
    createdByInfo: UserInfo! @goField(forceResolver:true)
    updatedBy: UserId!
    updatedByInfo: UserInfo! @goField(forceResolver:true)
    createdDate: Time!
    updatedDate: Time!
    state: DatastreamState!
    tokens(appId: ObjectId, moduleId: String): [DatastreamToken!] @goField(forceResolver:true)
    pollers(appId: ObjectId, moduleId: String): [Poller!] @goField(forceResolver:true)
    filedrops: [Filedrop!] @goField(forceResolver:true)
    stats: DatastreamStats @goField(forceResolver:true)
    externalSourceId: ObjectId


}

input DatastreamInput @goModel(model: "observe/meta/metatypes.DatastreamInput") {
    name: String!
    description: String
    iconUrl: String
    disabled: Boolean
    externalSourceId: ObjectId


}

input DatastreamPrometheusInput @goModel(model: "observe/meta/metatypes.DatastreamPrometheusInput") {
    enabled: Boolean!
}

input DatastreamOtelLogsInput @goModel(model: "observe/meta/metatypes.DatastreamOtelLogsInput") {
    enabled: Boolean!
}

input DatastreamK8sEntityInput @goModel(model: "observe/meta/metatypes.DatastreamK8sEntityInput") {
    enabled: Boolean!
}

input DatastreamDirectWriteInput @goModel(model: "observe/meta/metatypes.DatastreamDirectWriteInput") {
    prometheus: Boolean
    otelLogs: Boolean
    otelMetrics: Boolean
    k8sEntity: Boolean
    otelTrace: Boolean
}

interface DatastreamSourceAppMetadata @goModel(model: "observe/meta/metatypes.DatastreamSourceAppMetadata") {
    appId: ObjectId!
    moduleId: String
    instructions: String!
    datasourceName: String!
}
