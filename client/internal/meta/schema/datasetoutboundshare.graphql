# Outbound dataset share objects
# this file is auto-generated, do not edit
extend type Query {
    datasetOutboundShare(id: ObjectId!): DatasetOutboundShare!
    searchDatasetOutboundShare(workspaceId: ObjectId, folderId: ObjectId, nameExact: String, nameSubstring: String): DatasetOutboundShareSearchResult!
}

extend type Mutation {
    createDatasetOutboundShare(workspaceId: ObjectId!, datasetID: ObjectId!, outboundShareID: ObjectId!, input: DatasetOutboundShareInput!): DatasetOutboundShare!
    updateDatasetOutboundShare(id: ObjectId!, input: DatasetOutboundShareInput!): DatasetOutboundShare!
    deleteDatasetOutboundShare(id: ObjectId!): ResultStatus!
}

enum DatasetOutboundShareState @goModel(model: "observe/meta/metatypes.DatasetOutboundShareState") {
  Error
  Live
  Pending
  Unavailable
}

type DatasetOutboundShareStatus @goModel(model: "observe/meta/metatypes.DatasetOutboundShareStatus") {
    # payload
    state: DatasetOutboundShareState!
    error: String
}

input DatasetOutboundShareStatusInput @goModel(model: "observe/meta/metatypes.DatasetOutboundShareStatusInput") {
    # payload
    state: DatasetOutboundShareState!
    error: String
}

type DatasetOutboundShare implements WorkspaceObject & AuditedObject & FolderObject @goModel(model: "observe/meta/metatypes.DatasetOutboundShare") {
    # payload
    datasetID: ObjectId!
    outboundShareID: ObjectId!
    schemaName: String!
    viewName: String!
    status: DatasetOutboundShareStatus! @goField(forceResolver: true)
    """
    The freshness goal for the outbound share, in nanoseconds. This determines the maximum staleness for the shared dataset. Newer data may not yet be accelerated (materialized) and will not be returned in Snowflake queries for the share. To avoid additional acceleration and minimize cost, set this to 1 hour (3600000000000), the maximum staleness of datasets when freshness decay is active.
    """
    freshnessGoal: Int64!
    # WorkspaceObject
    id: ObjectId!
    workspaceId: ObjectId!
    name: String!
    iconUrl: String
    description: String
    managedById: ObjectId
    managedBy: WorkspaceObject @goField(forceResolver: true)

    # FolderObject
    folderId: ObjectId!

    # AuditedObject
    createdBy: UserId!
    createdDate: Time!
    createdByInfo: UserInfo! @goField(forceResolver: true)
    updatedBy: UserId!
    updatedDate: Time!
    updatedByInfo: UserInfo! @goField(forceResolver: true)
}

input DatasetOutboundShareInput @goModel(model: "observe/meta/metatypes.DatasetOutboundShareInput") {
    # payload
    # immutable: datasetID: ObjectId!
    # immutable: outboundShareID: ObjectId!
    schemaName: String!
    viewName: String!
    # resolver: status: DatasetOutboundShareStatusInput!
    freshnessGoal: Int64!
    # WorkspaceObject
    name: String!
    iconUrl: String
    description: String
    managedById: ObjectId

    # FolderObject
    folderId: ObjectId
}

type DatasetOutboundShareSearchResult @goModel(model: "observe/meta/metatypes.DatasetOutboundShareSearchResult") {
    results: [DatasetOutboundShare!]!
}
