# this file is auto-generated, do not edit
extend type Query {
    snowflakeOutboundShare(id: ObjectId!): SnowflakeOutboundShare!
    searchSnowflakeOutboundShare(workspaceId: ObjectId, folderId: ObjectId, nameExact: String, nameSubstring: String): SnowflakeOutboundShareSearchResult!
}

extend type Mutation {
    createSnowflakeOutboundShare(workspaceId: ObjectId!, input: SnowflakeOutboundShareInput!): SnowflakeOutboundShare!
    updateSnowflakeOutboundShare(id: ObjectId!, input: SnowflakeOutboundShareInput!): SnowflakeOutboundShare!
    deleteSnowflakeOutboundShare(id: ObjectId!): ResultStatus!
}

# Represents a Snowflake share from Observe to a customer-managed Snowflake account. All share mutations require the Manager role rather than the typical Editor role. By default, only administrators have this access for all workspace objects. However, administrators can grant other users access to sharing mutations via RBAC.
type SnowflakeOutboundShare implements WorkspaceObject & AuditedObject & FolderObject @goModel(model: "observe/meta/metatypes.SnowflakeOutboundShare") {
    # payload
    """
    The fully qualified name of the Snowflake share, for use in a consumer account.
    """
    shareName: String!
    """
    The Snowlake accounts that have access to the share.
    """
    accounts: [SnowflakeAccount!]!
    shareNameInternal: String!
    databaseName: String!
    schemaName: String!
    # tramp data: computedShareName: String!
    # tramp data: computedShareNameInternal: String!
    # tramp data: computedDatabaseName: String!
    # tramp data: computedSchemaName: String!
    # WorkspaceObject
    id: ObjectId!
    workspaceId: ObjectId!
    name: String!
    iconUrl: String
    description: String
    managedById: ObjectId
    managedBy: WorkspaceObject @goField(forceResolver: true)

    # FolderObject
    folderId: ObjectId!

    # AuditedObject
    createdBy: UserId!
    createdDate: Time!
    createdByInfo: UserInfo! @goField(forceResolver: true)
    updatedBy: UserId!
    updatedDate: Time!
    updatedByInfo: UserInfo! @goField(forceResolver: true)
}

input SnowflakeOutboundShareInput @goModel(model: "observe/meta/metatypes.SnowflakeOutboundShareInput") {
    # payload
    # not in input: shareName: String!
    accounts: [SnowflakeAccountInput!]!
    # not in input: shareNameInternal: String!
    # not in input: databaseName: String!
    # not in input: schemaName: String!
    # tramp field: computedShareName: String!
    # tramp field: computedShareNameInternal: String!
    # tramp field: computedDatabaseName: String!
    # tramp field: computedSchemaName: String!
    # WorkspaceObject
    name: String!
    iconUrl: String
    description: String
    managedById: ObjectId

    # FolderObject
    folderId: ObjectId
}

type SnowflakeOutboundShareSearchResult @goModel(model: "observe/meta/metatypes.SnowflakeOutboundShareSearchResult") {
    results: [SnowflakeOutboundShare!]!
}
type SnowflakeAccount @goModel(model: "observe/meta/metatypes.SnowflakeAccount") {
    # payload
    """
    The name of the Snowflake account.
    """
    account: String!
    """
    The name of the organization that owns the Snowflake account.
    """
    organization: String!
}

input SnowflakeAccountInput @goModel(model: "observe/meta/metatypes.SnowflakeAccountInput") {
    # payload
    account: String!
    organization: String!
}

