# A data source that loads data from a cloud object storage service provider into Observe platform Must be associated with a datastream
# this file is auto-generated, do not edit
"""
Configurations related to the cloud object storage service provider
"""
interface FiledropProviderConfig @goModel(model: "observe/meta/metatypes.FiledropProviderConfig") {
    type: FiledropProviderType!
}

"""
Information of the Observe-created filedrop endpoint
"""
interface FiledropEndpoint @goModel(model: "observe/meta/metatypes.FiledropEndpoint") {
    type: FiledropEndpointType!
}

extend type Mutation {
    """
    Enable or disable an existing filedrop
    """
    setFiledropDisabled(id: ObjectId!, disabled: Boolean!): ResultStatus!
}

extend type Query {
    filedrop(id: ObjectId!): Filedrop!
    searchFiledrop(workspaceId: ObjectId, folderId: ObjectId, nameExact: String, nameSubstring: String): FiledropSearchResult!
}

extend type Mutation {
    createFiledrop(workspaceId: ObjectId!, datastreamID: ObjectId!, input: FiledropInput!): Filedrop!
    updateFiledrop(id: ObjectId!, input: FiledropInput!): Filedrop!
    deleteFiledrop(id: ObjectId!): ResultStatus!
}

enum FiledropEndpointType @goModel(model: "observe/meta/metatypes.FiledropEndpointType") {
    S3
}

enum FiledropProviderType @goModel(model: "observe/meta/metatypes.FiledropProviderType") {
    Aws
}

enum FiledropStatus @goModel(model: "observe/meta/metatypes.FiledropStatus") {
    Disabled
    Initializing
    Running
    Updating
}

type Filedrop implements WorkspaceObject & AuditedObject & FolderObject @goModel(model: "observe/meta/metatypes.Filedrop") {
    # payload
    """
    status of the filedrop
    """
    status: FiledropStatus!
    disabled: Boolean
    """
    ID of the datastream associated with the filedrop
    """
    datastreamID: ObjectId!
    """
    ID of the datastream token managed by the filedrop
    """
    datastreamTokenID: String!
    config: FiledropConfig!
    endpoint: FiledropEndpoint!
    # tramp data: metadata: FiledropMetadata!
    stats: DatastreamTokenStats @goField(forceResolver: true)
    # WorkspaceObject
    id: ObjectId!
    workspaceId: ObjectId!
    name: String!
    iconUrl: String
    description: String
    managedById: ObjectId
    managedBy: WorkspaceObject @goField(forceResolver: true)

    # FolderObject
    folderId: ObjectId!

    # AuditedObject
    createdBy: UserId!
    createdDate: Time!
    createdByInfo: UserInfo! @goField(forceResolver: true)
    updatedBy: UserId!
    updatedDate: Time!
    updatedByInfo: UserInfo! @goField(forceResolver: true)
}

input FiledropInput @goModel(model: "observe/meta/metatypes.FiledropInput") {
    # payload
    # not in input: status: FiledropStatus!
    disabled: Boolean
    # immutable: datastreamID: ObjectId!
    # not in input: datastreamTokenID: String!
    config: FiledropConfigInput!
    # not in input: endpoint: FiledropEndpoint!
    # tramp field: metadata: FiledropMetadataInput!
    # resolver: stats: DatastreamTokenStats
    # WorkspaceObject
    name: String
    iconUrl: String
    description: String
    managedById: ObjectId

    # FolderObject
    folderId: ObjectId
}

type FiledropSearchResult @goModel(model: "observe/meta/metatypes.FiledropSearchResult") {
    results: [Filedrop!]!
}
# User provided configuration that defines a filedrop
type FiledropConfig @goModel(model: "observe/meta/metatypes.FiledropConfig") {
    # payload
    provider: FiledropProviderConfig!
    # not in output: providerAws: FiledropProviderAwsConfig
}

input FiledropConfigInput @goModel(model: "observe/meta/metatypes.FiledropConfigInput") {
    # payload
    # not in input: provider: FiledropProviderConfig!
    providerAws: FiledropProviderAwsConfigInput
}

type FiledropProviderAwsConfig implements FiledropProviderConfig @goModel(model: "observe/meta/metatypes.FiledropProviderAwsConfig") {
    # payload
    type: FiledropProviderType!
    """
    AWS region of the filedrop
    """
    region: String!
    """
    User provided IAM role to access the filedrop
    """
    roleArn: String!
}

input FiledropProviderAwsConfigInput @goModel(model: "observe/meta/metatypes.FiledropProviderAwsConfigInput") {
    # payload
    # not in input: type: FiledropProviderType!
    region: String!
    roleArn: String!
}

type FiledropS3Endpoint implements FiledropEndpoint @goModel(model: "observe/meta/metatypes.FiledropS3Endpoint") {
    # payload
    type: FiledropEndpointType!
    """
    IAM arn of the S3 access point
    """
    arn: String!
    """
    Bucket style alias of the S3 access point
    """
    bucket: String!
    """
    filedrop's prefix path within the S3 access point
    """
    prefix: String!
}















