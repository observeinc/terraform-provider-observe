type Authtoken implements Token & AuditedObject @goModel(model: "observe/meta/metatypes.Authtoken") {
    id: String!
    name: String!
    description: String
    createdBy: UserId!
    createdDate: Time!
    createdByInfo: UserInfo! @goField(forceResolver: true)
    updatedBy: UserId!
    updatedDate: Time!
    updatedByInfo: UserInfo! @goField(forceResolver: true)
    """
    Stats will currently always be null on Authtoken
    """
    stats: TokenStats
    disabled: Boolean!
    expiration: Time!
    extensionSeconds: Int64!

    kind: AuthtokenKind!
    user: UserId
    userInfo: UserInfo @goField(forceResolver: true)
    datastreamId: ObjectId
}

type AuthtokenCreateResult @goModel(model: "observe/meta/metatypes.AuthtokenCreateResult") {
    authtoken: Authtoken!
    """
    This secret is the bearer token you will present in the Authorization: header. It cannot
    be recovered if you lose it, only a hash is stored in the database.
    """
    secret: String!
}

input AuthtokenInput @goModel(model: "observe/meta/metatypes.AuthtokenInput") {
    name: String!
    description: String
    disabled: Boolean!
    extensionSeconds: Int64!
    expiration: Time!
}

enum AuthtokenKind @goModel(model: "observe/authorization.AuthtokenKind") {
    Datastream
    Login
    Api
    Sso
}

extend type Query {
    authtoken(id: String!): Authtoken!
    searchAuthtokens(kinds: [AuthtokenKind!], user: UserId): [Authtoken!]
}

extend type Mutation {
    """
    We can actually only create 'api' authtokens through this API. That's the default kind, too.
    If you are an admin, you can create an authtoken owned by a service account user.
    Note that the AuthtokenCreateResult is the only place where the clear-text authtoken is returned to you.
    It cannot be retrieved after the fact.
    """
    createAuthtoken(input: AuthtokenInput!, kind: AuthtokenKind, owningUser: UserId): AuthtokenCreateResult!
    updateAuthtoken(id: String!, input: AuthtokenInput!, newOwningUser: UserId): Authtoken!
    deleteAuthtoken(id: String!): ResultStatus!
    """
    "kinds" and "user" are both optional, but combine together with AND -- "delete all Login tokens for user 3"
    Meanwhile, "kinds" is OR -- "delete all authtokens that are either Login or Sso" 
    You must specify at least one of them -- "delete all authtokens" is not a thing. (But you can delete all
    authtokens of all kinds by specifying those.)
    """
    deleteAuthtokens(kinds: [AuthtokenKind!], user: UserId): ResultStatus!
}
