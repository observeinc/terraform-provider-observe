fragment Dataset on Dataset {
	workspaceId
	id
	name
	freshnessDesired
	description
	iconUrl
	accelerationDisabled
	version
	updatedDate
	pathCost
	source
	managedById
	onDemandMaterializationLength
	dataTableViewState
	foreignKeys {
		label
		targetDataset
		srcFields
		dstFields
	}
	transform {
		current {
			query {
				outputStage
				# @genqlient(flatten: true)
				stages {
					...StageQuery
				}
			}
		}
	}
	typedef {
		label
		def {
			anykey
			fields {
				name
				type {
					rep
					nullable
				}
				isEnum
				isSearchable
				isHidden
				isConst
				isMetric
			}
		}
	}
	sourceTable {
		schema
		partitions {
			name
		}
		sourceUpdateTableName
		isInsertOnly
		batchSeqField
		validFromField
		fields {
			name
			sqlType
		}
	}
	correlationTagMappings {
		tag
		path {
			column
			path
		}
	}
}

fragment DatasetIdName on Dataset {
	name
	id
}

# @genqlient(for: "DatasetInput.deleted", omitempty: true)
# @genqlient(for: "DatasetInput.accelerationDisabled", omitempty: true)
# @genqlient(for: "InputDefinitionInput.stageID", omitempty: true)
# @genqlient(for: "InputDefinitionInput.stageId", omitempty: true)
# @genqlient(for: "StageQueryInput.stageID", omitempty: true)
# @genqlient(for: "StageQueryInput.stageId", omitempty: true)
# @genqlient(for: "StageQueryInput.id", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.bool", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.float64", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.int64", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.string", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.timestamp", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.duration", omitempty: true)
mutation saveDataset(
	$workspaceId: ObjectId!,
	$dataset: DatasetInput!,
	$query: MultiStageQueryInput!,
	$dep: DependencyHandlingInput
) {
	dataset: saveDataset(workspaceId:$workspaceId, dataset:$dataset, query:$query, dependencyHandling:$dep) {
		# @genqlient(flatten: true)
		dataset {
			...Dataset
		}
	}
}

query getDataset($id: ObjectId!) {
	# @genqlient(flatten: true)
	dataset: dataset(id: $id) {
		...Dataset
	}
}

mutation deleteDataset($id: ObjectId!,  $dep: DependencyHandlingInput) {
	# @genqlient(flatten: true)
	resultStatus: deleteDataset(dsid: $id, dependencyHandling:$dep) {
		...ResultStatus
	}
}

query lookupDataset($workspaceId: ObjectId!, $name: String!) {
	dataset: workspace(id: $workspaceId) {
		# @genqlient(flatten: true, pointer: true)
		dataset(label: $name) {
			...Dataset
		}
	}
}

query listDatasets{
	datasets: projects {
		# @genqlient(flatten: true)
		datasets {
			...Dataset
		}
	}
}

query listDatasetsIdNameOnly {
	datasets: datasetSearch {
		# @genqlient(flatten: true)
		dataset {
			...DatasetIdName
		}
	}
}

# @genqlient(for: "DatasetFieldTypeInput.nullable", omitempty: true)
# @genqlient(for: "DatasetInput.deleted", omitempty: true)
# @genqlient(for: "DatasetInput.accelerationDisabled", omitempty: true)
# @genqlient(for: "InputDefinitionInput.stageID", omitempty: true)
# @genqlient(for: "InputDefinitionInput.stageId", omitempty: true)
# @genqlient(for: "StageQueryInput.stageID", omitempty: true)
# @genqlient(for: "StageQueryInput.stageId", omitempty: true)
# @genqlient(for: "StageQueryInput.id", omitempty: true)
# @genqlient(for: "SourceTableDefinitionInput.isInsertOnly", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.bool", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.float64", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.int64", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.string", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.timestamp", omitempty: true)
# @genqlient(for: "PrimitiveValueInput.duration", omitempty: true)
mutation saveSourceDataset(
	$workspaceId: ObjectId!,
	$datasetDefinition: DatasetDefinitionInput!,
	$sourceTable: SourceTableDefinitionInput!,
	$dep: DependencyHandlingInput
) {
	dataset: saveSourceDataset(workspaceId:$workspaceId, datasetDefinition:$datasetDefinition, sourceTable:$sourceTable, dependencyHandling:$dep) {
		# @genqlient(flatten: true)
		dataset {
			...Dataset
		}
	}
}
