---
# generated by https://github.com/hashicorp/terraform-plugin-docs
page_title: "{{.Name}} {{.Type}} - {{.ProviderName}}"
subcategory: ""
description: |-
{{ .Description | plainmarkdown | trimspace | prefixlines "  " }}
---
# {{.Name}}

{{ .Description | trimspace }}
{{ if .HasExample -}}
## Example Usage
{{ tffile .ExampleFile }}
{{- end }}
{{ .SchemaMarkdown | trimspace }}
{{ if .HasImport -}}
## Import
Import is supported using the following syntax:
{{ codefile "shell" .ImportFile }}
{{- end }}

## CloudWatch Metrics poller

To configure a CloudWatch Metrics poller, you must provide an AWS IAM role which Observe can assume. This role:
- must allow `cloudwatch:GetMetricData` and `cloudwatch:ListMetrics` actions
- must allow `tag:GetResources`, if resource filtering is used in the query
- should set the ExternalID to the the datastream ID

The following example provides a complete setup for delivering EC2 CloudWatch metrics to a `Default` datastream in the `Default` workspace, using both the `aws` and `observe` providers:

{{ tffile "examples/resources/observe_poller/cloudwatch_metrics.tf" }}

### Filtering by namespace

A single poller can contain multiple queries. Each query corresponds to a
single `cloudwatch:ListMetrics` action. This action may corresponds to multiple
requests due to pagination.

Each query must provide a namespace, e.g:

{{ tffile "examples/resources/observe_poller/cloudwatch_metrics_namespace.tf" }}

The above example is the equivalent to retrieving all data points for the
metrics returned by `aws cloudwatch list-metrics --namespace AWS/EC2` and `aws
cloudwatch list-metrics --namespace AWS/SQS`

### Filtering by metric names

You may additionally filter queries to a subset of metric names:

{{ tffile "examples/resources/observe_poller/cloudwatch_metrics_metric_names.tf" }}

Behind the scenes, the AWS API `ListMetrics` API only allows for filtering by
one metric name. If more than one metric name is provided, we will issue a
single ListMetrics call, and filter by metric name on the client side. If you
would like to ensure that each `ListMetrics` call is filtered server side, you
should provide each metric name as a separate queries:

{{ tffile "examples/resources/observe_poller/cloudwatch_metrics_metric_names_split.tf" }}

### Filtering by dimension

You can also provide a set of dimension filters, e.g:

{{ tffile "examples/resources/observe_poller/cloudwatch_metrics_dimension.tf" }}

All dimensions must exactly match. You can debug the behavior by using the AWS cli, e.g 

```
aws cloudwatch list-metrics --namespace AWS/Lambda --dimensions Name=FunctionName,Value=foo Name=Resource,Value=foo
```

### Filtering by resource tags

It is often more convenient to retrieve metrics refering to a set of commonly
tagged resources. For example, we may want `CPUUtilization` for all EC2
instances with the tag `Environment` set to particular values. This can be
achieved via a `resource_filter`:

{{ tffile "examples/resources/observe_poller/cloudwatch_metrics_resource_filter.tf" }}


